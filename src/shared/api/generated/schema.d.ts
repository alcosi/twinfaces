/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/private/user/{userId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update user */
        put: operations["userUpdateV1"];
        post?: never;
        /** Delete user */
        delete: operations["userDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user/locale/{localeName}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update user locale */
        put: operations["userLocaleUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twinflow/{twinflowId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twinflow details */
        get: operations["twinflowViewV1"];
        /** Update twinflow by id */
        put: operations["twinflowUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_status/{twinStatusId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return twin status data by id */
        get: operations["twinStatusViewV1"];
        /** Update twin status */
        put: operations["twinStatusUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class_field/{twinClassFieldId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin class field list */
        get: operations["twinClassFieldViewV1"];
        /**
         * Update twin class field
         * @deprecated
         */
        put: operations["twinClassFieldUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class_field/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update twin class field batch */
        put: operations["twinClassFieldUpdateV2"];
        /** Create batch twin class fields */
        post: operations["twinClassFieldCreateV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin class by id */
        get: operations["twinClassViewV1"];
        /**
         * Update twin class by id
         * @deprecated
         */
        put: operations["twinClassUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update twin classes batch */
        put: operations["twinClassUpdateV2"];
        /** Create twin classes batch */
        post: operations["twinClassCreateV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns twin data by id
         * @deprecated
         */
        get: operations["twinViewV1"];
        /** Update twin */
        put: operations["twinUpdateV1"];
        post?: never;
        /** Delete twin by id */
        delete: operations["twinDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/untouch/{touchId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Unmark twin as touched for user */
        put: operations["twinUntouchV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/touch/{touchId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark twin as touched for user */
        put: operations["twinTouchAddV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/tier/{tierId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** tier for update */
        put: operations["tierUpdateV1"];
        post?: never;
        /** Delete tier by id */
        delete: operations["tierServiceDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/user_group/{permissionGrantUserGroupId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update permission grant user group */
        put: operations["permissionGrantUserGroupUpdateV1"];
        post?: never;
        /** Delete permission grant user group by id */
        delete: operations["permissionGrantUserGroupDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/user/{permissionGrantUserId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update permission grant user */
        put: operations["permissionGrantUserUpdateV1"];
        post?: never;
        /** Delete permission grant user by id */
        delete: operations["permissionGrantUserDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/twin_role/{permissionGrantTwinRoleId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Permission grant twin role update */
        put: operations["permissionGrantTwinRoleUpdateV1"];
        post?: never;
        /** Delete permission grant twin role by id */
        delete: operations["permissionGrantTwinRoleDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/space_role/{permissionGrantSpaceRoleId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Permission grant space role update */
        put: operations["permissionGrantSpaceRoleUpdateV1"];
        post?: never;
        /** Delete permission grant space role by id */
        delete: operations["permissionGrantSpaceRoleDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/assingee_propagation/{permissionGrantAssigneePropagationId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Permission grant assignee propagation update */
        put: operations["permissionGrantAssigneePropagationUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/link/{linkId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Link view */
        get: operations["linkViewV1"];
        /** Update link by id */
        put: operations["linkUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/i18n_translation/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** I18n translations for update */
        put: operations["i18nTranslationUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_pipeline/{factoryPipelineId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Factory pipeline update */
        put: operations["factoryPipelineUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_multiplier/{factoryMultiplierId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Factory multiplier update */
        put: operations["factoryMultiplierUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_branch/{factoryBranchId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Factory branch by id */
        get: operations["factoryBranchViewV1"];
        /** Factory branch update */
        put: operations["factoryBranchUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory/{factoryId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Factory data */
        get: operations["factoryViewV1"];
        /** Factory update */
        put: operations["factoryUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory/factory_pipeline_step/{factoryPipelineStepId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Factory pipeline step update */
        put: operations["factoryPipelineStepUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory/factory_eraser/{factoryEraserId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update factory eraser */
        put: operations["factoryEraserUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/draft/{draftId}/commit/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Commit draft by id */
        put: operations["draftCommitV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Domain update */
        put: operations["domainUpdateV1"];
        /** Add new domain. */
        post: operations["domainCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/data_list_option/{dataListOptionId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns list data */
        get: operations["dataListOptionViewV1"];
        /**
         * Data list option for update
         * @deprecated
         */
        put: operations["dataListOptionUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/data_list_option/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update data list option batch */
        put: operations["dataListOptionUpdateV2"];
        /** Create batch data list options */
        post: operations["dataListOptionCreateV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/data_list/{dataListId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns list data */
        get: operations["dataListViewV1"];
        /** Data list update */
        put: operations["dataListUpdateV1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/comment/{commentId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns comment by comment id */
        get: operations["twinCommentV1"];
        /** Update comment and it's attachments */
        put: operations["twinCommentUpdateV1"];
        post?: never;
        /** Delete comment with attachments */
        delete: operations["twinCommentDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/business_account/{businessAccountId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update businessAccount
         * @deprecated
         */
        put: operations["businessAccountUpdateV1"];
        post?: never;
        /** Delete businessAccount */
        delete: operations["businessAccountDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/domain/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search public domain data by key */
        post: operations["domainSearchPublicV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/data_list_option/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all public data list options */
        post: operations["dataListOptionSearchPublicListV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/data_list_option/map/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns map option id ref list data option */
        post: operations["dataListOptionsMapViewPublicV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/data_list/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns public details lists */
        post: operations["dataListPublicSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user_group/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all user groups for the current domain */
        post: operations["userGroupSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user/{userId}/user_group/manage/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign or discharge some group to user */
        post: operations["userGroupMemberManageV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Smart endpoint for adding new user. It will also add user to domain and businessAccount if specified. If given businessAccount is not registered in domain, it will register it
         * @deprecated
         */
        post: operations["userAddV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of users by search criteria */
        post: operations["userSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twinflow_schema/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns twinflow schema search result */
        post: operations["twinflowSchemaSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twinflow/{twinflowId}/transition/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new transition */
        post: operations["transitionCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twinflow/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns twinflow search result */
        post: operations["twinflowSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_status/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns twin status search result in current domain */
        post: operations["twinStatusSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class_fields/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all twin class field for the current domain */
        post: operations["twinClassFieldSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/valid_heads/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get valid heads of given class */
        post: operations["validHeadV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/twinflow/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new twinflow */
        post: operations["twinflowCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/twin_status/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new twin status */
        post: operations["twinStatusCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/tag/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Tag search */
        post: operations["tagSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/link/{linkId}/valid_twins/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get valid twins list for link of new (not created) twin */
        post: operations["validLinkedTwinV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/field/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new twin class field
         * @deprecated
         */
        post: operations["twinClassFieldCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/duplicate/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Duplicates twin class by id */
        post: operations["twinClassDuplicateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new twin class
         * @deprecated
         */
        post: operations["twinClassCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns twin class search result */
        post: operations["twinClassSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/valid_heads/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get valid twins list for link of existed twin */
        post: operations["validLinkedTwinsV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/permisson_check_overview/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Permisson check overview by twinId & userId */
        post: operations["permissonCheckOverviewV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/link/{linkId}/valid_twins/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get valid twins list for link of new (not created) twin */
        post: operations["validLinkedTwinsV1_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/link/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add link to twin */
        post: operations["twinLinkAddV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/field_list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates twin fields data by keys */
        post: operations["twinFieldListUpdateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/field/{fieldKey}/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates or updates twin field data by key.  */
        post: operations["twinFieldByKeySaveV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/field/{fieldKey}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin field data by key */
        get: operations["twinFieldByKeyViewV1"];
        put?: never;
        /** Creates or updates twin field data by key.  */
        post: operations["twinFieldByKeySaveV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/attachment/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add attachment to twin */
        post: operations["attachmentCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new twin */
        post: operations["twinCreateV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new twin */
        post: operations["twinCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/touch/{touchId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark twin list as touched for user */
        post: operations["twinTouchAddListV1 "];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/search_by_alias/{searchAlias}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Twins search by alias */
        post: operations["twinSearchByAliasV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/search_by_alias/count/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Count twins by search aliases */
        post: operations["twinSearchByAliasCountV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/search/{searchId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Twins search by search_id */
        post: operations["twinSearchByIdV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/search/v3": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Twins basic search for several queries connected by OR operator */
        post: operations["twinSearchV3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/search/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Twins basic search */
        post: operations["twinSearchV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Twins basic search */
        post: operations["twinSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/search/count/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Count twins by frontendId */
        post: operations["twinSearchCountV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/history/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all histories */
        post: operations["historySearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/delete/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete twins by self id */
        post: operations["twinDeleteBatchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/batch/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create batch twins */
        post: operations["twinBatchCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition_by_alias/{transitionAlias}/perform/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Perform twin transition by alias. An alias can be useful for performing transitions for twin from different statuses. For incoming twin, the appropriate transition will be selected based on its current status. */
        post: operations["twinTransitionByAliasPerformV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition_by_alias/{transitionAlias}/perform/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform twin transition by alias. An alias can be useful for performing transitions for twin from different statuses. For incoming twin, the appropriate transition will be selected based on its current status.
         * @deprecated
         */
        post: operations["twinTransitionByAliasPerformV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition_by_alias/{transitionAlias}/perform/batch/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Perform transition for batch of twins by alias. An alias can be useful for performing transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status. */
        post: operations["twinTransitionByAliasPerformBatchV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition_by_alias/{transitionAlias}/perform/batch/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform transition for batch of twins by alias. An alias can be useful for performing transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status.
         * @deprecated
         */
        post: operations["twinTransitionByAliasPerformBatchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition_by_alias/{transitionAlias}/draft/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Draft twin transition by alias. Result will not be commited to db, and can be browsed by draftId */
        post: operations["twinTransitionByAliasDraftV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition_by_alias/{transitionAlias}/draft/batch/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Draft transition for batch of twins by alias. An alias can be useful for Drafting transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status. */
        post: operations["twinTransitionByAliasDraftBatchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition_alias/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transition alias search request */
        post: operations["transitionAliasSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition/{transitionId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns transition details */
        get: operations["transitionViewV1"];
        put?: never;
        /** Update transition by id */
        post: operations["transitionUpdateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition/{transitionId}/perform/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Perform twin transition by transition id. Transition will be performed only if current twin status is correct for given transition */
        post: operations["twinTransitionPerformV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition/{transitionId}/perform/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform twin transition by transition id. Transition will be performed only if current twin status is correct for given transition
         * @deprecated
         */
        post: operations["twinTransitionPerformV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition/{transitionId}/perform/batch/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Perform transition for batch of twins by transition id. Transition will be performed only if current twin status is correct for given transition */
        post: operations["twinTransitionPerformBatchV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition/{transitionId}/perform/batch/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform transition for batch of twins by transition id. Transition will be performed only if current twin status is correct for given transition
         * @deprecated
         */
        post: operations["twinTransitionPerformBatchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition/{transitionId}/draft/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Draft twin transition by transition id. Result will not be commited to db, and can be browsed by draftId */
        post: operations["twinTransitionDraftV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition/{transitionId}/draft/batch/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Draft transition for batch of twins by transition id */
        post: operations["twinTransitionDraftBatchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/transition/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns transition search result */
        post: operations["transitionSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/tier/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Tier add */
        post: operations["tierCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/tier/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of tiers by search criteria */
        post: operations["tierSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/space_role/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all space role for the current domain */
        post: operations["spaceRoleSearchListV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/space/{spaceId}/users/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search users within their roles of specific space */
        post: operations["spaceRoleWithinUsersMapV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/space/{spaceId}/role/{roleId}/users/override/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add/Remove user list by role and twin */
        post: operations["spaceRoleUserOverrideV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/space/{spaceId}/role/{roleId}/users/manage/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adding/removing a user to the space by role */
        post: operations["spaceRoleUserManageV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_schema/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all permission schemas for the current domain */
        post: operations["permissionSchemaSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_group/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all permission groups for the current domain */
        post: operations["permissionGroupSearchListV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/user_group/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create permission grant user group */
        post: operations["permissionGrantUserGroupCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/user_group/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Permission grant user-group search */
        post: operations["permissionGrantUserGroupSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/user/{grantId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return the permission grant users for the current domain */
        post: operations["permissionGrantUserViewV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/user/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create permission grant user */
        post: operations["permissionGrantUserCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/user/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all permission grant users for the current domain */
        post: operations["permissionGrantUserSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/twin_role/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** permission grant twin role create add */
        post: operations["permissionGrantTwinRoleCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/twin_role/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Permission grant twin role search */
        post: operations["permissionGrantTwinRoleSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/space_role/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** permission grant space role add */
        post: operations["permissionGrantSpaceRoleCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/space_role/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Permission grant space role search */
        post: operations["permissionGrantSpaceRoleSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/assignee_propagation/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** permission grantAssignee propagation create add */
        post: operations["permissionGrantAssigneePropagationCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/assignee_propagation/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Permission grant assignee propagation search */
        post: operations["permissionGrantAssigneePropagationSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission/{permissionId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the permission for the current domain */
        get: operations["permissionViewV1"];
        put?: never;
        /** Update permission */
        post: operations["permissionUpdateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create permission */
        post: operations["permissionCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all permissions for the current domain */
        post: operations["permissionSearchListV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/link/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new link */
        post: operations["linkCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/link/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Link search */
        post: operations["linkSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/i18n_translation/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of i18n translations by search criteria */
        post: operations["i18nTranslationSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/featurer/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Featurer search */
        post: operations["featurerSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_pipeline_step/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Factory pipeline step search */
        post: operations["factoryPipelineStepSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_pipeline/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Factory pipeline search */
        post: operations["factoryPipelineSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_multiplier_filter/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Factory multiplier filter search */
        post: operations["factoryMultiplierFilterSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_multiplier/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Factory multiplier search */
        post: operations["factoryMultiplierSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_eraser/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Factory eraser search */
        post: operations["factoryEraserSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_condition_set/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Condition set search */
        post: operations["factoryConditionSetSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_branch/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Factory branch search */
        post: operations["factoryBranchSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory/{factoryId}/factory_pipeline/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Factory pipeline add */
        post: operations["factoryPipelineCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory/{factoryId}/factory_multiplier/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Factory multiplier add */
        post: operations["factoryMultiplierCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory/{factoryId}/factory_eraser/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create factory eraser */
        post: operations["factoryEraserCreateV1"];
        /** Delete factory eraser by id */
        delete: operations["factoryEraserDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory/{factoryId}/factory_branch/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Factory branch add */
        post: operations["factoryBranchCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Factory add */
        post: operations["factoryCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all factories for the current domain */
        post: operations["factorySearchListV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory/factory_pipeline/{factoryPipelineId}/factory_pipeline_step/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** factory pipeline step add */
        post: operations[" factoryPipelineStepCreateV1"];
        /** Delete factory pipeline step by id */
        delete: operations["factoryPipelineStepDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/{domainId}/user/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add user to domainIf user is not exist it will be created.
         * @deprecated
         */
        post: operations["domainUserAddV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/{domainId}/business_account/{businessAccountId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update settings for businessAccount in domain
         * @deprecated
         */
        post: operations["domainBusinessAccountUpdateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/{domainId}/business_account/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add businessAccount to domain. If business account is not exist it will be created. Domain must be already present.
         * @deprecated
         */
        post: operations["domainBusinessAccountAddV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new domain with icons */
        post: operations["domainCreateV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/user/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of users by current domain */
        post: operations["domainUserSearchListV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/business_account/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns domain business account search result */
        post: operations["domainBusinessAccountSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/data_list_option/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create data list option data
         * @deprecated
         */
        post: operations["dataListOptionCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/data_list_option/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a list of all data list option for the current domain */
        post: operations["dataListOptionSearchListV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/data_list_option/map/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns map option id ref list data option */
        post: operations["dataListOptionsMapViewV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/data_list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Data list add */
        post: operations["dataListCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/data_list/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns lists details */
        post: operations["dataListSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/comment/twin/{twinId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns comment list by twin id */
        get: operations["twinCommentListV1"];
        put?: never;
        /** Add comment and it's attachments by twin */
        post: operations["twinCommentAddV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/comment/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns comment search result in current domain */
        post: operations["commentSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/business_account/{businessAccountId}/user/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add user to business account. If business account is not exist it will be created. If user is not exist it will be created
         * @deprecated
         */
        post: operations["businessAccountUserAddV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/attachment/validate_cud/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate attachment CUD operations */
        post: operations["attachmentValidateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/attachment/search/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search data list of attachments */
        post: operations["attachmentSearchV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signup_by_email/initiate/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate signup by email */
        post: operations["authSignupByEmailInitiateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signup_by_email/confirm/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm email be token, which was sent to given email */
        post: operations["authSignupByEmailConfirmV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh auth_token by refresh_token and fingerprint */
        post: operations["authRefreshV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh auth_token by refresh_token */
        post: operations["authRefreshV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/m2m/token/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns auth data for machine-to-machine + act-as-user public key */
        post: operations["authM2MTokenV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/m2m/login/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Returns auth data for machine-to-machine + act-as-user public key
         * @deprecated
         */
        post: operations["authM2MLoginV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout from identity provider, linked to current domain */
        post: operations["authLogoutV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns auth/refresh tokens by username/password and fingerprint (if required) */
        post: operations["authLoginV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/config/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Returns auth configuration for selected domain. Wit */
        post: operations["authConfigV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/resource/{id}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** File in attachment */
        get: operations["getResourceFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/locale/list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return list of locales */
        get: operations["localeListPublicViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/domain_by_key/{domainKey}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns public domain data by key */
        get: operations["domainViewByKeyPublicV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/domain/{domainId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns public domain data by id */
        get: operations["domainViewPublicV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/data_list_option/{dataListOptionId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns public list data */
        get: operations["dataListOptionPublicViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/data_list_by_key/{dataListKey}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns public data list */
        get: operations["dataListPublicByKeyViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/data_list/{dataListId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns public data list */
        get: operations["dataListPublicViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user/{userId}/user_group/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns user group list for selected user */
        get: operations["userGroupForUserListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user/{userId}/permission_group/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns grouped permission list for selected user */
        get: operations["userPermissionGroupedListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user/{userId}/permission/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns permission list for selected user */
        get: operations["userPermissionListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user/permission_group/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns grouped permission list for current user */
        get: operations["currentUserPermissionGroupedListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user/permission/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns permission list for current user */
        get: operations["currentUserPermissionListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/user/locale/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** View user locale in domain */
        get: operations["userLocaleViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class_field/{twinClassFieldId}/data_list_shared_in_head/{headTwinId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin class field options shared in head (free for select) */
        get: operations["twinClassFieldDataListSharedInHeadV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class_by_key/{twinClassKey}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin class by key */
        get: operations["twinClassViewByKeyV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class_by_key/{classKey}/field/{fieldKey}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin class field list */
        get: operations["twinClassFieldViewByKeyV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/widget/list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns widget list */
        get: operations["twinClassWidgetListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/link/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns twin class link list
         * @deprecated
         */
        get: operations["twinClassLinkListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/field/list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin class field list */
        get: operations["twinClassFieldListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/{twinClassId}/card/list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns card list */
        get: operations["twinClassCardListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_class/list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin class list */
        get: operations["twinClassListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_by_alias/{twinAlias}/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin data by alias */
        get: operations["twinViewByAliasV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin_by_alias/{twinAlias}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin data by alias */
        get: operations["twinViewByAliasV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin data by id */
        get: operations["twinViewV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/history/list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns twin history by id */
        get: operations["historyListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/history/{historyId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return history by id */
        get: operations["historyViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/system/log/substitutions_config/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Make config file for log substitutions */
        get: operations["makeConfigForSubstitutions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/system/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns application info: versions, etc... */
        get: operations["Application info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/space/{spaceId}/users/{userId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user within his roles of specific space */
        get: operations["spaceRoleUserViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/space/{spaceId}/users/list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all users within roles of specific space */
        get: operations["spaceRoleWithinAllUsersMapV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/space/{spaceId}/role/{roleId}/users/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns user list by selected space and role */
        get: operations["spaceRoleByUserListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_schema/{schemaId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the permission schema for the current domain */
        get: operations["permissionSchemaViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_group_by_key/{groupKey}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the permission group by key */
        get: operations["permissionGroupViewByKeyV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_group/{groupId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the permission group by id */
        get: operations["permissionGroupViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/user_group/{grantId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Permission grant user-group view */
        get: operations["permissionGrantUserGroupViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/twin_role/{grantId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Permission grant twin role view */
        get: operations["permissionGrantTwinRoleViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/space_role/{grantId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Permission grant space role view */
        get: operations["permissionGrantSpaceRoleViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/assignee_propagation/{grantId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Permission grant assignee propagation view */
        get: operations["permissionGrantAssigneePropagationViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_by_key/{permissionKey}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the permission for the current domain by key */
        get: operations["permissionViewByKeyV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/i18n/{i18nId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** View a list of all i18n translations for the i18n */
        get: operations["i18nViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_pipeline_step/{stepId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Factory pipeline step */
        get: operations["factoryPipelineStepViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_pipeline/{pipelineId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Factory pipeline view */
        get: operations["factoryPipelineViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_multiplier_filter/{multiplierId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Factory multiplier filter search */
        get: operations["factoryMultiplierFilterViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_multiplier/{multiplierId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Factory multiplier view */
        get: operations["factoryMultiplierViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_eraser/{eraserId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Factory eraser view by id */
        get: operations["factoryEraserViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/factory_condition_set/{factoryConditionSetId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Condition set view by id */
        get: operations["factoryConditionSetViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns face details */
        get: operations["faceViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/wt003/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns WT003 widget */
        get: operations["faceWT003ViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/wt002/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns WT002 widget config: twin create buttons widget */
        get: operations["faceWT002ViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/wt001/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns WT001 widget config: table of twins of given class */
        get: operations["faceWT001ViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/tw005/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns TW005 widget config: transitions buttons widget */
        get: operations["faceTW005ViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/tw004/{faceId}/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns TW004 widget config: twins multi field view/edit widget */
        get: operations["faceTW004ViewV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/tw004/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns TW004 widget config: twins single field view/edit widget
         * @deprecated
         */
        get: operations["faceTW004ViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/tw002/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns TW002 widget config: i18n field accordion */
        get: operations["faceTW002ViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/tw001/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns TW001 widget config: image gallery */
        get: operations["faceTW001ViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/pg002/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns PG002 page config: tabs */
        get: operations["facePG002ViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/pg001/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns PG001 page config: single column layout */
        get: operations["facePG001ViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/face/nb001/{faceId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns NB001 navbar config */
        get: operations["faceNB001ViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/{domainId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns domain data by id */
        get: operations["domainViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/user/{userId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the user by id */
        get: operations["domainUserViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/user/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns current user */
        get: operations["domainCurrentUserViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return a list of domains for current user */
        get: operations["domainListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/class_owner_type/list/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the owner type of the domain class */
        get: operations["twinClassOwnerTypeListV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/business_account/{businessAccountId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns domain business account result */
        get: operations["domainBusinessAccountViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/data_list_by_key/{dataListKey}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns list data */
        get: operations["dataListByKeyViewV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/attachment/{attachmentId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** View attachment by id */
        get: operations["attachmentViewV1"];
        put?: never;
        post?: never;
        /** Delete attachment by id */
        delete: operations["attachmentDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/attachment/quotas/domain_business_account/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get info about storage quotas(count files/disk space usage) for BA */
        get: operations["attachmentDomainBusinessAccountQuotasV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/attachment/quotas/domain/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get info about storage quotas(count files/disk space usage) for Domain */
        get: operations["attachmentDomainQuotasV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/crypt_key/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get public key to encrypt password during auth */
        get: operations["authCryptKeyV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/twin/{twinId}/delete_drafted/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete twin by id */
        delete: operations["twinDeleteDraftedV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/permission_grant/assignee_propagation/{permissionGrantAssigneePropagationId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete permission grant assignee propagation by id */
        delete: operations["permissionGrantAssigneePropagationDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/{domainId}/user/{userId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete user from domain */
        delete: operations["domainUserDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/domain/business_account/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete businessAccount from domain
         * @deprecated
         */
        delete: operations["domainBusinessAccountDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/business_account/{businessAccountId}/user/{userId}/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete user from businessAccount
         * @deprecated
         */
        delete: operations["businessAccountUserDeleteV1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserUpdateRqV1: {
            /**
             * @description fullName
             * @example John Doe
             */
            fullName?: string;
            /**
             * @description email
             * @example some@email.com
             */
            email?: string;
            /**
             * @description avatar url
             * @example http://twins.org/a/avatar/carkikrefmkawfwfwg.png
             */
            avatar?: string;
        };
        Response: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
        };
        I18nSaveV1: {
            /**
             * @description translation in current locale
             * @example translation
             */
            translationInCurrentLocale?: string;
            /**
             * @description map (locale : translate)
             * @example {
             *       "en": "translation",
             *       "pl": "tłumaczenie",
             *       "ru": "перевод"
             *     }
             */
            translations?: {
                [key: string]: string;
            };
        };
        TwinflowUpdateRqV1: {
            /** @description I18n name */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description I18n description */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * Format: uuid
             * @description initial status id
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            initialStatusId?: string;
        };
        TwinClassBaseV1: {
            /**
             * Format: uuid
             * @description id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            id?: string;
            /**
             * @description key
             * @example PROJECT
             */
            key?: string;
            /**
             * @description name
             * @example Project
             */
            name?: string;
            /**
             * @description description
             * @example Projects business objects
             */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * @description logo
             * @example http://twins.org/t/class/project.png
             */
            logo?: string;
            /** @description if class is abstract no twin of it can be created. Some child class must be used */
            abstractClass?: boolean;
            /**
             * Format: uuid
             * @description head class id or empty if class is not linked to any head
             * @example c2854a55-1dfe-41cd-bb36-f71eeaf16f81
             */
            headClassId?: string;
            /**
             * Format: uuid
             * @description some markers for twins. Are domain level and not editable by user
             */
            markersDataListId?: string;
            /**
             * Format: uuid
             * @description some tags for twins. Can be business account level and editable by user
             */
            tagsDataListId?: string;
            /**
             * @description twin class owner type
             * @enum {string}
             */
            ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
            /**
             * Format: uuid
             * @description extends class id or empty if class is not linked to any classes
             */
            extendsClassId?: string;
            /** @description if true, take the twinflow scheme in space */
            twinflowSchemaSpace?: boolean;
            twinClassSchemaSpace?: boolean;
            /** @description if true, take the permission scheme in space */
            permissionSchemaSpace?: boolean;
            aliasSpace?: boolean;
            /**
             * Format: int32
             * @description head hunter featurer id
             */
            headHunterFeaturerId?: number;
            /** @description head hunter featurer params */
            headHunterParams?: {
                [key: string]: string;
            };
            /**
             * Format: uuid
             * @description view permission id
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description create permission id
             */
            createPermissionId?: string;
            /**
             * Format: uuid
             * @description edit permission id
             */
            editPermissionId?: string;
            /**
             * Format: uuid
             * @description delete permission id
             */
            deletePermissionId?: string;
            /**
             * Format: uuid
             * @description uuid of name in I18n table
             */
            nameI18nId?: string;
            /**
             * Format: uuid
             * @description uuid of description in I18n table
             */
            descriptionI18nId?: string;
            /**
             * Format: uuid
             * @description twin display page pointer
             */
            pageFaceId?: string;
            /** @description assignee required */
            assigneeRequired?: boolean;
            /** @description external id */
            externalId?: string;
        };
        TwinflowBaseV1: {
            /**
             * Format: uuid
             * @example 34618b09-e8dc-4712-a433-2e18915ee70d
             */
            id?: string;
            /**
             * Format: uuid
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /**
             * @description name
             * @example Project
             */
            name?: string;
            /**
             * @description description
             * @example Projects business objects
             */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: uuid
             * @description initialStatusId
             */
            initialStatusId?: string;
            /** @description twin class */
            twinClass?: components["schemas"]["TwinClassBaseV1"];
        };
        TwinStatusUpdateRqV1: {
            /**
             * @description [optional] key within the domain
             * @example toDo
             */
            key?: string;
            /** @description [optional] name */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description [optional] description */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description [optional] url for status UI logo
             * @example https://twins.org/img/twin_status_default.png
             */
            logo?: string;
            /**
             * @description [optional] background color hex
             * @example #ff00ff
             */
            backgroundColor?: string;
            /**
             * @description [optional] font color hex
             * @example #ff00ff
             */
            fontColor?: string;
        };
        TwinStatusUpdateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description twin status */
            twinStatus?: components["schemas"]["TwinStatusV1"];
        };
        TwinStatusV1: {
            /**
             * Format: uuid
             * @description uuid
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            id?: string;
            /** @description key within the domain */
            key?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * @description url for status UI logo
             * @example https://twins.org/img/twin_status_default.png
             */
            logo?: string;
            /**
             * @description background color hex
             * @example #ff00ff
             */
            backgroundColor?: string;
            /**
             * @description font color hex
             * @example #ff00ff
             */
            fontColor?: string;
            /**
             * Format: uuid
             * @description twin class
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
        };
        TwinClassFieldUpdateRqV1: {
            /**
             * @description unique key within the class
             * @example serialNumber
             */
            key?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to view this field
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to edit this field
             */
            editPermissionId?: string;
            /** @description I18n name */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description I18n description */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description Required field
             * @example true
             */
            required?: boolean;
            /** @description external id */
            externalId?: string;
            /**
             * Format: int32
             * @description Field typer featurer ID
             * @example 1
             */
            fieldTyperFeaturerId?: number;
            /**
             * @description Field typer parameters
             * @example {}
             */
            fieldTyperParams?: {
                [key: string]: string;
            };
            /**
             * Format: uuid
             * @description twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
        };
        AttachmentV1: {
            /**
             * Format: uuid
             * @description id
             * @example 553ef9bc-3b48-430d-90d3-bdee516c3d87
             */
            id?: string;
            /**
             * Format: uuid
             * @description twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            twinId?: string;
            /**
             * @description External storage link
             * @example https://test.filestorage.by/JFUjEFWksfqwf
             */
            storageLink?: string;
            /**
             * @description External storage links map by key
             * @example {
             *       "origin": "https://test.filestorage.by/JFUjEFWksfqwf"
             *     }
             */
            modifications?: {
                [key: string]: string;
            };
            /**
             * @description External id
             * @example JD999weqw9f
             */
            externalId?: string;
            /**
             * @description Title
             * @example cert.pdf
             */
            title?: string;
            /**
             * @description Description
             * @example cert.pdf
             */
            description?: string;
            /**
             * Format: int64
             * @description File size in bytes
             * @example 123456
             */
            size?: number;
            /**
             * Format: uuid
             * @description view permission id
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description author id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            authorUserId?: string;
            /**
             * Format: uuid
             * @description comment id
             * @example be44e826-ce24-4881-a227-f3f72d915a20
             */
            commentId?: string;
            /**
             * Format: uuid
             * @description twin class field id
             * @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d
             */
            twinClassFieldId?: string;
            /**
             * Format: uuid
             * @description twinflow transition id
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            twinflowTransitionId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /** @description attachment action list */
            attachmentActions?: ("VIEW" | "EDIT" | "DELETE")[];
        };
        AttachmentsCountV1: {
            /**
             * Format: int32
             * @description Total number of attachments
             * @example 20
             */
            all?: number;
            /**
             * Format: int32
             * @description Number of attachments direct for a twin
             * @example 12
             */
            direct?: number;
            /**
             * Format: int32
             * @description Number of attachments for transition only
             * @example 3
             */
            fromTransitions?: number;
            /**
             * Format: int32
             * @description Number of attachments for comment only
             * @example 4
             */
            fromComments?: number;
            /**
             * Format: int32
             * @description Number of attachments for twin class field only
             * @example 1
             */
            fromFields?: number;
        };
        BusinessAccountV1: {
            /**
             * Format: uuid
             * @description id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description name
             * @example Business account name
             */
            name?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
        };
        CommentV1: {
            /**
             * Format: uuid
             * @description id
             * @example be44e826-ce24-4881-a227-f3f72d915a20
             */
            id?: string;
            text?: string;
            /**
             * Format: uuid
             * @description author id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            authorUserId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description changed at
             * @example 2023-09-13T09:32:08
             */
            changedAt?: string;
            /** @description attachment ids */
            attachmentIds?: string[];
            /** @description comment actions */
            commentActions?: ("EDIT" | "DELETE" | "PIN" | "UNPIN" | "VOTE" | "REACT" | "HIDE" | "UNHIDE")[];
        };
        DataListAttributeV1: {
            /**
             * @description key
             * @example color
             */
            key?: string;
            /**
             * @description name
             * @example Some name
             */
            name?: string;
        };
        DataListOptionV1: {
            /**
             * Format: uuid
             * @description id
             * @example 7de977d4-df6d-4250-9cb2-088363d139a1
             */
            id?: string;
            /**
             * @description name
             * @example Bharat
             */
            name?: string;
            /**
             * @description icon
             * @example Icon path
             */
            icon?: string;
            /**
             * @description status
             * @example active
             * @enum {string}
             */
            status?: "active" | "disabled" | "hidden";
            /** @description map attributes (key : value) */
            attributes?: {
                [key: string]: string;
            };
            /**
             * @description background color
             * @example #ff00ff
             */
            backgroundColor?: string;
            /**
             * @description font color
             * @example #ff00ff
             */
            fontColor?: string;
        };
        DataListV1: {
            /**
             * Format: uuid
             * @description id
             * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
             */
            id?: string;
            /**
             * @description name
             * @example Country list
             */
            name?: string;
            /**
             * @description description
             * @example Supported country list
             */
            description?: string;
            /**
             * @description key
             * @example country
             */
            key?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description updated at
             * @example 2023-09-13T09:32:08
             */
            updatedAt?: string;
            /** @description attribute1 */
            attribute1?: components["schemas"]["DataListAttributeV1"];
            /** @description attribute2 */
            attribute2?: components["schemas"]["DataListAttributeV1"];
            /** @description attribute3 */
            attribute3?: components["schemas"]["DataListAttributeV1"];
            /** @description attribute4 */
            attribute4?: components["schemas"]["DataListAttributeV1"];
            /** @description attribute5 */
            attribute5?: components["schemas"]["DataListAttributeV1"];
            /** @description external id */
            externalId?: string;
        };
        FaceV1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
        };
        FactoryPipelineV1: {
            /**
             * Format: uuid
             * @description id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            id?: string;
            /**
             * Format: uuid
             * @description factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryId?: string;
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: uuid
             * @description factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description is active
             * @example true
             */
            active?: boolean;
            /**
             * Format: uuid
             * @description output twin status id
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            outputTwinStatusId?: string;
            /**
             * Format: uuid
             * @description next factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            nextFactoryId?: string;
            /**
             * @description next factory limit scope
             * @example true
             */
            nextFactoryLimitScope?: boolean;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: int32
             * @description count pipeline steps
             * @example 3
             */
            pipelineStepsCount?: number;
        };
        FactoryV1: {
            /**
             * Format: uuid
             * @description id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            id?: string;
            /**
             * @description key
             * @example taskReassign
             */
            key?: string;
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description created by user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            createdByUserId?: string;
            /**
             * Format: int32
             * @description factory usages count
             * @example 3
             */
            factoryUsagesCount?: number;
            /**
             * Format: int32
             * @description factory pipelines count
             * @example 3
             */
            factoryPipelinesCount?: number;
            /**
             * Format: int32
             * @description factory multipliers count
             * @example 3
             */
            factoryMultipliersCount?: number;
            /**
             * Format: int32
             * @description factory branches count
             * @example 3
             */
            factoryBranchesCount?: number;
            /**
             * Format: int32
             * @description factory erasers count
             * @example 3
             */
            factoryErasersCount?: number;
        };
        FeaturerParamV1: {
            /**
             * @description key
             * @example listUUID
             */
            key?: string;
            /**
             * @description name
             * @example listUUID
             */
            name?: string;
            /** @description description */
            description?: string;
            /** @description type */
            type?: string;
            /**
             * @description optional
             * @example true
             */
            optional?: boolean;
            /** @description defaultValue */
            defaultValue?: string;
            /**
             * @description exampleValues
             * @example [
             *       "GREEN,RED,BLUE",
             *       6000
             *     ]
             */
            exampleValues?: string[];
            /**
             * Format: int32
             * @description order
             */
            order?: number;
        };
        FeaturerV1: {
            /**
             * Format: int32
             * @description id
             * @example 1000
             */
            id?: number;
            /**
             * Format: int32
             * @description featurer type id
             * @example 12
             */
            featurerTypeId?: number;
            /**
             * @description name
             * @example InjectorImpl
             */
            name?: string;
            /** @description description */
            description?: string;
            /** @description deprecated */
            deprecated?: boolean;
            /** @description params list */
            params?: components["schemas"]["FeaturerParamV1"][];
        };
        I18nV1: {
            /**
             * Format: uuid
             * @description i18n id
             * @example 633c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            i18nId?: string;
            /**
             * @description key
             * @example key
             */
            key?: string;
            /**
             * @description key
             * @example name
             */
            name?: string;
            /**
             * @description translations
             * @example 633c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            translations?: {
                [key: string]: string;
            };
        };
        LinkV1: {
            /**
             * Format: uuid
             * @description id
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            id?: string;
            /**
             * Format: uuid
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            dstTwinClassId?: string;
            /**
             * @description key
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            dstTwinClass?: components["schemas"]["TwinClassV1"];
            /**
             * @description name
             * @example Serial number
             */
            name?: string;
            /**
             * @description Ling strength id
             * @example OPTIONAL
             * @enum {string}
             */
            linkStrengthId?: "MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE";
            /**
             * @description link type
             * @example ManyToOne
             * @enum {string}
             */
            type?: "ManyToOne" | "ManyToMany" | "OneToOne";
        };
        PermissionGroupV1: {
            /**
             * Format: uuid
             * @description id
             * @example 7efd9df0-cae7-455f-a721-eaec455105a4
             */
            id?: string;
            /**
             * @description key
             * @example LOCAL_PERMISSION
             */
            key?: string;
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: uuid
             * @description twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /** @description twin class */
            twinClass?: components["schemas"]["TwinClassV1"];
        };
        PermissionSchemaV2: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /**
             * Format: uuid
             * @description domainId
             */
            domainId?: string;
            /**
             * Format: uuid
             * @description businessAccountId
             */
            businessAccountId?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /** @description businessAccount */
            businessAccount?: components["schemas"]["BusinessAccountV1"];
            /** @description createdByUser */
            createdByUser?: components["schemas"]["UserV1"];
        };
        PermissionV1: {
            /**
             * Format: uuid
             * @description id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            id?: string;
            /** @description key */
            key?: string;
            /**
             * @description name
             * @example Manager
             */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: uuid
             * @description group id
             * @example 7efd9df0-cae7-455f-a721-eaec455105a4
             */
            groupId?: string;
        };
        RelatedObjectsV1: {
            /**
             * @description related statuses map
             * @example {twin map}
             */
            twinMap?: {
                [key: string]: components["schemas"]["TwinV2"];
            };
            /**
             * @description related statuses map
             * @example {twin status map}
             */
            statusMap?: {
                [key: string]: components["schemas"]["TwinStatusV1"];
            };
            /**
             * @description related users map
             * @example {user map}
             */
            userMap?: {
                [key: string]: components["schemas"]["UserV1"];
            };
            /**
             * @description related users group map
             * @example {user group map}
             */
            userGroupMap?: {
                [key: string]: components["schemas"]["UserGroupV1"];
            };
            /**
             * @description related twinClass map
             * @example {twin class map}
             */
            twinClassMap?: {
                [key: string]: components["schemas"]["TwinClassV1"];
            };
            /**
             * @description related transitionsMap map
             * @example {twin transition map}
             */
            transitionsMap?: {
                [key: string]: components["schemas"]["TwinflowTransitionBaseV1"];
            };
            /**
             * @description related datalist map
             * @example {datalist map}
             */
            dataListsMap?: {
                [key: string]: components["schemas"]["DataListV1"];
            };
            /**
             * @description related datalistOption map
             * @example {datalistOption map}
             */
            dataListsOptionMap?: {
                [key: string]: components["schemas"]["DataListOptionV1"];
            };
            /**
             * @description related space role map
             * @example {space role map}
             */
            spaceRoleMap?: {
                [key: string]: components["schemas"]["SpaceRoleV1"];
            };
            /**
             * @description related business account map
             * @example {business account map}
             */
            businessAccountMap?: {
                [key: string]: components["schemas"]["BusinessAccountV1"];
            };
            /**
             * @description related permission group map
             * @example {permission group map}
             */
            permissionGroupMap?: {
                [key: string]: components["schemas"]["PermissionGroupV1"];
            };
            /**
             * @description related permission map
             * @example {permission map}
             */
            permissionMap?: {
                [key: string]: components["schemas"]["PermissionV1"];
            };
            /**
             * @description related permission schema map
             * @example {permission schema map}
             */
            permissionSchemaMap?: {
                [key: string]: components["schemas"]["PermissionSchemaV2"];
            };
            /**
             * @description related twinflow map
             * @example {twinflow map}
             */
            twinflowMap?: {
                [key: string]: components["schemas"]["TwinflowBaseV1"];
            };
            /**
             * @description related factory map
             * @example {factory map}
             */
            factoryMap?: {
                [key: string]: components["schemas"]["FactoryV1"];
            };
            /**
             * @description related factory pipeline map
             * @example {factory pipeline map}
             */
            factoryPipelineMap?: {
                [key: string]: components["schemas"]["FactoryPipelineV1"];
            };
            /**
             * @description related twinclass schema map
             * @example {twin class schema map}
             */
            twinClassSchemaMap?: {
                [key: string]: components["schemas"]["TwinClassSchemaV1"];
            };
            /**
             * @description related comment map
             * @example {comment map}
             */
            commentMap?: {
                [key: string]: components["schemas"]["CommentV1"];
            };
            /**
             * @description related featurer map
             * @example {featurer map}
             */
            featurerMap?: {
                [key: string]: components["schemas"]["FeaturerV1"];
            };
            /**
             * @description related face map
             * @example {face map}
             */
            faceMap?: {
                [key: string]: components["schemas"]["FaceV1"];
            };
            /**
             * @description related i18n map
             * @example {face map}
             */
            i18nMap?: {
                [key: string]: components["schemas"]["I18nV1"];
            };
            /**
             * @description related class field map
             * @example {class field map}
             */
            twinClassFieldMap?: {
                [key: string]: components["schemas"]["TwinClassFieldV1"];
            };
        };
        SpaceRoleV1: {
            /**
             * Format: uuid
             * @description space role user id
             * @example 275bf3c4-951a-4d26-bb82-5e18361d301c
             */
            id?: string;
            /**
             * @description key
             * @example Member
             */
            key?: string;
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: uuid
             * @description twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /**
             * Format: uuid
             * @description business account id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            businessAccountId?: string;
        };
        TwinBaseV2: {
            /**
             * Format: uuid
             * @description id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            id?: string;
            /**
             * @description externalId
             * @example 934599502DFFAE
             */
            externalId?: string;
            /**
             * Format: uuid
             * @description headTwinId
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            headTwinId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * @description name
             * @example Oak
             */
            name?: string;
            /**
             * @description description
             * @example The biggest tree
             */
            description?: string;
            /**
             * Format: uuid
             * @description statusId
             */
            statusId?: string;
            /**
             * Format: uuid
             * @description class
             */
            twinClassId?: string;
            /**
             * Format: uuid
             * @description current assigner
             */
            assignerUserId?: string;
            /**
             * Format: uuid
             * @description author
             */
            authorUserId?: string;
            /**
             * Format: uuid
             * @description owner business account id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            ownerBusinessAccountId?: string;
            /**
             * Format: uuid
             * @description owner user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            ownerUserId?: string;
            /** @description status */
            status?: components["schemas"]["TwinStatusV1"];
            /** @description class */
            twinClass?: components["schemas"]["TwinClassV1"];
            /** @description current assigner */
            assignerUser?: components["schemas"]["UserV1"];
            /** @description author */
            authorUser?: components["schemas"]["UserV1"];
            /** @description headTwin */
            headTwin?: components["schemas"]["TwinBaseV2"];
            /** @description aliases */
            aliases?: string[];
        };
        TwinClassFieldDescriptorAttachmentV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * Format: int32
             * @description Min count of files to upload
             * @example 1
             */
            minCount?: number;
            /**
             * Format: int32
             * @description Max count of files to upload
             * @example 1
             */
            maxCount?: number;
            /**
             * @description Allowed extensions
             * @example [
             *       "jpg",
             *       "jpeg",
             *       "png"
             *     ]
             */
            extensions?: string;
            /**
             * @description Filename must match this regexp
             * @example .*
             */
            filenameRegExp?: string;
            /**
             * Format: int32
             * @description Filesize limit(per file)
             * @example 8
             */
            fileSizeMbLimit?: number;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "attachmentFieldV1";
        };
        TwinClassFieldDescriptorColorHexV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "colorHexV1";
        };
        /** @description One of values */
        TwinClassFieldDescriptorDTO: {
            fieldType: string;
        };
        TwinClassFieldDescriptorDateScrollV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /** @description Date pattern (default: yyyy-MM-ddTHH:mm:ss) */
            pattern?: string;
            /**
             * Format: date-time
             * @description [option] Acceptable minimum date value
             */
            beforeDate?: string;
            /**
             * Format: date-time
             * @description [option] Acceptable maximum date value
             */
            afterDate?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "dateScrollV1";
        };
        TwinClassFieldDescriptorI18nV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "i18nV1";
        };
        TwinClassFieldDescriptorImmutableV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "immutableV1";
        };
        TwinClassFieldDescriptorLinkLongV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * @description Multiple choice support
             * @example true
             */
            multiple?: boolean;
            /**
             * Format: uuid
             * @description Link id for grabbing valid dst twins
             */
            linkId?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "selectLinkLongV1";
        };
        TwinClassFieldDescriptorLinkV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * @description Multiple choice support
             * @example true
             */
            multiple?: boolean;
            /** @description Valid options */
            dstTwins?: components["schemas"]["TwinBaseV2"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "selectLinkV1";
        };
        TwinClassFieldDescriptorListLongV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * @description Can custom option be entered
             * @example false
             */
            supportCustom?: boolean;
            /**
             * @description Multiple choice support
             * @example true
             */
            multiple?: boolean;
            /**
             * Format: uuid
             * @description Data list id for grabbing valid options
             */
            dataListId?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "selectLongV1";
        };
        TwinClassFieldDescriptorListSharedInHeadV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * @description Multiple choice support
             * @example true
             */
            multiple?: boolean;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "selectSharedInHeadV1";
        };
        TwinClassFieldDescriptorListV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * @description Can custom option be entered
             * @example false
             */
            supportCustom?: boolean;
            /**
             * @description Multiple choice support
             * @example true
             */
            multiple?: boolean;
            /** @description Valid options */
            options?: components["schemas"]["DataListOptionV1"][];
            /** @description Valid option id list */
            optionIdList?: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "selectListV1";
        };
        TwinClassFieldDescriptorNumericV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * Format: double
             * @description Min possible value
             * @example 1
             */
            min?: number;
            /**
             * Format: double
             * @description Max possible value
             * @example 10
             */
            max?: number;
            /**
             * Format: double
             * @description Step of value change
             * @example 1
             */
            step?: number;
            /**
             * @description Thousand separator. Must not be equal to decimal separator.
             * @example ,
             */
            thousandSeparator?: string;
            /**
             * @description Decimal separator. Must not be equal to thousand separator.
             * @example .
             */
            decimalSeparator?: string;
            /**
             * Format: int32
             * @description Number of decimal places.
             * @example 0
             */
            decimalPlaces?: number;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "numericFieldV1";
        };
        TwinClassFieldDescriptorSecretV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * @description Some validation regexp
             * @example .*
             */
            regExp?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "secretV1";
        };
        TwinClassFieldDescriptorTextV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * @description Some validation regexp
             * @example .*
             */
            regExp?: string;
            /**
             * @description Type of editor
             * @example PLAIN
             * @enum {string}
             */
            editorType?: "PLAIN" | "MARKDOWN_GITHUB" | "MARKDOWN_BASIC" | "HTML";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "textV1";
        };
        TwinClassFieldDescriptorUrlV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "urlV1";
        };
        TwinClassFieldDescriptorUserLongV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * @description Multiple choice support
             * @example true
             */
            multiple?: boolean;
            /**
             * Format: uuid
             * @description User filter list id for grabbing valid users
             */
            userFilterId?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "selectUserLongV1";
        };
        TwinClassFieldDescriptorUserV1: Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
            fieldType?: string;
            /**
             * @description Multiple choice support
             * @example true
             */
            multiple?: boolean;
            /** @description Valid users */
            users?: components["schemas"]["UserV1"][];
            /** @description Valid users id list */
            userIdList?: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            fieldType: "selectUserV1";
        };
        TwinClassFieldRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - twin class fields list */
            field?: components["schemas"]["TwinClassFieldV2"];
        };
        TwinClassFieldV1: {
            /**
             * Format: uuid
             * @description id
             * @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d
             */
            id?: string;
            /**
             * @description key
             * @example serialNumber
             */
            key?: string;
            /**
             * @description name
             * @example Serial number
             */
            name?: string;
            /**
             * @description required
             * @example true
             */
            required?: boolean;
            /** @description description */
            description?: string;
            /** @description field descriptor */
            descriptor?: components["schemas"]["TwinClassFieldDescriptorAttachmentV1"] | components["schemas"]["TwinClassFieldDescriptorColorHexV1"] | components["schemas"]["TwinClassFieldDescriptorDateScrollV1"] | components["schemas"]["TwinClassFieldDescriptorI18nV1"] | components["schemas"]["TwinClassFieldDescriptorImmutableV1"] | components["schemas"]["TwinClassFieldDescriptorLinkLongV1"] | components["schemas"]["TwinClassFieldDescriptorLinkV1"] | components["schemas"]["TwinClassFieldDescriptorListLongV1"] | components["schemas"]["TwinClassFieldDescriptorListSharedInHeadV1"] | components["schemas"]["TwinClassFieldDescriptorListV1"] | components["schemas"]["TwinClassFieldDescriptorNumericV1"] | components["schemas"]["TwinClassFieldDescriptorSecretV1"] | components["schemas"]["TwinClassFieldDescriptorTextV1"] | components["schemas"]["TwinClassFieldDescriptorUrlV1"] | components["schemas"]["TwinClassFieldDescriptorUserLongV1"] | components["schemas"]["TwinClassFieldDescriptorUserV1"];
            /**
             * Format: uuid
             * @description twin class id
             */
            twinClassId?: string;
            /**
             * Format: uuid
             * @description name i18n id
             */
            nameI18nId?: string;
            /**
             * Format: uuid
             * @description description i18n id
             */
            descriptionI18nId?: string;
            /**
             * Format: int32
             * @description field typer featurer id
             */
            fieldTyperFeaturerId?: number;
            /** @description field typer params */
            fieldTyperParams?: {
                [key: string]: string;
            };
            /**
             * Format: uuid
             * @description view permission id
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description edit permission id
             */
            editPermissionId?: string;
            /** @description external id */
            externalId?: string;
        };
        TwinClassFieldV2: {
            /**
             * Format: uuid
             * @description id
             * @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d
             */
            id?: string;
            /**
             * @description key
             * @example serialNumber
             */
            key?: string;
            /**
             * @description name
             * @example Serial number
             */
            name?: string;
            /**
             * @description required
             * @example true
             */
            required?: boolean;
            /** @description description */
            description?: string;
            /** @description field descriptor */
            descriptor?: components["schemas"]["TwinClassFieldDescriptorAttachmentV1"] | components["schemas"]["TwinClassFieldDescriptorColorHexV1"] | components["schemas"]["TwinClassFieldDescriptorDateScrollV1"] | components["schemas"]["TwinClassFieldDescriptorI18nV1"] | components["schemas"]["TwinClassFieldDescriptorImmutableV1"] | components["schemas"]["TwinClassFieldDescriptorLinkLongV1"] | components["schemas"]["TwinClassFieldDescriptorLinkV1"] | components["schemas"]["TwinClassFieldDescriptorListLongV1"] | components["schemas"]["TwinClassFieldDescriptorListSharedInHeadV1"] | components["schemas"]["TwinClassFieldDescriptorListV1"] | components["schemas"]["TwinClassFieldDescriptorNumericV1"] | components["schemas"]["TwinClassFieldDescriptorSecretV1"] | components["schemas"]["TwinClassFieldDescriptorTextV1"] | components["schemas"]["TwinClassFieldDescriptorUrlV1"] | components["schemas"]["TwinClassFieldDescriptorUserLongV1"] | components["schemas"]["TwinClassFieldDescriptorUserV1"];
            /**
             * Format: uuid
             * @description twin class id
             */
            twinClassId?: string;
            /**
             * Format: uuid
             * @description name i18n id
             */
            nameI18nId?: string;
            /**
             * Format: uuid
             * @description description i18n id
             */
            descriptionI18nId?: string;
            /**
             * Format: int32
             * @description field typer featurer id
             */
            fieldTyperFeaturerId?: number;
            /** @description field typer params */
            fieldTyperParams?: {
                [key: string]: string;
            };
            /**
             * Format: uuid
             * @description view permission id
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description edit permission id
             */
            editPermissionId?: string;
            /** @description external id */
            externalId?: string;
            /** @description twin class */
            twinClass?: components["schemas"]["TwinClassBaseV1"];
            /** @description view permission */
            viewPermission?: components["schemas"]["PermissionV1"];
            /** @description edit permission */
            editPermission?: components["schemas"]["PermissionV1"];
            /** @description field typer featurer */
            fieldTyperFeaturer?: components["schemas"]["FeaturerV1"];
        };
        TwinClassSchemaV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /**
             * Format: uuid
             * @description domainId
             */
            domainId?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
        };
        TwinClassV1: {
            /**
             * Format: uuid
             * @description id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            id?: string;
            /**
             * @description key
             * @example PROJECT
             */
            key?: string;
            /**
             * @description name
             * @example Project
             */
            name?: string;
            /**
             * @description description
             * @example Projects business objects
             */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * @description logo
             * @example http://twins.org/t/class/project.png
             */
            logo?: string;
            /** @description if class is abstract no twin of it can be created. Some child class must be used */
            abstractClass?: boolean;
            /**
             * Format: uuid
             * @description head class id or empty if class is not linked to any head
             * @example c2854a55-1dfe-41cd-bb36-f71eeaf16f81
             */
            headClassId?: string;
            /**
             * Format: uuid
             * @description some markers for twins. Are domain level and not editable by user
             */
            markersDataListId?: string;
            /**
             * Format: uuid
             * @description some tags for twins. Can be business account level and editable by user
             */
            tagsDataListId?: string;
            /**
             * @description twin class owner type
             * @enum {string}
             */
            ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
            /**
             * Format: uuid
             * @description extends class id or empty if class is not linked to any classes
             */
            extendsClassId?: string;
            /** @description if true, take the twinflow scheme in space */
            twinflowSchemaSpace?: boolean;
            twinClassSchemaSpace?: boolean;
            /** @description if true, take the permission scheme in space */
            permissionSchemaSpace?: boolean;
            aliasSpace?: boolean;
            /**
             * Format: int32
             * @description head hunter featurer id
             */
            headHunterFeaturerId?: number;
            /** @description head hunter featurer params */
            headHunterParams?: {
                [key: string]: string;
            };
            /**
             * Format: uuid
             * @description view permission id
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description create permission id
             */
            createPermissionId?: string;
            /**
             * Format: uuid
             * @description edit permission id
             */
            editPermissionId?: string;
            /**
             * Format: uuid
             * @description delete permission id
             */
            deletePermissionId?: string;
            /**
             * Format: uuid
             * @description uuid of name in I18n table
             */
            nameI18nId?: string;
            /**
             * Format: uuid
             * @description uuid of description in I18n table
             */
            descriptionI18nId?: string;
            /**
             * Format: uuid
             * @description twin display page pointer
             */
            pageFaceId?: string;
            /** @description assignee required */
            assigneeRequired?: boolean;
            /** @description external id */
            externalId?: string;
            /** @description Class fields list */
            fields?: components["schemas"]["TwinClassFieldV1"][];
            /** @description Class fields id list */
            fieldIds?: string[];
            /** @description List of status id. Will be filled only in lazyRelations mode is false */
            statusList?: string[];
            /** @description List of marker id. Will be filled only in lazyRelations mode is false */
            markerList?: string[];
            /** @description List of tag id. Will be filled only in lazyRelations mode is false */
            tagList?: string[];
            forwardLinkMap?: {
                [key: string]: components["schemas"]["LinkV1"];
            };
            backwardLinkMap?: {
                [key: string]: components["schemas"]["LinkV1"];
            };
            /** @description Map of statuses. Will be filled only if lazyRelations mode is true */
            statusMap?: {
                [key: string]: components["schemas"]["TwinStatusV1"];
            };
            /** @description Map of markers. Will be filled only if lazyRelations mode is true */
            markerMap?: {
                [key: string]: components["schemas"]["DataListOptionV1"];
            };
            /** @description Map of tags. Will be filled only if lazyRelations mode is true */
            tagMap?: {
                [key: string]: components["schemas"]["DataListOptionV1"];
            };
            /** @description head class */
            headClass?: components["schemas"]["TwinClassBaseV1"];
            /** @description extends class */
            extendsClass?: components["schemas"]["TwinClassBaseV1"];
            /** @description view permission */
            viewPermission?: components["schemas"]["PermissionV1"];
            /** @description create permission */
            createPermission?: components["schemas"]["PermissionV1"];
            /** @description edit permission */
            editPermission?: components["schemas"]["PermissionV1"];
            /** @description delete permission */
            deletePermission?: components["schemas"]["PermissionV1"];
            /** @description head hunter featurer */
            headHunterFeaturer?: components["schemas"]["FeaturerV1"];
        };
        TwinLinkListV1: {
            /** @description forward links from current twin to other twins */
            forwardLinks?: {
                [key: string]: components["schemas"]["TwinLinkViewV1"];
            };
            /** @description links */
            backwardLinks?: {
                [key: string]: components["schemas"]["TwinLinkViewV1"];
            };
        };
        TwinLinkViewV1: {
            /**
             * Format: uuid
             * @description Link id
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            linkId?: string;
            /**
             * Format: uuid
             * @description Destination twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            dstTwinId?: string;
            /**
             * Format: uuid
             * @description id
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            id?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUser
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            createdByUserId?: string;
            /** @description createdByUser */
            createdByUser?: components["schemas"]["UserV1"];
            /** @description Link */
            link?: components["schemas"]["LinkV1"];
            /** @description Destination twin */
            dstTwin?: components["schemas"]["TwinBaseV2"];
        };
        TwinTransitionViewV1: {
            /**
             * Format: uuid
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            id?: string;
            /**
             * Format: uuid
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            dstTwinStatusId?: string;
            /** @description status */
            dstTwinStatus?: components["schemas"]["TwinStatusV1"];
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * @description alias
             * @example start
             */
            alias?: string;
            /**
             * @description transition type
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             * @enum {string}
             */
            type?: "STATUS_CHANGE" | "OPERATION";
            allowComment?: boolean;
            allowAttachments?: boolean;
            allowLinks?: boolean;
        };
        TwinV2: {
            /**
             * Format: uuid
             * @description id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            id?: string;
            /**
             * @description externalId
             * @example 934599502DFFAE
             */
            externalId?: string;
            /**
             * Format: uuid
             * @description headTwinId
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            headTwinId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * @description name
             * @example Oak
             */
            name?: string;
            /**
             * @description description
             * @example The biggest tree
             */
            description?: string;
            /**
             * Format: uuid
             * @description statusId
             */
            statusId?: string;
            /**
             * Format: uuid
             * @description class
             */
            twinClassId?: string;
            /**
             * Format: uuid
             * @description current assigner
             */
            assignerUserId?: string;
            /**
             * Format: uuid
             * @description author
             */
            authorUserId?: string;
            /**
             * Format: uuid
             * @description owner business account id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            ownerBusinessAccountId?: string;
            /**
             * Format: uuid
             * @description owner user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            ownerUserId?: string;
            /** @description status */
            status?: components["schemas"]["TwinStatusV1"];
            /** @description class */
            twinClass?: components["schemas"]["TwinClassV1"];
            /** @description current assigner */
            assignerUser?: components["schemas"]["UserV1"];
            /** @description author */
            authorUser?: components["schemas"]["UserV1"];
            /** @description headTwin */
            headTwin?: components["schemas"]["TwinBaseV2"];
            /** @description aliases */
            aliases?: string[];
            /** @description Attachments */
            attachments?: components["schemas"]["AttachmentV1"][];
            /** @description Attachments count */
            attachmentsCount?: components["schemas"]["AttachmentsCountV1"];
            /** @description Links */
            links?: components["schemas"]["TwinLinkListV1"];
            /** @description TransitionId list. Will be filled only in lazyRelations mode is false */
            transitionsIdList?: string[];
            /** @description Transition list. Will be filled only if lazyRelations mode is true */
            transitions?: components["schemas"]["TwinTransitionViewV1"][];
            /** @description MarkerId list. Will be filled only in lazyRelations mode is false */
            markerIdList?: string[];
            /** @description Marker list. Will be filled only if lazyRelations mode is true */
            markers?: components["schemas"]["DataListOptionV1"][];
            /** @description TagId list. Will be filled only in lazyRelations mode is false */
            tagIdList?: string[];
            /** @description Tag list. Will be filled only if lazyRelations mode is true */
            tags?: components["schemas"]["DataListOptionV1"][];
            /** @description Suitable actions list */
            actions?: ("EDIT" | "DELETE" | "MOVE" | "COMMENT" | "WATCH" | "TIME_TRACK" | "ATTACHMENT_ADD" | "HISTORY_VIEW")[];
            /** @description Twins of which classes are possible to create as children for given twin */
            creatableChildTwinClassIds?: string[];
            /** @description Twins of which classes are possible to create as children for given twin */
            creatableChildTwinClasses?: components["schemas"]["TwinClassV1"][];
            /** @description fields */
            fields?: {
                [key: string]: string;
            };
        };
        TwinflowTransitionBaseV1: {
            /**
             * Format: uuid
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            id?: string;
            /**
             * Format: uuid
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            dstTwinStatusId?: string;
            /** @description status */
            dstTwinStatus?: components["schemas"]["TwinStatusV1"];
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * @description alias
             * @example start
             */
            alias?: string;
            /**
             * @description transition type
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             * @enum {string}
             */
            type?: "STATUS_CHANGE" | "OPERATION";
            allowComment?: boolean;
            allowAttachments?: boolean;
            allowLinks?: boolean;
        };
        UserGroupV1: {
            /**
             * Format: uuid
             * @description id
             * @example e155e05b-f353-49ff-9869-da1e62aab1793
             */
            id?: string;
            /**
             * Format: uuid
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            businessAccountId?: string;
            /**
             * @description name
             * @example Manager
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * @description type
             * @example domainScopeDomainManage
             * @enum {string}
             */
            type?: "domainScopeDomainManage" | "domainScopeBusinessAccountManage" | "businessAccountScopeBusinessAccountManage" | "domainAndBusinessAccountScopeBusinessAccountManage" | "systemScopeDomainManage";
        };
        UserV1: {
            /**
             * Format: uuid
             * @description id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            id?: string;
            /**
             * @description fullName
             * @example John Doe
             */
            fullName?: string;
            /**
             * @description email
             * @example some@email.com
             */
            email?: string;
            /**
             * @description avatar url
             * @example http://twins.org/a/avatar/carkikrefmkawfwfwg.png
             */
            avatar?: string;
            /** @description an ids of user groups */
            userGroupIds?: string[];
        };
        TwinClassFieldUpdateRqV2: {
            /** @description twin class field list */
            twinClassFields?: components["schemas"]["TwinClassFieldUpdateV1"][];
        };
        TwinClassFieldUpdateV1: {
            /**
             * @description unique key within the class
             * @example serialNumber
             */
            key?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to view this field
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to edit this field
             */
            editPermissionId?: string;
            /** @description I18n name */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description I18n description */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description Required field
             * @example true
             */
            required?: boolean;
            /** @description external id */
            externalId?: string;
            /**
             * Format: int32
             * @description Field typer featurer ID
             * @example 1
             */
            fieldTyperFeaturerId?: number;
            /**
             * @description Field typer parameters
             * @example {}
             */
            fieldTyperParams?: {
                [key: string]: string;
            };
            /**
             * Format: uuid
             * @description twin class field id
             * @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d
             */
            twinClassFieldId?: string;
            /**
             * Format: uuid
             * @description twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
        };
        BasicUpdateOperationDTOv1: {
            /**
             * Format: uuid
             * @description new id. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            newId?: string;
            /**
             * @description what should be done with old values, if no replacement was given
             * @enum {string}
             */
            onUnreplacedStrategy?: "delete" | "restrict";
            /** @description map [old_id -> new_id] */
            replaceMap?: {
                [key: string]: string;
            };
        };
        TwinClassUpdateRqV1: {
            /**
             * @description unique key within the domain
             * @example TOOL
             */
            key?: string;
            /**
             * @description name
             * @example Tool
             */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description [optional] description
             * @example Professional tool class
             */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * Format: int32
             * @description [optional] an id of head hunter featurer. The field has a sense only if headTwinClassId filled
             */
            headHunterFeaturerId?: number;
            /** @description [optional] head hunter featurer params */
            headHunterParams?: {
                [key: string]: string;
            };
            /**
             * @description [optional] if true, then not twin of given class can be created. Abstract classes must be extended
             * @example false
             */
            abstractClass?: boolean;
            /**
             * @description [optional] url for class UI logo
             * @example https://twins.org/img/twin_class_default.png
             */
            logo?: string;
            /**
             * @description [optional] if true then twins of current class can have own permission_schema and this schema will cover children twins
             * @example false
             */
            permissionSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class can have own twinflow_schema and this schema will cover children twins
             * @example false
             */
            twinflowSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class can have own twin_class_schema and this schema will cover children twins
             * @example false
             */
            twinClassSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class must have own alias key and this key will be used to generate alias for children twins
             * @example false
             */
            aliasSpace?: boolean;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to view twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to create twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            createPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to edit twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            editPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to delete twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            deletePermissionId?: string;
            /**
             * @description [optional] owner typ of class
             * @enum {string}
             */
            ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
            /** @description [optional] is assignee required */
            assigneeRequired?: boolean;
            /** @description [optional] external id */
            externalId?: string;
            /** @description [optional] should be filled on change marker data list id */
            markerDataListUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
            /** @description [optional] should be filled on change tag data list id */
            tagDataListUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
            /** @description [optional] should be filled on change extends twins class id */
            extendsTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
            /** @description [optional] should be filled on change extends twins class id */
            headTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
        };
        TwinClassRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - twin class */
            twinClass?: components["schemas"]["TwinClassV1"];
        };
        TwinClassUpdateRqV2: {
            /** @description twin classes list for update */
            twinClassUpdates?: components["schemas"]["TwinClassUpdateV1"][];
        };
        TwinClassUpdateV1: {
            /**
             * @description unique key within the domain
             * @example TOOL
             */
            key?: string;
            /**
             * @description name
             * @example Tool
             */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description [optional] description
             * @example Professional tool class
             */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * Format: int32
             * @description [optional] an id of head hunter featurer. The field has a sense only if headTwinClassId filled
             */
            headHunterFeaturerId?: number;
            /** @description [optional] head hunter featurer params */
            headHunterParams?: {
                [key: string]: string;
            };
            /**
             * @description [optional] if true, then not twin of given class can be created. Abstract classes must be extended
             * @example false
             */
            abstractClass?: boolean;
            /**
             * @description [optional] url for class UI logo
             * @example https://twins.org/img/twin_class_default.png
             */
            logo?: string;
            /**
             * @description [optional] if true then twins of current class can have own permission_schema and this schema will cover children twins
             * @example false
             */
            permissionSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class can have own twinflow_schema and this schema will cover children twins
             * @example false
             */
            twinflowSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class can have own twin_class_schema and this schema will cover children twins
             * @example false
             */
            twinClassSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class must have own alias key and this key will be used to generate alias for children twins
             * @example false
             */
            aliasSpace?: boolean;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to view twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to create twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            createPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to edit twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            editPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to delete twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            deletePermissionId?: string;
            /**
             * @description [optional] owner typ of class
             * @enum {string}
             */
            ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
            /** @description [optional] is assignee required */
            assigneeRequired?: boolean;
            /** @description [optional] external id */
            externalId?: string;
            /** @description [optional] should be filled on change marker data list id */
            markerDataListUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
            /** @description [optional] should be filled on change tag data list id */
            tagDataListUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
            /** @description [optional] should be filled on change extends twins class id */
            extendsTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
            /** @description [optional] should be filled on change extends twins class id */
            headTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
            /**
             * Format: uuid
             * @description twin class id
             */
            twinClassId?: string;
        };
        AttachmentCreateV1: {
            /**
             * Format: uuid
             * @description twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            twinId?: string;
            /**
             * @description External storage link
             * @example https://test.filestorage.by/JFUjEFWksfqwf
             */
            storageLink?: string;
            /**
             * @description External storage links map by key
             * @example {
             *       "origin": "https://test.filestorage.by/JFUjEFWksfqwf"
             *     }
             */
            modifications?: {
                [key: string]: string;
            };
            /**
             * @description External id
             * @example JD999weqw9f
             */
            externalId?: string;
            /**
             * @description Title
             * @example cert.pdf
             */
            title?: string;
            /**
             * @description Description
             * @example cert.pdf
             */
            description?: string;
            /**
             * Format: int64
             * @description File size in bytes
             * @example 123456
             */
            size?: number;
            /**
             * Format: uuid
             * @description link to the field to which attachment was added (if any)
             */
            twinClassFieldId?: string;
            /**
             * Format: uuid
             * @description link to the comment to which attachment was added (if any)
             */
            commentId?: string;
        };
        AttachmentCudV1: {
            /** @description Attachments for adding */
            create?: components["schemas"]["AttachmentCreateV1"][];
            /** @description Attachments for updating */
            update?: components["schemas"]["AttachmentUpdateV1"][];
            /** @description Attachments id list for deleting */
            delete?: string[];
        };
        AttachmentUpdateV1: {
            /**
             * Format: uuid
             * @description twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            twinId?: string;
            /**
             * @description External storage link
             * @example https://test.filestorage.by/JFUjEFWksfqwf
             */
            storageLink?: string;
            /**
             * @description External storage links map by key
             * @example {
             *       "origin": "https://test.filestorage.by/JFUjEFWksfqwf"
             *     }
             */
            modifications?: {
                [key: string]: string;
            };
            /**
             * @description External id
             * @example JD999weqw9f
             */
            externalId?: string;
            /**
             * @description Title
             * @example cert.pdf
             */
            title?: string;
            /**
             * @description Description
             * @example cert.pdf
             */
            description?: string;
            /**
             * Format: int64
             * @description File size in bytes
             * @example 123456
             */
            size?: number;
            /**
             * Format: uuid
             * @description id
             * @example 553ef9bc-3b48-430d-90d3-bdee516c3d87
             */
            id?: string;
        };
        TwinLinkAddV1: {
            /**
             * Format: uuid
             * @description Link id
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            linkId?: string;
            /**
             * Format: uuid
             * @description Destination twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            dstTwinId?: string;
        };
        TwinLinkUpdateV1: {
            /**
             * Format: uuid
             * @description id
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            id?: string;
            /**
             * Format: uuid
             * @description Destination twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            dstTwinId?: string;
        };
        TwinTagManageV1: {
            /**
             * @description add already existing tags by their ids
             * @example [
             *       "11a4c3f8-c780-4421-9aee-9e7eec20c67d",
             *       "83050c4b-ef17-4d7d-8792-6e5a86557ab9"
             *     ]
             */
            existingTags?: string[];
            /**
             * @description add new tags by name (in current locale). If tag with given name is already exist, it will be used
             * @example [
             *       "String 1",
             *       "String 2"
             *     ]
             */
            newTags?: string[];
            /**
             * @description delete already existing tags by their ids
             * @example cf8b1aec-c07c-4131-b834-8024462cfc93
             */
            deleteTags?: string[];
        };
        TwinUpdateRqV1: {
            /**
             * Format: uuid
             * @description Head twin id, if selected class had to be linked to some head twin
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            headTwinId?: string;
            /**
             * @description name
             * @example Oak
             */
            name?: string;
            /**
             * Format: uuid
             * @description assigner user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            assignerUserId?: string;
            /** @description external id */
            externalId?: string;
            /**
             * @description description
             * @example The biggest tree
             */
            description?: string;
            /** @description fields */
            fields?: {
                [key: string]: string;
            };
            /** @description Attachments add/update/delete operations */
            attachments?: components["schemas"]["AttachmentCudV1"];
            /** @description TwinLinks for adding */
            twinLinksAdd?: components["schemas"]["TwinLinkAddV1"][];
            /** @description TwinLinks id list for deleting */
            twinLinksDelete?: string[];
            /** @description TwinLinks for updating */
            twinLinksUpdate?: components["schemas"]["TwinLinkUpdateV1"][];
            /** @description TwinTags for updating */
            tagsUpdate?: components["schemas"]["TwinTagManageV1"];
            comment?: string;
        };
        TwinRsV2: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description twin */
            twin?: components["schemas"]["TwinV2"];
        };
        TwinBaseV1: {
            /**
             * Format: uuid
             * @description id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            id?: string;
            /**
             * @description externalId
             * @example 934599502DFFAE
             */
            externalId?: string;
            /**
             * Format: uuid
             * @description headTwinId
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            headTwinId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * @description name
             * @example Oak
             */
            name?: string;
            /**
             * @description description
             * @example The biggest tree
             */
            description?: string;
            /**
             * Format: uuid
             * @description statusId
             */
            statusId?: string;
            /**
             * Format: uuid
             * @description class
             */
            twinClassId?: string;
            /**
             * Format: uuid
             * @description current assigner
             */
            assignerUserId?: string;
            /**
             * Format: uuid
             * @description author
             */
            authorUserId?: string;
            /**
             * Format: uuid
             * @description owner business account id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            ownerBusinessAccountId?: string;
            /**
             * Format: uuid
             * @description owner user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            ownerUserId?: string;
        };
        TwinTouchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description twin touch */
            twinTouch?: components["schemas"]["TwinTouchV1"];
        };
        TwinTouchV1: {
            /**
             * Format: uuid
             * @description id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            id?: string;
            /**
             * Format: uuid
             * @description twinId
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            twinId?: string;
            /**
             * @description touchId
             * @example WATCHED
             * @enum {string}
             */
            touchId?: "WATCHED" | "STARRED" | "REVIEWED";
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /** @description twin */
            twin?: components["schemas"]["TwinBaseV1"];
        };
        TierUpdateRqV1: {
            /** @description tier update */
            tier?: components["schemas"]["TierUpdateV1"];
        };
        TierUpdateV1: {
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description custom
             * @example true
             */
            custom?: boolean;
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description twinflow schema id
             * @example 2c618b09-e8dc-4712-a433-2e18915ee70d
             */
            twinflowSchemaId?: string;
            /**
             * Format: uuid
             * @description twinclass schema id
             * @example 8b9ea6ad-2b9b-4a4a-8ea9-1b17da4d603b
             */
            twinClassSchemaId?: string;
            /**
             * Format: int32
             * @description attachments storage quota count
             * @example 3
             */
            attachmentsStorageQuotaCount?: number;
            /**
             * Format: int64
             * @description attachments storage quota size
             * @example 3
             */
            attachmentsStorageQuotaSize?: number;
            /**
             * Format: int32
             * @description user count quota
             * @example 3
             */
            userCountQuota?: number;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
        };
        DataListOptionRsV3: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description data lists option */
            option?: components["schemas"]["DataListOptionV3"];
        };
        DataListOptionV3: {
            /**
             * Format: uuid
             * @description id
             * @example 7de977d4-df6d-4250-9cb2-088363d139a1
             */
            id?: string;
            /**
             * @description name
             * @example Bharat
             */
            name?: string;
            /**
             * @description icon
             * @example Icon path
             */
            icon?: string;
            /**
             * @description status
             * @example active
             * @enum {string}
             */
            status?: "active" | "disabled" | "hidden";
            /** @description map attributes (key : value) */
            attributes?: {
                [key: string]: string;
            };
            /**
             * @description background color
             * @example #ff00ff
             */
            backgroundColor?: string;
            /**
             * @description font color
             * @example #ff00ff
             */
            fontColor?: string;
            /**
             * Format: uuid
             * @description id
             * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
             */
            dataListId?: string;
            /**
             * Format: uuid
             * @description business account id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            businessAccountId?: string;
            /** @description data list */
            dataList?: components["schemas"]["DataListV1"];
            /** @description business account */
            businessAccount?: components["schemas"]["BusinessAccountV1"];
        };
        PermissionGrantUserGroupUpdateRqV1: {
            /** @description permission grant user group */
            permissionGrantUserGroup?: components["schemas"]["PermissionGrantUserGroupUpdateV1"];
        };
        PermissionGrantUserGroupUpdateV1: {
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description user group id
             * @example e155e05b-f353-49ff-9869-da1e62aab1793
             */
            userGroupId?: string;
        };
        PermissionGrantUserGroupSaveRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            permissionGrantUserGroup?: components["schemas"]["PermissionGrantUserGroupV2"];
        };
        PermissionGrantUserGroupV2: {
            /**
             * Format: uuid
             * @description id
             * @example 12fd2df0-cae7-455f-a721-eaec415105a4
             */
            id?: string;
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description user group id
             * @example e155e05b-f353-49ff-9869-da1e62aab1793
             */
            userGroupId?: string;
            /**
             * Format: uuid
             * @description granted by user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            grantedByUserId?: string;
            /**
             * Format: date-time
             * @description granted at
             * @example 2023-09-13T09:32:08
             */
            grantedAt?: string;
            /** @description permission schema */
            permissionSchema?: components["schemas"]["PermissionSchemaV1"];
            /** @description permission */
            permission?: components["schemas"]["PermissionV2"];
            /** @description user group */
            userGroup?: components["schemas"]["UserGroupV1"];
            /** @description granted by user */
            grantedByUser?: components["schemas"]["UserV1"];
        };
        PermissionSchemaV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /**
             * Format: uuid
             * @description domainId
             */
            domainId?: string;
            /**
             * Format: uuid
             * @description businessAccountId
             */
            businessAccountId?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
        };
        PermissionV2: {
            /**
             * Format: uuid
             * @description id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            id?: string;
            /** @description key */
            key?: string;
            /**
             * @description name
             * @example Manager
             */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: uuid
             * @description group id
             * @example 7efd9df0-cae7-455f-a721-eaec455105a4
             */
            groupId?: string;
            /** @description group */
            group?: components["schemas"]["PermissionGroupV1"];
        };
        PermissionGrantUserUpdateRqV1: {
            /** @description permission grant user */
            permissionGrantUser?: components["schemas"]["PermissionGrantUserUpdateV1"];
        };
        PermissionGrantUserUpdateV1: {
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description business account id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            businessAccountId?: string;
            /**
             * Format: uuid
             * @description user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            userId?: string;
        };
        PermissionGrantUserSaveRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description permission grant user */
            permissionGrantUser?: components["schemas"]["PermissionGrantUserV2"];
        };
        PermissionGrantUserV2: {
            /**
             * Format: uuid
             * @description id
             * @example 9e8641f2-dda1-4a43-9a23-8786124cdb6b
             */
            id?: string;
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            userId?: string;
            /**
             * Format: uuid
             * @description granted by user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            grantedByUserId?: string;
            /**
             * Format: date-time
             * @description granted at
             * @example 2023-09-13T09:32:08
             */
            grantedAt?: string;
            /** @description permission */
            permission?: components["schemas"]["PermissionV2"];
            /** @description permission schema */
            permissionSchema?: components["schemas"]["PermissionSchemaV1"];
            /** @description user */
            user?: components["schemas"]["UserV1"];
            /** @description granted by user */
            grantedByUser?: components["schemas"]["UserV1"];
        };
        PermissionGrantTwinRoleUpdateRqV1: {
            /** @description permission grant twin role create */
            permissionGrantTwinRole?: components["schemas"]["PermissionGrantTwinRoleUpdateV1"];
        };
        PermissionGrantTwinRoleUpdateV1: {
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /**
             * @description twin role
             * @example assignee
             * @enum {string}
             */
            twinRole?: "assignee" | "creator" | "watcher" | "space_assignee" | "space_creator";
        };
        PermissionGrantTwinRoleRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results -  permission grant twin role */
            permissionGrantTwinRole?: components["schemas"]["PermissionGrantTwinRoleV1"];
        };
        PermissionGrantTwinRoleV1: {
            /**
             * Format: uuid
             * @description id
             * @example 22fd2df0-cae7-455f-a721-eaec415105a4
             */
            id?: string;
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /**
             * Format: uuid
             * @description granted by user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            grantedByUserId?: string;
            /**
             * @description twin role
             * @enum {string}
             */
            twinRole?: "assignee" | "creator" | "watcher" | "space_assignee" | "space_creator";
            /**
             * Format: date-time
             * @description granted at
             * @example 2023-09-13T09:32:08
             */
            grantedAt?: string;
            /** @description permission */
            permission?: components["schemas"]["PermissionV1"];
            /** @description permission schema */
            permissionSchema?: components["schemas"]["PermissionSchemaV1"];
            /** @description twin class */
            twinClass?: components["schemas"]["TwinClassV1"];
            /** @description granted by user */
            grantedByUser?: components["schemas"]["UserV1"];
        };
        PermissionGrantSpaceRoleUpdateRqV1: {
            /** @description permission grant space role create */
            permissionGrantSpaceRole?: components["schemas"]["PermissionGrantSpaceRoleUpdateV1"];
        };
        PermissionGrantSpaceRoleUpdateV1: {
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description space role id
             * @example d74c3adc-c83c-4b55-92ca-cf570598296a
             */
            spaceRoleId?: string;
        };
        PermissionGrantSpaceRoleRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - permission grant space role */
            permissionGrantSpaceRole?: components["schemas"]["PermissionGrantSpaceRoleV2"];
        };
        PermissionGrantSpaceRoleV2: {
            /**
             * Format: uuid
             * @description id
             * @example 9e8641f2-dda1-4a43-9a23-8786124cdb6b
             */
            id?: string;
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description space role id
             * @example creator
             */
            spaceRoleId?: string;
            /**
             * Format: uuid
             * @description granted by user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            grantedByUserId?: string;
            /**
             * Format: date-time
             * @description granted at
             * @example 2023-09-13T09:32:08
             */
            grantedAt?: string;
            /** @description permission schema */
            permissionSchema?: components["schemas"]["PermissionSchemaV1"];
            /** @description permission */
            permission?: components["schemas"]["PermissionV1"];
            /** @description space role */
            spaceRole?: components["schemas"]["SpaceRoleV2"];
            /** @description granted by user */
            grantedByUser?: components["schemas"]["UserV1"];
        };
        SpaceRoleV2: {
            /**
             * Format: uuid
             * @description space role user id
             * @example 275bf3c4-951a-4d26-bb82-5e18361d301c
             */
            id?: string;
            /**
             * @description key
             * @example Member
             */
            key?: string;
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: uuid
             * @description twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /**
             * Format: uuid
             * @description business account id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            businessAccountId?: string;
            /** @description twin class */
            twinClass?: components["schemas"]["TwinClassV1"];
            /** @description business account */
            businessAccount?: components["schemas"]["BusinessAccountV1"];
        };
        PermissionGrantAssigneePropagationUpdateRqV1: {
            /** @description permission grant assignee propagation update */
            permissionGrantAssigneePropagation?: components["schemas"]["PermissionGrantAssigneePropagationUpdateV1"];
        };
        PermissionGrantAssigneePropagationUpdateV1: {
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description propagation by twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            propagationByTwinClassId?: string;
            /**
             * Format: uuid
             * @description propagation by twin status id
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            propagationByTwinStatusId?: string;
            /**
             * @description is space only
             * @example true
             */
            inSpaceOnly?: boolean;
        };
        PermissionGrantAssigneePropagationRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results -  permission grant assignee propagation */
            permissionGrantAssigneePropagation?: components["schemas"]["PermissionGrantAssigneePropagationV2"];
        };
        PermissionGrantAssigneePropagationV2: {
            /**
             * Format: uuid
             * @description id
             * @example 9e8641f2-dda1-4a43-9a23-8786124cdb6b
             */
            id?: string;
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description propagation twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            propagationTwinClassId?: string;
            /**
             * Format: uuid
             * @description twin status id
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            propagationTwinStatusId?: string;
            /**
             * Format: uuid
             * @description granted by user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            grantedByUserId?: string;
            /**
             * Format: date-time
             * @description granted at
             * @example 2023-09-13T09:32:08
             */
            grantedAt?: string;
            /** @description permission schema */
            permissionSchema?: components["schemas"]["PermissionSchemaV1"];
            /** @description permission */
            permission?: components["schemas"]["PermissionV1"];
            /** @description propagation twin class */
            propagationTwinClass?: components["schemas"]["TwinClassV1"];
            /** @description propagation twin status */
            propagationTwinStatus?: components["schemas"]["TwinStatusV1"];
            /** @description granted by user */
            grantedByUser?: components["schemas"]["UserV1"];
        };
        LinkUpdateV1: {
            /** @description Forward name i18n (if target twin-class as src) */
            forwardNameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description Backward name i18n (if target twin-class as dst) */
            backwardNameI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description Link type (Many-to-one, Many-to-many, One-to-one)
             * @enum {string}
             */
            type?: "ManyToOne" | "ManyToMany" | "OneToOne";
            /**
             * @description Link strength (MANDATORY, OPTIONAL, OPTIONAL_BUT_DELETE_CASCADE)
             * @enum {string}
             */
            linkStrength?: "MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE";
            /**
             * Format: int32
             * @description [optional] an id of linker featurer
             */
            linkerFeaturerId?: number;
            /** @description [optional] linker featurer params */
            linkerParams?: {
                [key: string]: string;
            };
            /** @description [optional] should be filled on change source twin class id of link */
            srcTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
            /** @description [optional] should be filled on change destination twin class id of link */
            dstTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
        };
        LinkUpdateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description link */
            link?: components["schemas"]["LinkV3"];
        };
        LinkV3: {
            /**
             * Format: uuid
             * @description id
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            id?: string;
            /**
             * Format: uuid
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            dstTwinClassId?: string;
            /**
             * @description key
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            dstTwinClass?: components["schemas"]["TwinClassV1"];
            /**
             * @description name
             * @example Serial number
             */
            name?: string;
            /**
             * @description Ling strength id
             * @example OPTIONAL
             * @enum {string}
             */
            linkStrengthId?: "MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE";
            /**
             * @description link type
             * @example ManyToOne
             * @enum {string}
             */
            type?: "ManyToOne" | "ManyToMany" | "OneToOne";
            /**
             * Format: uuid
             * @description Source twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            srcTwinClassId?: string;
            /**
             * @description Backward name
             * @example dst -> src
             */
            backwardName?: string;
            /**
             * Format: uuid
             * @description Creator user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            createdByUserId?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt?: string;
            /** @description Source twin class */
            srcTwinClass?: components["schemas"]["TwinClassBaseV1"];
            /** @description Created by user */
            createdByUser?: components["schemas"]["UserV1"];
        };
        I18nTranslationUpdateV1: {
            /**
             * @description locale
             * @example en
             */
            locale?: string;
            /**
             * @description translation
             * @example translation
             */
            translation?: string;
            /** Format: uuid */
            "i18n id"?: string;
        };
        I18nUpdateRqV1: {
            /** @description i18n translations update */
            translations?: components["schemas"]["I18nTranslationUpdateV1"][];
        };
        I18nTranslationListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description result - i18n */
            translation?: components["schemas"]["I18nTranslationV1"][];
        };
        I18nTranslationV1: {
            /**
             * Format: uuid
             * @description i18n id
             * @example 633c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            i18nId?: string;
            /**
             * @description locale
             * @example en
             */
            locale?: string;
            /**
             * @description translation
             * @example translation
             */
            translation?: string;
        };
        PaginationV1: {
            /**
             * Format: int32
             * @description record number from which data sampling begins
             * @example 25
             */
            offset?: number;
            /**
             * Format: int32
             * @description number of records in the query result
             * @example 10
             */
            limit?: number;
            /**
             * Format: int64
             * @description total results count
             * @example 100
             */
            total?: number;
        };
        FactoryPipelineUpdateRqV1: {
            /** @description factory pipeline update */
            factoryPipeline?: components["schemas"]["FactoryPipelineUpdateV1"];
        };
        FactoryPipelineUpdateV1: {
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description is active
             * @example true
             */
            active?: boolean;
            /**
             * Format: uuid
             * @description output status id
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            outputStatusId?: string;
            /**
             * Format: uuid
             * @description next factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            nextFactoryId?: string;
            /**
             * Format: uuid
             * @description template twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            templateTwinId?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
        };
        FactoryConditionSetV1: {
            /**
             * Format: uuid
             * @description id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            id?: string;
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: uuid
             * @description created by user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            createdByUserId?: string;
            /**
             * Format: date-time
             * @description updated at
             * @example 2023-09-13T09:32:08
             */
            updatedAt?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: int32
             * @description count in factory pipeline usages
             * @example 3
             */
            inFactoryPipelineUsagesCount?: number;
            /**
             * Format: int32
             * @description count in factory pipeline step usages
             * @example 3
             */
            inFactoryPipelineStepUsagesCount?: number;
            /**
             * Format: int32
             * @description count in factory multiplier filter usages
             * @example 3
             */
            inFactoryMultiplierFilterUsagesCount?: number;
            /**
             * Format: int32
             * @description count in factory branch usages
             * @example 3
             */
            inFactoryBranchUsagesCount?: number;
            /**
             * Format: int32
             * @description count in factory eraser usages
             * @example 3
             */
            inFactoryEraserUsagesCount?: number;
        };
        FactoryPipelineRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - factory pipeline */
            factoryPipeline?: components["schemas"]["FactoryPipelineV2"];
        };
        FactoryPipelineV2: {
            /**
             * Format: uuid
             * @description id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            id?: string;
            /**
             * Format: uuid
             * @description factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryId?: string;
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: uuid
             * @description factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description is active
             * @example true
             */
            active?: boolean;
            /**
             * Format: uuid
             * @description output twin status id
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            outputTwinStatusId?: string;
            /**
             * Format: uuid
             * @description next factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            nextFactoryId?: string;
            /**
             * @description next factory limit scope
             * @example true
             */
            nextFactoryLimitScope?: boolean;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: int32
             * @description count pipeline steps
             * @example 3
             */
            pipelineStepsCount?: number;
            /** @description factory */
            factory?: components["schemas"]["FactoryV1"];
            /** @description input twin class */
            inputTwinClass?: components["schemas"]["TwinClassBaseV1"];
            /** @description factory condition set */
            factoryConditionSet?: components["schemas"]["FactoryConditionSetV1"];
            /** @description output twin status */
            outputTwinStatus?: components["schemas"]["TwinStatusV1"];
            /** @description next factory */
            nextFactory?: components["schemas"]["FactoryV1"];
        };
        FactoryMultiplierUpdateRqV1: {
            /** @description factory multiplier update */
            factoryMultiplier?: components["schemas"]["FactoryMultiplierUpdateV1"];
        };
        FactoryMultiplierUpdateV1: {
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: int32
             * @description multiplier featurer id
             * @example 1000
             */
            multiplierFeaturerId?: number;
            /**
             * @description multiplier params
             * @example {
             *       "outputTwinClassId": "da69c441-9c8f-4e73-a07e-b5648f8f4396",
             *       "copyHead": "true"
             *     }
             */
            multiplierParams?: {
                [key: string]: string;
            };
            /**
             * @description is active
             * @example true
             */
            active?: boolean;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
        };
        FactoryMultiplierRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - factory multiplier */
            factoryMultiplier?: components["schemas"]["FactoryMultiplierV2"];
        };
        FactoryMultiplierV2: {
            /**
             * Format: uuid
             * @description id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            id?: string;
            /**
             * Format: uuid
             * @description factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryId?: string;
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: int32
             * @description count pipeline steps
             * @example 3
             */
            pipelineStepsCount?: number;
            /**
             * Format: int32
             * @description multiplier featurer id
             * @example 1000
             */
            multiplierFeaturerId?: number;
            /**
             * @description multiplier params
             * @example {
             *       "outputTwinClassId": "da69c441-9c8f-4e73-a07e-b5648f8f4396",
             *       "copyHead": "true"
             *     }
             */
            multiplierParams?: {
                [key: string]: string;
            };
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: int32
             * @description count factory multiplier filters
             * @example 3
             */
            factoryMultiplierFiltersCount?: number;
            /**
             * @description is active
             * @example 3
             */
            active?: boolean;
            /** @description factory */
            factory?: components["schemas"]["FactoryV1"];
            /** @description input twin class */
            inputTwinClass?: components["schemas"]["TwinClassBaseV1"];
            /** @description multiplier featurer */
            multiplierFeaturer?: components["schemas"]["FeaturerV1"];
        };
        FactoryBranchUpdateRqv1: {
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description factory condition set invert
             * @example true
             */
            active?: boolean;
            /**
             * Format: uuid
             * @description next factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            nextFactoryId?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
        };
        FactoryBranchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - factory branch */
            factoryBranch?: components["schemas"]["FactoryBranchV2"];
        };
        FactoryBranchV2: {
            /**
             * Format: uuid
             * @description id
             * @example 99956a15-6858-40ba-b0aa-b123c54e250d
             */
            id?: string;
            /**
             * Format: uuid
             * @description factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryId?: string;
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description active
             * @example true
             */
            active?: boolean;
            /**
             * Format: uuid
             * @description next factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            nextFactoryId?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /** @description factory */
            factory?: components["schemas"]["FactoryV1"];
            /** @description factory condition set */
            factoryConditionSet?: components["schemas"]["FactoryConditionSetV1"];
            /** @description nex factory */
            nextFactory?: components["schemas"]["FactoryV1"];
        };
        FactoryUpdateRqV1: {
            /**
             * @description key
             * @example taskReassign
             */
            key?: string;
            /** @description name i18n */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description description i18n */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
        };
        FactoryRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - factory */
            factory?: components["schemas"]["FactoryV2"];
        };
        FactoryV2: {
            /**
             * Format: uuid
             * @description id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            id?: string;
            /**
             * @description key
             * @example taskReassign
             */
            key?: string;
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description created by user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            createdByUserId?: string;
            /**
             * Format: int32
             * @description factory usages count
             * @example 3
             */
            factoryUsagesCount?: number;
            /**
             * Format: int32
             * @description factory pipelines count
             * @example 3
             */
            factoryPipelinesCount?: number;
            /**
             * Format: int32
             * @description factory multipliers count
             * @example 3
             */
            factoryMultipliersCount?: number;
            /**
             * Format: int32
             * @description factory branches count
             * @example 3
             */
            factoryBranchesCount?: number;
            /**
             * Format: int32
             * @description factory erasers count
             * @example 3
             */
            factoryErasersCount?: number;
            /** @description created by user */
            createdByUser?: components["schemas"]["UserV1"];
        };
        FactoryPipelineStepUpdateRqV1: {
            /** @description factory pipeline step update */
            factoryPipelineStep?: components["schemas"]["FactoryPipelineStepUpdateV1"];
        };
        FactoryPipelineStepUpdateV1: {
            /**
             * Format: uuid
             * @description factory pipeline id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryPipelineId?: string;
            /**
             * Format: int32
             * @description order
             * @example 3
             */
            order?: number;
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description is active
             * @example true
             */
            active?: boolean;
            /**
             * Format: int32
             * @description filler featurer id
             * @example 1000
             */
            fillerFeaturerId?: number;
            /**
             * @description filler params
             * @example {"linkId"=>"6e42ef74-3015-4400-946e-1326bcb4cf48",
             *     "GTEvalue"=>"2"}
             */
            fillerParams?: {
                [key: string]: string;
            };
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * @description is optional
             * @example true
             */
            optional?: boolean;
        };
        FactoryPipelineStepRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - factory pipeline step */
            factoryPipelineStep?: components["schemas"]["FactoryPipelineStepV2"];
        };
        FactoryPipelineStepV2: {
            /**
             * Format: uuid
             * @description id
             * @example 99856a15-6858-40ba-b0aa-b123c54e250d
             */
            id?: string;
            /**
             * Format: uuid
             * @description factory pipeline id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryPipelineId?: string;
            /**
             * Format: int32
             * @description order
             * @example 1
             */
            order?: number;
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition invert
             * @example true
             */
            factoryConditionInvert?: boolean;
            /**
             * @description is active
             * @example true
             */
            active?: boolean;
            /**
             * @description is optional
             * @example true
             */
            optional?: boolean;
            /**
             * Format: int32
             * @description filler featurer id
             * @example 22
             */
            fillerFeaturerId?: number;
            /**
             * @description filler params
             * @example {
             *       "outputTwinClassId": "da69c441-9c8f-4e73-a07e-b5648f8f4396",
             *       "copyHead": "true"
             *     }
             */
            fillerParams?: {
                [key: string]: string;
            };
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /** @description factory pipeline */
            factoryPipeline?: components["schemas"]["FactoryPipelineV2"];
            /** @description factory condition set */
            factoryConditionSet?: components["schemas"]["FactoryConditionSetV1"];
            /** @description filler featurer */
            fillerFeaturer?: components["schemas"]["FeaturerV1"];
        };
        FactoryEraserUpdateRqV1: {
            /** @description factory eraser update */
            eraser?: components["schemas"]["FactoryEraserUpdateV1"];
        };
        FactoryEraserUpdateV1: {
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            twinFactoryConditionSetId?: string;
            /**
             * @description factory condition invert
             * @example true
             */
            twinFactoryConditionInvert?: boolean;
            /**
             * @description active
             * @example true
             */
            active?: boolean;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * @description action
             * @example NOT_SPECIFIED
             * @enum {string}
             */
            action?: "NOT_SPECIFIED" | "RESTRICT" | "ERASE_IRREVOCABLE" | "ERASE_CANDIDATE";
        };
        FactoryEraserSaveRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description eraser */
            eraser?: components["schemas"]["FactoryEraserV2"];
        };
        FactoryEraserV2: {
            /**
             * Format: uuid
             * @description id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            id?: string;
            /**
             * Format: uuid
             * @description factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryId?: string;
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description active
             * @example true
             */
            active?: boolean;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * @description action
             * @example NOT_SPECIFIED
             * @enum {string}
             */
            action?: "NOT_SPECIFIED" | "RESTRICT" | "ERASE_IRREVOCABLE" | "ERASE_CANDIDATE";
            /** @description factory */
            factory?: components["schemas"]["FactoryV1"];
            /** @description factory condition set */
            factoryConditionSet?: components["schemas"]["FactoryConditionSetV1"];
            /** @description input twin class */
            inputTwinClass?: components["schemas"]["TwinClassBaseV1"];
        };
        DraftRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description draft */
            draft?: components["schemas"]["DraftV1"];
        };
        DraftV1: {
            /**
             * Format: uuid
             * @description draft id
             */
            id?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description created by user
             */
            createdByrUserId?: string;
            /**
             * Format: int32
             * @description count of new twins
             */
            twinCreateCount?: number;
            /**
             * Format: int32
             * @description count of updated twins
             */
            twinUpdateCount?: number;
            /**
             * Format: int32
             * @description count of deleted twins
             */
            twinDeleteCount?: number;
            /**
             * Format: int32
             * @description count of deleted 'by status change' twins
             */
            twinDeletedByStatusCount?: number;
            /**
             * Format: int32
             * @description count of irrevocable deleted twins
             */
            twinDeletedIrrevocableCount?: number;
            /**
             * Format: int32
             * @description markers added count
             */
            twinMarkerCreateCount?: number;
            /**
             * Format: int32
             * @description markers deleted count
             */
            twinMarkerDeleteCount?: number;
            /**
             * Format: int32
             * @description tags added count
             */
            twinTagCreateCount?: number;
            /**
             * Format: int32
             * @description tags deleted count
             */
            twinTagDeleteCount?: number;
            /**
             * Format: int32
             * @description links created count
             */
            twinLinkCreateCount?: number;
            /**
             * Format: int32
             * @description links updated count
             */
            twinLinkUpdateCount?: number;
            /**
             * Format: int32
             * @description links deleted count
             */
            twinLinkDeleteCount?: number;
            /**
             * Format: int32
             * @description attachment created count
             */
            twinAttachmentCreateCount?: number;
            /**
             * Format: int32
             * @description attachment updated count
             */
            twinAttachmentUpdateCount?: number;
            /**
             * Format: int32
             * @description attachment deleted count
             */
            twinAttachmentDeleteCount?: number;
            /**
             * Format: int32
             * @description simple field created count
             */
            twinFieldSimpleCreateCount?: number;
            /**
             * Format: int32
             * @description simple field updated count
             */
            twinFieldSimpleUpdateCount?: number;
            /**
             * Format: int32
             * @description simple field deleted count
             */
            twinFieldSimpleDeleteCount?: number;
            /**
             * Format: int32
             * @description user field created count
             */
            twinFieldUserCreateCount?: number;
            /**
             * Format: int32
             * @description user field updated count
             */
            twinFieldUserUpdateCount?: number;
            /**
             * Format: int32
             * @description user field deleted count
             */
            twinFieldUserDeleteCount?: number;
            /**
             * Format: int32
             * @description data_list field created count
             */
            twinFieldDataListCreateCount?: number;
            /**
             * Format: int32
             * @description data_list field updated count
             */
            twinFieldDataListUpdateCount?: number;
            /**
             * Format: int32
             * @description data_list field deleted count
             */
            twinFieldDataListDeleteCount?: number;
            /**
             * @description draft status
             * @enum {string}
             */
            status?: "UNDER_CONSTRUCTION" | "CONSTRUCTION_EXCEPTION" | "ERASE_SCOPE_COLLECT_PLANNED" | "ERASE_SCOPE_COLLECT_NEED_START" | "ERASE_SCOPE_COLLECT_IN_PROGRESS" | "ERASE_SCOPE_COLLECT_EXCEPTION" | "NORMALIZE_EXCEPTION" | "CHECK_CONFLICTS_EXCEPTION" | "UNCOMMITED" | "COMMIT_NEED_START" | "COMMIT_IN_PROGRESS" | "COMMIT_EXCEPTION" | "LOCKED" | "OUT_OF_DATE" | "COMMITED";
            /** @description created by user */
            createdByUser?: components["schemas"]["UserV1"];
        };
        DomainUpdateRqV1: {
            /** @description domain */
            domain?: components["schemas"]["DomainUpdateV1"];
        };
        DomainUpdateV1: {
            /**
             * @description name
             * @example alcosi
             */
            name?: string;
            /**
             * @description description
             * @example some domain
             */
            description?: string;
            /**
             * @description default locale for domain [en/de/by]
             * @example en
             */
            defaultLocale?: string;
            /**
             * Format: uuid
             * @description Resource storage type
             * @example 00000000-0000-0000-0007-000000000001
             */
            resourceStorageId?: string;
            /**
             * Format: uuid
             * @description Attachment storage type
             * @example 00000000-0000-0000-0007-000000000001
             */
            attachmentStorageId?: string;
            /**
             * Format: int32
             * @description business account initiator featurer id
             * @example 1000
             */
            businessAccountInitiatorFeaturerId?: number;
            /**
             * @description business account initiator params
             * @example {"linkId"=>"6e42ef74-3015-4400-946e-1326bcb4cf48",
             *     "GTEvalue"=>"2"}
             */
            businessAccountInitiatorParams?: {
                [key: string]: string;
            };
            /**
             * Format: int32
             * @description user group manager featurer id
             * @example 1000
             */
            userGroupManagerFeaturerId?: number;
            /**
             * @description user group manager params
             * @example {"linkId"=>"6e42ef74-3015-4400-946e-1326bcb4cf48",
             *     "GTEvalue"=>"2"}
             */
            userGroupManagerParams?: {
                [key: string]: string;
            };
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description twin class schema id
             * @example 8b9ea6ad-2b9b-4a4a-8ea9-1b17da4d603b
             */
            twinClassSchemaId?: string;
            /**
             * Format: uuid
             * @description business account template twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            businessAccountTemplateTwinId?: string;
            /**
             * Format: uuid
             * @description default iter id
             * @example 64807201-e3d6-4016-b699-b36c5f91c58e
             */
            defaultTierId?: string;
            /**
             * Format: uuid
             * @description domain user template twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            domainUserTemplateTwinId?: string;
            /**
             * Format: uuid
             * @description Icon dark resource id
             * @example 09cd9a50-dcbe-4c73-b39e-65d2000a8e85
             */
            iconDarkResourceId?: string;
            /**
             * Format: uuid
             * @description Icon light resource id
             * @example 09cd9a50-dcbe-4c73-b39e-65d2000a8e85
             */
            iconLightResourceId?: string;
            /**
             * Format: uuid
             * @description Navbar face id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            navbarFaceId?: string;
        };
        DomainViewRsv1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description domain */
            domain?: components["schemas"]["DomainViewV1"];
        };
        DomainViewV1: {
            /**
             * Format: uuid
             * @description domain id
             */
            id?: string;
            /**
             * @description key
             * @example alcosi
             */
            key?: string;
            /**
             * @description domain description
             * @example alcosi
             */
            description?: string;
            /** @description Icon dark uri. Might be relative */
            iconDark?: string;
            /** @description Icon light uri. Might be relative */
            iconLight?: string;
            /** @description domain name */
            name?: string;
            /**
             * @description type [basic/b2b]
             * @example basic
             * @enum {string}
             */
            type?: "basic" | "b2b";
            /**
             * Format: int32
             * @description business account initiator featurer id
             * @example 1000
             */
            businessAccountInitiatorFeaturerId?: number;
            /**
             * @description business account initiator params
             * @example {"linkId"=>"6e42ef74-3015-4400-946e-1326bcb4cf48",
             *     "GTEvalue"=>"2"}
             */
            businessAccountInitiatorParams?: {
                [key: string]: string;
            };
            /**
             * Format: int32
             * @description user group manager featurer id
             * @example 1000
             */
            userGroupManagerFeaturerId?: number;
            /**
             * @description user group manager params
             * @example {"linkId"=>"6e42ef74-3015-4400-946e-1326bcb4cf48",
             *     "GTEvalue"=>"2"}
             */
            userGroupManagerParams?: {
                [key: string]: string;
            };
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description twinflow schema id
             * @example 2c618b09-e8dc-4712-a433-2e18915ee70d
             */
            twinflowSchemaId?: string;
            /**
             * Format: uuid
             * @description twinclass schema id
             * @example 8b9ea6ad-2b9b-4a4a-8ea9-1b17da4d603b
             */
            twinClassSchemaId?: string;
            /**
             * Format: uuid
             * @description business account template twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            businessAccountTemplateTwinId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * @description default locale
             * @example en
             */
            defaultLocale?: string;
            /**
             * Format: uuid
             * @description ancestor twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            ancestorTwinClassId?: string;
            /**
             * Format: uuid
             * @description default tier id
             * @example 64807201-e3d6-4016-b699-b36c5f91c58e
             */
            defaultTierId?: string;
            /**
             * Format: int64
             * @description attachment storage used count
             */
            attachmentStorageUsedCount?: number;
            /**
             * Format: int64
             * @description attachment storage used size
             */
            attachmentStorageUsedSize?: number;
            /**
             * Format: uuid
             * @description domain user template twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            domainUserTemplateTwinId?: string;
            /**
             * Format: uuid
             * @description Resource storage type
             * @example 00000000-0000-0000-0007-000000000001
             */
            resourceStorageId?: string;
            /**
             * Format: uuid
             * @description Attachment storage type
             * @example 00000000-0000-0000-0007-000000000001
             */
            attachmentStorageId?: string;
            /**
             * Format: uuid
             * @description domain navigation bar pointer
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            navbarFaceId?: string;
        };
        DataListOptionUpdateRqV1: {
            /** @description icon */
            icon?: string;
            /** @description option */
            optionI18n?: components["schemas"]["I18nSaveV1"];
            /** @description attributes map */
            attributesMap?: {
                [key: string]: string;
            };
            /** @description external id */
            externalId?: string;
            /**
             * @description background color hex
             * @example #ff00ff
             */
            backgroundColor?: string;
            /**
             * @description font color hex
             * @example #ff00ff
             */
            fontColor?: string;
            /**
             * Format: uuid
             * @description data list id
             * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
             */
            dataListId?: string;
            /**
             * @description status
             * @example active
             * @enum {string}
             */
            status?: "active" | "disabled" | "hidden";
        };
        DataListOptionUpdateRqV2: {
            /** @description data list options */
            dataListOptions?: components["schemas"]["DataListOptionUpdateV1"][];
        };
        DataListOptionUpdateV1: {
            /** @description icon */
            icon?: string;
            /** @description option */
            optionI18n?: components["schemas"]["I18nSaveV1"];
            /** @description attributes map */
            attributesMap?: {
                [key: string]: string;
            };
            /** @description external id */
            externalId?: string;
            /**
             * @description background color hex
             * @example #ff00ff
             */
            backgroundColor?: string;
            /**
             * @description font color hex
             * @example #ff00ff
             */
            fontColor?: string;
            /**
             * Format: uuid
             * @description data list option id
             * @example 7de977d4-df6d-4250-9cb2-088363d139a1
             */
            id?: string;
            /**
             * Format: uuid
             * @description data list id
             * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
             */
            dataListId?: string;
            /**
             * @description status
             * @example active
             * @enum {string}
             */
            status?: "active" | "disabled" | "hidden";
        };
        DataListAttributeSaveV1: {
            /**
             * @description key
             * @example color
             */
            key?: string;
            /**
             * @description name
             * @example Some name
             */
            nameI18n?: components["schemas"]["I18nSaveV1"];
        };
        DataListUpdateRqV1: {
            /**
             * @description key
             * @example country
             */
            key?: string;
            /**
             * @description name
             * @example Some name
             */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description description
             * @example Some description
             */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /** @description attribute1 */
            attribute1?: components["schemas"]["DataListAttributeSaveV1"];
            /** @description attribute2 */
            attribute2?: components["schemas"]["DataListAttributeSaveV1"];
            /** @description attribute3 */
            attribute3?: components["schemas"]["DataListAttributeSaveV1"];
            /** @description attribute4 */
            attribute4?: components["schemas"]["DataListAttributeSaveV1"];
            /** @description external id */
            externalId?: string;
        };
        DataListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - data lists list */
            dataList?: components["schemas"]["DataListV2"];
        };
        DataListV2: {
            /**
             * Format: uuid
             * @description id
             * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
             */
            id?: string;
            /**
             * @description name
             * @example Country list
             */
            name?: string;
            /**
             * @description description
             * @example Supported country list
             */
            description?: string;
            /**
             * @description key
             * @example country
             */
            key?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description updated at
             * @example 2023-09-13T09:32:08
             */
            updatedAt?: string;
            /** @description attribute1 */
            attribute1?: components["schemas"]["DataListAttributeV1"];
            /** @description attribute2 */
            attribute2?: components["schemas"]["DataListAttributeV1"];
            /** @description attribute3 */
            attribute3?: components["schemas"]["DataListAttributeV1"];
            /** @description attribute4 */
            attribute4?: components["schemas"]["DataListAttributeV1"];
            /** @description attribute5 */
            attribute5?: components["schemas"]["DataListAttributeV1"];
            /** @description external id */
            externalId?: string;
            /** @description list of option ids */
            optionIdList?: string[];
            /** @description list options */
            options?: {
                [key: string]: components["schemas"]["DataListOptionV1"];
            };
        };
        CommentUpdateRqV1: {
            /** @description comment */
            comment?: components["schemas"]["CommentUpdateV1"];
        };
        CommentUpdateV1: {
            text?: string;
            /** @description attachments */
            attachments?: components["schemas"]["AttachmentCudV1"];
        };
        CommentRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description comment */
            comment?: components["schemas"]["CommentV1"];
        };
        BusinessAccountUpdateRqV1: {
            /**
             * @description name
             * @example BuildmeUp Const.
             */
            name?: string;
        };
        DomainSearchRqV1: {
            /** @description domain public search */
            search?: components["schemas"]["DomainSearchV1"];
        };
        DomainSearchV1: {
            /** @description key like list */
            keyLikeList?: string[];
            /** @description key not like list */
            keyNotLikeList?: string[];
        };
        DomainSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description domains */
            domains?: components["schemas"]["DomainViewPublicV1"][];
        };
        DomainViewPublicV1: {
            /**
             * Format: uuid
             * @description domain id
             */
            id?: string;
            /**
             * @description key
             * @example alcosi
             */
            key?: string;
            /**
             * @description domain description
             * @example alcosi
             */
            description?: string;
            /** @description Icon dark uri. Might be relative */
            iconDark?: string;
            /** @description Icon light uri. Might be relative */
            iconLight?: string;
            /** @description domain name */
            name?: string;
        };
        DataListOptionSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description data list id list */
            dataListIdList?: string[];
            /** @description data list id exclude list */
            dataListIdExcludeList?: string[];
            /** @description data list key list */
            dataListKeyList?: string[];
            /** @description data list key exclude list */
            dataListKeyExcludeList?: string[];
            /** @description option like list */
            optionLikeList?: string[];
            /** @description option not like list */
            optionNotLikeList?: string[];
            /** @description option i18n like list */
            optionI18nLikeList?: string[];
            /** @description option i18n not like list */
            optionI18nNotLikeList?: string[];
            /** @description business account id list */
            businessAccountIdList?: string[];
            /** @description business account id exclude list */
            businessAccountIdExcludeList?: string[];
            /** @description data list class subset id list */
            dataListSubsetIdList?: string[];
            /** @description data list class subset id exclude list */
            dataListSubsetIdExcludeList?: string[];
            /** @description data list class subset key list */
            dataListSubsetKeyList?: string[];
            /** @description data list class subset key exclude list */
            dataListSubsetKeyExcludeList?: string[];
            /** @description data list option status id list */
            statusIdList?: ("active" | "disabled" | "hidden")[];
            /** @description data list option status id exclude list */
            statusIdExcludeList?: ("active" | "disabled" | "hidden")[];
            /** @description external id like list */
            externalIdLikeList?: string[];
            /** @description external id not like list */
            externalIdNotLikeList?: string[];
        };
        DataListOptionSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description data list */
            options?: components["schemas"]["DataListOptionV3"][];
        };
        DataListOptionMapRqV1: {
            /**
             * @description data list option id set
             * @example [
             *       "133b1c94-a8c0-4795-8076-10548ed772b3",
             *       "7de977d4-df6d-4250-9cb2-088363d139a1"
             *     ]
             */
            dataListOptionIdSet?: string[];
        };
        DataListOptionMapRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description map { data list option id / data list option } */
            dataListOptionMap?: {
                [key: string]: components["schemas"]["DataListOptionV1"];
            };
        };
        DataListOptionSearchV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description data list id list */
            dataListIdList?: string[];
            /** @description data list id exclude list */
            dataListIdExcludeList?: string[];
            /** @description data list key list */
            dataListKeyList?: string[];
            /** @description data list key exclude list */
            dataListKeyExcludeList?: string[];
            /** @description option like list */
            optionLikeList?: string[];
            /** @description option not like list */
            optionNotLikeList?: string[];
            /** @description option i18n like list */
            optionI18nLikeList?: string[];
            /** @description option i18n not like list */
            optionI18nNotLikeList?: string[];
            /** @description business account id list */
            businessAccountIdList?: string[];
            /** @description business account id exclude list */
            businessAccountIdExcludeList?: string[];
            /** @description data list class subset id list */
            dataListSubsetIdList?: string[];
            /** @description data list class subset id exclude list */
            dataListSubsetIdExcludeList?: string[];
            /** @description data list class subset key list */
            dataListSubsetKeyList?: string[];
            /** @description data list class subset key exclude list */
            dataListSubsetKeyExcludeList?: string[];
            /** @description data list option status id list */
            statusIdList?: ("active" | "disabled" | "hidden")[];
            /** @description data list option status id exclude list */
            statusIdExcludeList?: ("active" | "disabled" | "hidden")[];
            /** @description external id like list */
            externalIdLikeList?: string[];
            /** @description external id not like list */
            externalIdNotLikeList?: string[];
        };
        DataListSearchRqV1: {
            /** @description datalist id list */
            idList?: string[];
            /** @description datalist id exclude list */
            idExcludeList?: string[];
            /** @description datalist name like list */
            nameLikeList?: string[];
            /** @description datalist name not like list */
            nameNotLikeList?: string[];
            /** @description datalist description like list */
            descriptionLikeList?: string[];
            /** @description datalist description not like list */
            descriptionNotLikeList?: string[];
            /** @description datalist class key like list */
            keyLikeList?: string[];
            /** @description datalist class key not like list */
            keyNotLikeList?: string[];
            /** @description data list option search */
            optionSearch?: components["schemas"]["DataListOptionSearchV1"];
            /** @description external id like list */
            externalIdLikeList?: string[];
            /** @description external id not like list */
            externalIdNotLikeList?: string[];
        };
        DataListSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description data list */
            dataListList?: components["schemas"]["DataListV2"][];
        };
        UserGroupSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description name i18n like list */
            nameI18NLikeList?: string[];
            /** @description name i18n not like list */
            nameI18nNotLikeList?: string[];
            /** @description description i18n like list */
            descriptionI18NLikeList?: string[];
            /** @description description i18n not like list */
            descriptionI18NNotLikeList?: string[];
            /** @description type list */
            typeList?: ("domainScopeDomainManage" | "domainScopeBusinessAccountManage" | "businessAccountScopeBusinessAccountManage" | "domainAndBusinessAccountScopeBusinessAccountManage" | "systemScopeDomainManage")[];
            /** @description type exclude list */
            typeExcludeList?: ("domainScopeDomainManage" | "domainScopeBusinessAccountManage" | "businessAccountScopeBusinessAccountManage" | "domainAndBusinessAccountScopeBusinessAccountManage" | "systemScopeDomainManage")[];
        };
        UserGroupSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - user group list */
            userGroupList?: components["schemas"]["UserGroupV2"][];
        };
        UserGroupV2: {
            /**
             * Format: uuid
             * @description id
             * @example e155e05b-f353-49ff-9869-da1e62aab1793
             */
            id?: string;
            /**
             * Format: uuid
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            businessAccountId?: string;
            /**
             * @description name
             * @example Manager
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * @description type
             * @example domainScopeDomainManage
             * @enum {string}
             */
            type?: "domainScopeDomainManage" | "domainScopeBusinessAccountManage" | "businessAccountScopeBusinessAccountManage" | "domainAndBusinessAccountScopeBusinessAccountManage" | "systemScopeDomainManage";
            /** @description business account */
            businessAccount?: components["schemas"]["BusinessAccountV1"];
        };
        UserGroupMemberManageRqV1: {
            userGroupEnterList?: string[];
            userGroupExitList?: string[];
        };
        UserGroupListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description user group list */
            userGroupList?: components["schemas"]["UserGroupV1"][];
        };
        UserAddRqV1: {
            /**
             * Format: uuid
             * @deprecated
             * @description businessAccountId
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            businessAccountId?: string;
            /**
             * Format: uuid
             * @deprecated
             * @description domainId
             * @example f67ad556-dd27-4871-9a00-16fb0e8a4102
             */
            domainId?: string;
            /** @description user */
            user?: components["schemas"]["UserToDomainAddV1"];
            /**
             * @deprecated
             * @description locale [optional]
             * @example en
             */
            locale?: string;
        };
        UserToDomainAddV1: {
            /**
             * @description fullName
             * @example John Doe
             */
            fullName?: string;
            /**
             * @description email
             * @example some@email.com
             */
            email?: string;
            /**
             * @description avatar url
             * @example http://twins.org/a/avatar/carkikrefmkawfwfwg.png
             */
            avatar?: string;
            /**
             * Format: uuid
             * @description id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            id?: string;
            /**
             * Format: uuid
             * @description businessAccountId
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            businessAccountId?: string;
            /**
             * Format: uuid
             * @description domainId
             * @example f67ad556-dd27-4871-9a00-16fb0e8a4102
             */
            domainId?: string;
            /**
             * @description locale [optional]
             * @example en
             */
            locale?: string;
        };
        SpaceSearchV1: {
            /**
             * Format: uuid
             * @description space id
             */
            spaceId?: string;
            /**
             * Format: uuid
             * @description role id
             */
            roleId?: string;
        };
        /** @description One of values */
        TwinFieldSearchDTOv1: {
            type: string;
        };
        /** @description (less & more connected with AND) and after connected to equals with OR and to emty with OR */
        TwinFieldSearchDateV1: Omit<components["schemas"]["TwinFieldSearchDTOv1"], "type"> & {
            type?: string;
            /**
             * Format: date-time
             * @description Twin field date less then given date
             */
            lessThen?: string;
            /**
             * Format: date-time
             * @description Twin field date greater then given date
             */
            moreThen?: string;
            /**
             * Format: date-time
             * @description Twin field date equals to given date
             */
            equals?: string;
            /** @description include entities with empty or null values to result */
            empty?: boolean;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "TwinFieldSearchDateV1";
        };
        TwinFieldSearchIdV1: Omit<components["schemas"]["TwinFieldSearchDTOv1"], "type"> & {
            type?: string;
            /** @description User id list */
            idList?: string[];
            /** @description User id exclude list */
            idExcludeList?: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "TwinFieldSearchIdV1";
        };
        TwinFieldSearchListV1: Omit<components["schemas"]["TwinFieldSearchDTOv1"], "type"> & {
            type?: string;
            /** @description Include options with given ids. AND join */
            optionsAllOfList?: string[];
            /** @description Include options with given ids. OR join */
            optionsAnyOfList?: string[];
            /** @description Exclude options with given ids. AND join */
            optionsNoAllOfList?: string[];
            /** @description Exclude options with given ids. OR join */
            optionsNoAnyOfList?: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "TwinFieldSearchListV1";
        };
        /** @description (less & more connected with AND) and after connected to equals with OR */
        TwinFieldSearchNumericV1: Omit<components["schemas"]["TwinFieldSearchDTOv1"], "type"> & {
            type?: string;
            /** @description Twin field numeric value less then given */
            lessThen?: string;
            /** @description Twin field numeric value greater then given */
            moreThen?: string;
            /** @description Twin field numeric value equals to given */
            equals?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "TwinFieldSearchNumericV1";
        };
        TwinFieldSearchTextV1: Omit<components["schemas"]["TwinFieldSearchDTOv1"], "type"> & {
            type?: string;
            /** @description Include like given strings. AND join. Add % symbols manual to use LIKE features. */
            valueLikeAllOfList?: string[];
            /** @description Include like given strings. OR join. Add % symbols manual to use LIKE features. */
            valueLikeAnyOfList?: string[];
            /** @description Exclude like given strings. AND join. Add % symbols manual to use LIKE features. */
            valueLikeNoAllOfList?: string[];
            /** @description Exclude like given strings. OR join. Add % symbols manual to use LIKE features. */
            valueLikeNoAnyOfList?: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "TwinFieldSearchTextV1";
        };
        TwinFieldSearchUserV1: Omit<components["schemas"]["TwinFieldSearchDTOv1"], "type"> & {
            type?: string;
            /** @description User id list */
            idList?: string[];
            /** @description User id exclude list */
            idExcludeList?: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "TwinFieldSearchUserV1";
        };
        TwinSearchByLinkV1: {
            /**
             * Format: uuid
             * @description Twin-link class id
             */
            linkId?: string;
            /** @description Twin dest ids for in(ex)clude from search */
            dstTwinIdList?: string[];
        };
        TwinSearchListV1: {
            /** @description match all child twins */
            matchAll?: boolean;
            /** @description twin searches */
            searches?: components["schemas"]["TwinSearchV1"][];
        };
        TwinSearchV1: {
            /** @description Twin class id list */
            twinClassIdList?: string[];
            /** @description Twin class id exclude list */
            twinClassIdExcludeList?: string[];
            /** @description Twin name like list */
            twinNameLikeList?: string[];
            /** @description Twin name not like list */
            twinNameNotLikeList?: string[];
            /** @description Twin description like list */
            descriptionLikeList?: string[];
            /** @description Twin description not like list */
            descriptionNotLikeList?: string[];
            /** @description Head twin id list */
            headTwinIdList?: string[];
            /** @description Twin id list */
            twinIdList?: string[];
            /** @description Twin id exclude list */
            twinIdExcludeList?: string[];
            /** @description Status id list */
            statusIdList?: string[];
            /** @description Assigner id list */
            assignerUserIdList?: string[];
            /** @description Assigner id exclude list */
            assignerUserIdExcludeList?: string[];
            /** @description Reporter id list */
            createdByUserIdList?: string[];
            /** @description Reporter id exclude list */
            createdByUserIdExcludeList?: string[];
            /** @description External id list */
            externalIdList?: string[];
            /** @description External id exclude list */
            externalIdExcludeList?: string[];
            /** @description Include dst twins with given links. OR join */
            linksAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Exclude dst twins with given links. OR join */
            linksNoAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Include dst twins with given links. AND join */
            linksAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Exclude dst twins with given links. AND join */
            linksNoAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Hierarchy ids filter */
            hierarchyTreeContainsIdList?: string[];
            /** @description Twin status exclude list */
            statusIdExcludeList?: string[];
            /** @description Twin tag list(data list options ids) */
            tagDataListOptionIdList?: string[];
            /** @description Twin tag exclude list(data list options ids) */
            tagDataListOptionIdExcludeList?: string[];
            /** @description Twin marker list(data list options ids) */
            markerDataListOptionIdList?: string[];
            /** @description Twin marker exclude list(data list options ids) */
            markerDataListOptionIdExcludeList?: string[];
            /** @description Twin extends by twin class list ids */
            twinClassExtendsHierarchyContainsIdList?: string[];
            /** @description Head twin class list ids */
            headTwinClassIdList?: string[];
            /** @description Twin touch list ids */
            touchList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
            /** @description Twin touch exclude list ids */
            touchExcludeList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
            /**
             * @description Twin Field Search. Key TwinClassField id.
             * @example {
             *       "550e8400-e29b-41d4-a716-446655440000": {
             *         "type": "TwinFieldSearchNumericV1",
             *         "lessThen": "10",
             *         "moreThen": "5",
             *         "equals": "7"
             *       },
             *       "550e8400-e29b-41d4-a716-446655440001": {
             *         "type": "TwinFieldSearchTextV1",
             *         "valueLikeAllOfList": [
             *           "test%"
             *         ]
             *       }
             *     }
             */
            fields?: {
                [key: string]: components["schemas"]["TwinFieldSearchDTOv1"];
            };
        };
        UserSearchRqV1: {
            /** @description user update */
            search?: components["schemas"]["UserSearchV1"];
        };
        UserSearchV1: {
            /** @description id list */
            userIdList?: string[];
            /** @description id exclude list */
            userIdExcludeList?: string[];
            /** @description name list */
            userNameLikeList?: string[];
            /** @description name exclude list */
            userNameLikeExcludeList?: string[];
            /** @description email list */
            userEmailLikeList?: string[];
            /** @description email exclude list */
            userEmailLikeExcludeList?: string[];
            /** @description status id list */
            statusIdList?: ("ACTIVE" | "DELETED" | "EMAIL_VERIFICATION_REQUIRED" | "BLOCKED")[];
            /** @description status id exclude list */
            statusIdExcludeList?: ("ACTIVE" | "DELETED" | "EMAIL_VERIFICATION_REQUIRED" | "BLOCKED")[];
            /** @description space list */
            spaceList?: components["schemas"]["SpaceSearchV1"][];
            /** @description space exclude list */
            spaceExcludeList?: components["schemas"]["SpaceSearchV1"][];
            /** @description child twins searches */
            childTwinSearches?: components["schemas"]["TwinSearchListV1"];
        };
        UserSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description result - user list */
            users?: components["schemas"]["UserV1"][];
        };
        TwinflowSchemaSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description name like list */
            nameLikeList?: string[];
            /** @description name not like list */
            nameNotLikeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /** @description business account id list */
            businessAccountIdList?: string[];
            /** @description business account id exclude list */
            businessAccountIdExcludeList?: string[];
            /** @description user id list */
            createdByUserIdList?: string[];
            /** @description user id exclude list */
            createdByUserIdExcludeList?: string[];
        };
        TwinflowSchemaSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - twinflow schema list */
            twinflowSchemas?: components["schemas"]["TwinflowSchemaV1"][];
        };
        TwinflowSchemaV1: {
            /**
             * Format: uuid
             * @description id
             * @example 2c618b09-e8dc-4712-a433-2e18915ee70d
             */
            id?: string;
            /**
             * Format: uuid
             * @description domain id
             * @example f67ad556-dd27-4871-9a00-16fb0e8a4102
             */
            domainId?: string;
            /**
             * Format: uuid
             * @description business account id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            businessAccountId?: string;
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            createdByUserId?: string;
        };
        TransitionCreateRqV1: {
            /** @description I18n name */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description I18n description */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * Format: uuid
             * @description [optional] src status id. if null - from any status transition
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            srcStatusId?: string;
            /**
             * Format: uuid
             * @description dst status is required
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            dstStatusId?: string;
            /**
             * @description [optional] uniq alias inside twinflow
             * @example start
             */
            alias?: string;
            /**
             * Format: uuid
             * @description [optional] some permission required to run transition
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description Inbuilt TwinFactory Id
             */
            inbuiltTwinFactoryId?: string;
            /**
             * Format: uuid
             * @description Drafting TwinFactory Id
             */
            draftingTwinFactoryId?: string;
            /**
             * @description twinflow transition type id
             * @example STATUS_CHANGE
             * @enum {string}
             */
            twinflowTransitionTypeId?: "STATUS_CHANGE" | "OPERATION";
        };
        TransitionCreateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description result - twinflow transition */
            transition?: components["schemas"]["TwinflowTransitionBaseV2"];
        };
        TwinflowBaseV2: {
            /**
             * Format: uuid
             * @example 34618b09-e8dc-4712-a433-2e18915ee70d
             */
            id?: string;
            /**
             * Format: uuid
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /**
             * @description name
             * @example Project
             */
            name?: string;
            /**
             * @description description
             * @example Projects business objects
             */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: uuid
             * @description initialStatusId
             */
            initialStatusId?: string;
            /** @description twin class */
            twinClass?: components["schemas"]["TwinClassBaseV1"];
            /** @description initial status */
            initialStatus?: components["schemas"]["TwinStatusV1"];
            /** @description twinflow author */
            createdByUser?: components["schemas"]["UserV1"];
        };
        TwinflowTransitionBaseV2: {
            /**
             * Format: uuid
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            id?: string;
            /**
             * Format: uuid
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            dstTwinStatusId?: string;
            /** @description status */
            dstTwinStatus?: components["schemas"]["TwinStatusV1"];
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * @description alias
             * @example start
             */
            alias?: string;
            /**
             * @description transition type
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             * @enum {string}
             */
            type?: "STATUS_CHANGE" | "OPERATION";
            allowComment?: boolean;
            allowAttachments?: boolean;
            allowLinks?: boolean;
            /**
             * Format: uuid
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            srcTwinStatusId?: string;
            /** @description srcStatus */
            srcTwinStatus?: components["schemas"]["TwinStatusV1"];
            /**
             * Format: uuid
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /** @description permission details */
            permission?: components["schemas"]["PermissionV1"];
            /**
             * Format: uuid
             * @description twinflow id
             * @example 34618b09-e8dc-4712-a433-2e18915ee70d
             */
            twinflowId?: string;
            /** @description twinflow */
            twinflow?: components["schemas"]["TwinflowBaseV2"];
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /** @description twinflow author */
            createdByUser?: components["schemas"]["UserV1"];
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: uuid
             * @description inbuilt factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            inbuiltTwinFactoryId?: string;
            /** @description inbuilt factory */
            inbuiltTwinFactory?: components["schemas"]["FactoryV1"];
            /**
             * Format: uuid
             * @description drafting factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            draftingTwinFactoryId?: string;
            /** @description drafting factory */
            draftingTwinFactory?: components["schemas"]["FactoryV1"];
        };
        TwinflowListRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description twin class id map */
            twinClassIdMap?: {
                [key: string]: boolean;
            };
            /** @description twin class id exclude map */
            twinClassIdExcludeMap?: {
                [key: string]: boolean;
            };
            /** @description name i18n keyword list(AND) */
            nameI18nLikeList?: string[];
            /** @description name i18n keyword exclude list(OR) */
            nameI18nNotLikeList?: string[];
            /** @description description i18n keyword list(AND) */
            descriptionI18nLikeList?: string[];
            /** @description description i18n exclude keyword list(OR) */
            descriptionI18nNotLikeList?: string[];
            /** @description initial status id list */
            initialStatusIdList?: string[];
            /** @description initial status id exclude list */
            initialStatusIdExcludeList?: string[];
            /** @description user id list */
            createdByUserIdList?: string[];
            /** @description user id exclude list */
            createdByUserIdExcludeList?: string[];
            /** @description twinflow schema id list */
            twinflowSchemaIdList?: string[];
            /** @description twinflow schema id exclude list */
            twinflowSchemaIdExcludeList?: string[];
        };
        TransitionValidatorRuleBaseV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /**
             * Format: int32
             * @description order
             */
            order?: number;
            /** @description active */
            active?: boolean;
            /**
             * Format: uuid
             * @description grouped set of twin validators id
             */
            twinValidatorSetId?: string;
            /** @description Twin validator list */
            twinValidators?: components["schemas"]["TwinValidatorBaseV1"][];
            /** @description grouping set of twin validator */
            twinValidatorSet?: components["schemas"]["TwinValidatorSetBaseV1"];
            /**
             * Format: uuid
             * @description twinflow transition id
             */
            twinflowTransitionId?: string;
        };
        TriggerV1: {
            /**
             * Format: int32
             * @description order
             */
            order?: number;
            /**
             * Format: int32
             * @description trigger featurer id
             */
            triggerFeaturerId?: number;
            /** @description featurer params */
            triggerParams?: {
                [key: string]: string;
            };
            /** @description active */
            active?: boolean;
            /**
             * Format: uuid
             * @description id
             * @example 9d956a15-6858-40ba-b0aa-b123c54e250d
             */
            id?: string;
            /** @description trigger featurer */
            triggerFeaturer?: components["schemas"]["FeaturerV1"];
        };
        TwinValidatorBaseV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /**
             * Format: uuid
             * @description grouped set of twin validators id
             */
            twinValidatorSetId?: string;
            /**
             * Format: int32
             * @description validator featurer id
             */
            validatorFeaturerId?: number;
            /** @description featurer params */
            validatorParams?: {
                [key: string]: string;
            };
            /** @description invert */
            invert?: boolean;
            /** @description active */
            active?: boolean;
            /** @description description */
            description?: string;
            /**
             * Format: int32
             * @description order
             */
            order?: number;
            /** @description grouping set of twin validator */
            twinValidatorSet?: components["schemas"]["TwinValidatorSetBaseV1"];
            /** @description validator featurer */
            validatorFeaturer?: components["schemas"]["FeaturerV1"];
        };
        TwinValidatorSetBaseV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /**
             * Format: uuid
             * @description domain id
             */
            domainId?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
        };
        TwinflowBaseV3: {
            /**
             * Format: uuid
             * @example 34618b09-e8dc-4712-a433-2e18915ee70d
             */
            id?: string;
            /**
             * Format: uuid
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /**
             * @description name
             * @example Project
             */
            name?: string;
            /**
             * @description description
             * @example Projects business objects
             */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: uuid
             * @description initialStatusId
             */
            initialStatusId?: string;
            /** @description twin class */
            twinClass?: components["schemas"]["TwinClassBaseV1"];
            /** @description initial status */
            initialStatus?: components["schemas"]["TwinStatusV1"];
            /** @description twinflow author */
            createdByUser?: components["schemas"]["UserV1"];
            /** @description transitions map */
            transitions?: {
                [key: string]: components["schemas"]["TwinflowTransitionBaseV3"];
            };
        };
        TwinflowListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - twinflow list */
            twinflowList?: components["schemas"]["TwinflowBaseV3"][];
        };
        TwinflowTransitionBaseV3: {
            /**
             * Format: uuid
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             */
            id?: string;
            /**
             * Format: uuid
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            dstTwinStatusId?: string;
            /** @description status */
            dstTwinStatus?: components["schemas"]["TwinStatusV1"];
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * @description alias
             * @example start
             */
            alias?: string;
            /**
             * @description transition type
             * @example f6606fa2-c047-4ba9-a92c-84051df681ab
             * @enum {string}
             */
            type?: "STATUS_CHANGE" | "OPERATION";
            allowComment?: boolean;
            allowAttachments?: boolean;
            allowLinks?: boolean;
            /**
             * Format: uuid
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            srcTwinStatusId?: string;
            /** @description srcStatus */
            srcTwinStatus?: components["schemas"]["TwinStatusV1"];
            /**
             * Format: uuid
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /** @description permission details */
            permission?: components["schemas"]["PermissionV1"];
            /**
             * Format: uuid
             * @description twinflow id
             * @example 34618b09-e8dc-4712-a433-2e18915ee70d
             */
            twinflowId?: string;
            /** @description twinflow */
            twinflow?: components["schemas"]["TwinflowBaseV2"];
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /** @description twinflow author */
            createdByUser?: components["schemas"]["UserV1"];
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: uuid
             * @description inbuilt factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            inbuiltTwinFactoryId?: string;
            /** @description inbuilt factory */
            inbuiltTwinFactory?: components["schemas"]["FactoryV1"];
            /**
             * Format: uuid
             * @description drafting factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            draftingTwinFactoryId?: string;
            /** @description drafting factory */
            draftingTwinFactory?: components["schemas"]["FactoryV1"];
            /** @description validators */
            validatorRules?: components["schemas"]["TransitionValidatorRuleBaseV1"][];
            /** @description triggers */
            triggers?: components["schemas"]["TriggerV1"][];
        };
        TwinStatusSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description twin class id map */
            twinClassIdMap?: {
                [key: string]: boolean;
            };
            /** @description twin class id exclude map */
            twinClassIdExcludeMap?: {
                [key: string]: boolean;
            };
            /** @description key like list */
            keyLikeList?: string[];
            /** @description key not like list */
            keyNotLikeList?: string[];
            /** @description name i18n like list */
            nameI18nLikeList?: string[];
            /** @description name i18n not like list */
            nameI18nNotLikeList?: string[];
            /** @description description i18n like list */
            descriptionI18nLikeList?: string[];
            /** @description description i18n not like list */
            descriptionI18nNotLikeList?: string[];
        };
        TwinStatusSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - status list */
            statuses?: components["schemas"]["TwinStatusV2"][];
        };
        TwinStatusV2: {
            /**
             * Format: uuid
             * @description uuid
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            id?: string;
            /** @description key within the domain */
            key?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * @description url for status UI logo
             * @example https://twins.org/img/twin_status_default.png
             */
            logo?: string;
            /**
             * @description background color hex
             * @example #ff00ff
             */
            backgroundColor?: string;
            /**
             * @description font color hex
             * @example #ff00ff
             */
            fontColor?: string;
            /**
             * Format: uuid
             * @description twin class
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /** @description twin class */
            twinClass?: components["schemas"]["TwinClassBaseV1"];
        };
        TwinClassFieldSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description twin class id map */
            twinClassIdMap?: {
                [key: string]: boolean;
            };
            /** @description twin class id exclude map */
            twinClassIdExcludeMap?: {
                [key: string]: boolean;
            };
            /** @description key like list */
            keyLikeList?: string[];
            /** @description key not like list */
            keyNotLikeList?: string[];
            /** @description name i18n like list */
            nameI18nLikeList?: string[];
            /** @description name i18n not like list */
            nameI18nNotLikeList?: string[];
            /** @description description i18n like list */
            descriptionI18nLikeList?: string[];
            /** @description description i18n not like list */
            descriptionI18nNotLikeList?: string[];
            /** @description external id like list */
            externalIdLikeList?: string[];
            /** @description external id not like list */
            externalIdNotLikeList?: string[];
            /** @description field typer id list */
            fieldTyperIdList?: number[];
            /** @description field typer id exclude list */
            fieldTyperIdExcludeList?: number[];
            /** @description view permission id list */
            viewPermissionIdList?: string[];
            /** @description view permission id exclude list */
            viewPermissionIdExcludeList?: string[];
            /** @description edit permission id list */
            editPermissionIdList?: string[];
            /** @description edit permission id exclude list */
            editPermissionIdExcludeList?: string[];
            /**
             * @description required
             * @example ANY
             * @enum {string}
             */
            required?: "ONLY" | "ONLY_NOT" | "ANY";
        };
        TwinClassFieldSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - twin class field list */
            fields?: components["schemas"]["TwinClassFieldV2"][];
        };
        TwinClassFieldCreateRqV2: {
            /** @description twin class field list */
            twinClassFields?: components["schemas"]["TwinClassFieldCreateV1"][];
        };
        TwinClassFieldCreateV1: {
            /**
             * @description unique key within the class
             * @example serialNumber
             */
            key?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to view this field
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to edit this field
             */
            editPermissionId?: string;
            /** @description I18n name */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description I18n description */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description Required field
             * @example true
             */
            required?: boolean;
            /** @description external id */
            externalId?: string;
            /**
             * Format: int32
             * @description Field typer featurer ID
             * @example 1
             */
            fieldTyperFeaturerId?: number;
            /**
             * @description Field typer parameters
             * @example {}
             */
            fieldTyperParams?: {
                [key: string]: string;
            };
            /**
             * Format: uuid
             * @description twin class id
             */
            twinClassId?: string;
        };
        TwinSearchSimpleV1: {
            /** @description Twin name like */
            nameLike?: string;
            /** @description Twin alias like */
            aliasLike?: string;
        };
        TwinSearchRsV2: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - transfers list */
            twinList?: components["schemas"]["TwinV2"][];
        };
        TwinflowCreateRqV1: {
            /** @description I18n name */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description I18n description */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * Format: uuid
             * @description initial status id
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            initialStatusId?: string;
        };
        TwinflowCreateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - twin class */
            twinflow?: components["schemas"]["TwinflowBaseV2"];
        };
        TwinStatusCreateRqV1: {
            /**
             * @description [optional] key within the domain
             * @example toDo
             */
            key?: string;
            /** @description [optional] name */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description [optional] description */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description [optional] url for status UI logo
             * @example https://twins.org/img/twin_status_default.png
             */
            logo?: string;
            /**
             * @description [optional] background color hex
             * @example #ff00ff
             */
            backgroundColor?: string;
            /**
             * @description [optional] font color hex
             * @example #ff00ff
             */
            fontColor?: string;
        };
        TwinStatusCreateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description twin status */
            twinStatus?: components["schemas"]["TwinStatusV1"];
        };
        TagSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description option like list */
            optionLikeList?: string[];
            /** @description option not like list */
            optionNotLikeList?: string[];
            /** @description option i18n like list */
            optionI18nLikeList?: string[];
            /** @description option i18n not like list */
            optionI18nNotLikeList?: string[];
        };
        TagSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - tag option list */
            options?: components["schemas"]["DataListOptionV3"][];
        };
        TwinClassFieldCreateRqV1: {
            /**
             * @description unique key within the class
             * @example serialNumber
             */
            key?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to view this field
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to edit this field
             */
            editPermissionId?: string;
            /** @description I18n name */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description I18n description */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description Required field
             * @example true
             */
            required?: boolean;
            /** @description external id */
            externalId?: string;
            /**
             * Format: int32
             * @description Field typer featurer ID
             * @example 1
             */
            fieldTyperFeaturerId?: number;
            /**
             * @description Field typer parameters
             * @example {}
             */
            fieldTyperParams?: {
                [key: string]: string;
            };
        };
        TwinClassDuplicateRqV1: {
            /**
             * @description new class key
             * @example PROJECT
             */
            newKey?: string;
        };
        TwinClassCreateRqV2: {
            /** @description twin classes list for create */
            twinClassCreates?: components["schemas"]["TwinClassCreateV1"][];
        };
        TwinClassCreateV1: {
            /**
             * @description unique key within the domain
             * @example TOOL
             */
            key?: string;
            /**
             * @description name
             * @example Tool
             */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description [optional] description
             * @example Professional tool class
             */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * Format: int32
             * @description [optional] an id of head hunter featurer. The field has a sense only if headTwinClassId filled
             */
            headHunterFeaturerId?: number;
            /** @description [optional] head hunter featurer params */
            headHunterParams?: {
                [key: string]: string;
            };
            /**
             * @description [optional] if true, then not twin of given class can be created. Abstract classes must be extended
             * @example false
             */
            abstractClass?: boolean;
            /**
             * @description [optional] url for class UI logo
             * @example https://twins.org/img/twin_class_default.png
             */
            logo?: string;
            /**
             * @description [optional] if true then twins of current class can have own permission_schema and this schema will cover children twins
             * @example false
             */
            permissionSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class can have own twinflow_schema and this schema will cover children twins
             * @example false
             */
            twinflowSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class can have own twin_class_schema and this schema will cover children twins
             * @example false
             */
            twinClassSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class must have own alias key and this key will be used to generate alias for children twins
             * @example false
             */
            aliasSpace?: boolean;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to view twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to create twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            createPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to edit twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            editPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to delete twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            deletePermissionId?: string;
            /**
             * @description [optional] owner typ of class
             * @enum {string}
             */
            ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
            /** @description [optional] is assignee required */
            assigneeRequired?: boolean;
            /** @description [optional] external id */
            externalId?: string;
            /**
             * Format: uuid
             * @description [optional] link to extends class. All fields and links will be valid for current class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            extendsTwinClassId?: string;
            /**
             * Format: uuid
             * @description [optional] link to head (parent) class. It should be used in case, when twins of some class can not exist without some parent twin. Example: Task and Sub-task. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            headTwinClassId?: string;
            /**
             * Format: uuid
             * @description [optional] id of linked marker list. Markers in some cases similar to secondary statuses. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            markerDataListId?: string;
            /**
             * Format: uuid
             * @description [optional] id of linked tags cloud. Tags differ from markers in that new tags can be added to the cloud by the users themselves. And the list of markers is configured only by the domain manager. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            tagDataListId?: string;
            /** @description [optional] if true - permissions will be created and assign to class (if not specified another permission ids in this dto) */
            autoCreatePermissions?: boolean;
            /** @description [optional] if true - twinflow and status will be created and assign to class */
            autoCreateTwinflow?: boolean;
        };
        TwinClassCreateRsV2: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - twin class list */
            twinClassList?: components["schemas"]["TwinClassV1"][];
        };
        TwinClassCreateRqV1: {
            /**
             * @description unique key within the domain
             * @example TOOL
             */
            key?: string;
            /**
             * @description name
             * @example Tool
             */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description [optional] description
             * @example Professional tool class
             */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * Format: int32
             * @description [optional] an id of head hunter featurer. The field has a sense only if headTwinClassId filled
             */
            headHunterFeaturerId?: number;
            /** @description [optional] head hunter featurer params */
            headHunterParams?: {
                [key: string]: string;
            };
            /**
             * @description [optional] if true, then not twin of given class can be created. Abstract classes must be extended
             * @example false
             */
            abstractClass?: boolean;
            /**
             * @description [optional] url for class UI logo
             * @example https://twins.org/img/twin_class_default.png
             */
            logo?: string;
            /**
             * @description [optional] if true then twins of current class can have own permission_schema and this schema will cover children twins
             * @example false
             */
            permissionSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class can have own twinflow_schema and this schema will cover children twins
             * @example false
             */
            twinflowSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class can have own twin_class_schema and this schema will cover children twins
             * @example false
             */
            twinClassSchemaSpace?: boolean;
            /**
             * @description [optional] if true then twins of current class must have own alias key and this key will be used to generate alias for children twins
             * @example false
             */
            aliasSpace?: boolean;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to view twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            viewPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to create twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            createPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to edit twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            editPermissionId?: string;
            /**
             * Format: uuid
             * @description [optional] this field helps to set extra permission, needed by users to delete twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            deletePermissionId?: string;
            /**
             * @description [optional] owner typ of class
             * @enum {string}
             */
            ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
            /** @description [optional] is assignee required */
            assigneeRequired?: boolean;
            /** @description [optional] external id */
            externalId?: string;
            /**
             * Format: uuid
             * @description [optional] link to extends class. All fields and links will be valid for current class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            extendsTwinClassId?: string;
            /**
             * Format: uuid
             * @description [optional] link to head (parent) class. It should be used in case, when twins of some class can not exist without some parent twin. Example: Task and Sub-task. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            headTwinClassId?: string;
            /**
             * Format: uuid
             * @description [optional] id of linked marker list. Markers in some cases similar to secondary statuses. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            markerDataListId?: string;
            /**
             * Format: uuid
             * @description [optional] id of linked tags cloud. Tags differ from markers in that new tags can be added to the cloud by the users themselves. And the list of markers is configured only by the domain manager. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
             */
            tagDataListId?: string;
            /** @description [optional] if true - permissions will be created and assign to class (if not specified another permission ids in this dto) */
            autoCreatePermissions?: boolean;
        };
        TwinClassCreateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - twin class */
            twinClass?: components["schemas"]["TwinClassV1"];
        };
        HierarchySearchV1: {
            /** @description twin class id list */
            idList?: string[];
            /** @description twin class id exclude list */
            idExcludeList?: string[];
            /**
             * Format: int32
             * @description Search depth
             */
            depth?: number;
        };
        TwinClassListRqV1: {
            /** @description twin class id list */
            twinClassIdList?: string[];
            /** @description twin class id exclude list */
            twinClassIdExcludeList?: string[];
            /** @description twin class key list */
            twinClassKeyLikeList?: string[];
            /** @description name i18n keyword list(AND) */
            nameI18nLikeList?: string[];
            /** @description name i18n keyword exclude list(OR) */
            nameI18nNotLikeList?: string[];
            /** @description description i18n keyword list(AND) */
            descriptionI18nLikeList?: string[];
            /** @description description i18n exclude keyword list(OR) */
            descriptionI18nNotLikeList?: string[];
            /** @description Hierarchy search head childs */
            headHierarchyChildsForTwinClassSearch?: components["schemas"]["HierarchySearchV1"];
            /** @description Hierarchy search head parents */
            headHierarchyParentsForTwinClassSearch?: components["schemas"]["HierarchySearchV1"];
            /** @description Hierarchy search extands childs */
            extendsHierarchyChildsForTwinClassSearch?: components["schemas"]["HierarchySearchV1"];
            /** @description Hierarchy search extands parents */
            extendsHierarchyParentsForTwinClassSearch?: components["schemas"]["HierarchySearchV1"];
            /** @description owner type list */
            ownerTypeList?: ("SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER")[];
            /** @description owner type exclude list */
            ownerTypeExcludeList?: ("SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER")[];
            /** @description marker data list id list */
            markerDatalistIdList?: string[];
            /** @description marker data list id exclude list */
            markerDatalistIdExcludeList?: string[];
            /** @description tag data list id list */
            tagDatalistIdList?: string[];
            /** @description tag data list id exclude list */
            tagDatalistIdExcludeList?: string[];
            /**
             * @description twin class is abstract
             * @example ANY
             * @enum {string}
             */
            abstractt?: "ONLY" | "ONLY_NOT" | "ANY";
            /**
             * @description twin class has twinflow schema space
             * @example ANY
             * @enum {string}
             */
            twinflowSchemaSpace?: "ONLY" | "ONLY_NOT" | "ANY";
            /**
             * @description twin class has schema space
             * @example ANY
             * @enum {string}
             */
            twinClassSchemaSpace?: "ONLY" | "ONLY_NOT" | "ANY";
            /**
             * @description twin class has permission schema space
             * @example ANY
             * @enum {string}
             */
            permissionSchemaSpace?: "ONLY" | "ONLY_NOT" | "ANY";
            /**
             * @description twin class has alias space
             * @example ANY
             * @enum {string}
             */
            aliasSpace?: "ONLY" | "ONLY_NOT" | "ANY";
            /**
             * @description twin class required assignee
             * @example ANY
             * @enum {string}
             */
            assigneeRequired?: "ONLY" | "ONLY_NOT" | "ANY";
            /** @description permission id list */
            viewPermissionIdList?: string[];
            /** @description permission id exclude list */
            viewPermissionIdExcludeList?: string[];
            /** @description create permission id list */
            createPermissionIdList?: string[];
            /** @description create permission id exclude list */
            createPermissionIdExcludeList?: string[];
            /** @description edit permission id list */
            editPermissionIdList?: string[];
            /** @description edit permission id exclude list */
            editPermissionIdExcludeList?: string[];
            /** @description delete permission id list */
            deletePermissionIdList?: string[];
            /** @description delete permission id exclude list */
            deletePermissionIdExcludeList?: string[];
            /** @description external id like list */
            externalIdLikeList?: string[];
            /** @description external id not like list */
            externalIdNotLikeList?: string[];
        };
        TwinClassListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - twin class list */
            twinClassList?: components["schemas"]["TwinClassV1"][];
        };
        PermissionCheckOverviewRqV1: {
            /**
             * Format: uuid
             * @description userId for whom we want to check permission (will be different from ApiUser)
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            userId?: string;
            /**
             * Format: uuid
             * @description if null, then use view_permission_id from twin or from twin_class
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
        };
        TwinFieldV1: {
            /** @description On of values */
            value?: components["schemas"]["TwinFieldValueColorHexV1"] | components["schemas"]["TwinFieldValueDataListOptionsV1"] | components["schemas"]["TwinFieldValueDateV1"] | components["schemas"]["TwinFieldValueTextV1"];
            /** @description class field details */
            twinClassField?: components["schemas"]["TwinClassFieldV1"];
        };
        TwinFieldValueColorHexV1: Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
            valueType?: string;
            /**
             * @description Color hex code
             * @example #575584
             */
            hex?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            valueType: "colorHexV1";
        };
        /** @description One of values */
        TwinFieldValueDTO: {
            valueType: string;
        };
        TwinFieldValueDataListOptionsV1: Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
            valueType?: string;
            /** @description Selected option */
            selectedOptions?: components["schemas"]["DataListOptionV1"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            valueType: "listOptionsV1";
        };
        TwinFieldValueDateV1: Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
            valueType?: string;
            /** @description Date */
            date?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            valueType: "dateV1";
        };
        TwinFieldValueTextV1: Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
            valueType?: string;
            /**
             * @description Some simple text
             * @example Hello world
             */
            text?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            valueType: "textV1";
        };
        TwinSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - transfers list */
            twinList?: components["schemas"]["TwinV1"][];
        };
        TwinV1: {
            /**
             * Format: uuid
             * @description id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            id?: string;
            /**
             * @description externalId
             * @example 934599502DFFAE
             */
            externalId?: string;
            /**
             * Format: uuid
             * @description headTwinId
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            headTwinId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * @description name
             * @example Oak
             */
            name?: string;
            /**
             * @description description
             * @example The biggest tree
             */
            description?: string;
            /**
             * Format: uuid
             * @description statusId
             */
            statusId?: string;
            /**
             * Format: uuid
             * @description class
             */
            twinClassId?: string;
            /**
             * Format: uuid
             * @description current assigner
             */
            assignerUserId?: string;
            /**
             * Format: uuid
             * @description author
             */
            authorUserId?: string;
            /**
             * Format: uuid
             * @description owner business account id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            ownerBusinessAccountId?: string;
            /**
             * Format: uuid
             * @description owner user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            ownerUserId?: string;
            /** @description status */
            status?: components["schemas"]["TwinStatusV1"];
            /** @description class */
            twinClass?: components["schemas"]["TwinClassV1"];
            /** @description current assigner */
            assignerUser?: components["schemas"]["UserV1"];
            /** @description author */
            authorUser?: components["schemas"]["UserV1"];
            /** @description headTwin */
            headTwin?: components["schemas"]["TwinBaseV2"];
            /** @description aliases */
            aliases?: string[];
            /** @description Attachments */
            attachments?: components["schemas"]["AttachmentV1"][];
            /** @description Attachments count */
            attachmentsCount?: components["schemas"]["AttachmentsCountV1"];
            /** @description Links */
            links?: components["schemas"]["TwinLinkListV1"];
            /** @description TransitionId list. Will be filled only in lazyRelations mode is false */
            transitionsIdList?: string[];
            /** @description Transition list. Will be filled only if lazyRelations mode is true */
            transitions?: components["schemas"]["TwinTransitionViewV1"][];
            /** @description MarkerId list. Will be filled only in lazyRelations mode is false */
            markerIdList?: string[];
            /** @description Marker list. Will be filled only if lazyRelations mode is true */
            markers?: components["schemas"]["DataListOptionV1"][];
            /** @description TagId list. Will be filled only in lazyRelations mode is false */
            tagIdList?: string[];
            /** @description Tag list. Will be filled only if lazyRelations mode is true */
            tags?: components["schemas"]["DataListOptionV1"][];
            /** @description Suitable actions list */
            actions?: ("EDIT" | "DELETE" | "MOVE" | "COMMENT" | "WATCH" | "TIME_TRACK" | "ATTACHMENT_ADD" | "HISTORY_VIEW")[];
            /** @description Twins of which classes are possible to create as children for given twin */
            creatableChildTwinClassIds?: string[];
            /** @description Twins of which classes are possible to create as children for given twin */
            creatableChildTwinClasses?: components["schemas"]["TwinClassV1"][];
            /** @description fields */
            fields?: components["schemas"]["TwinFieldV1"][];
        };
        TwinLinkAddRqV1: {
            /** @description Links list */
            links?: components["schemas"]["TwinLinkAddV1"][];
        };
        TwinLinkAddRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description id */
            twinLinkIdList?: string[];
        };
        TwinFieldListUpdateRqV1: {
            /** @description fields */
            fields?: {
                [key: string]: string;
            };
        };
        TwinFieldRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /**
             * Format: uuid
             * @description twinId
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            twinId?: string;
            /** @description field data */
            field?: components["schemas"]["TwinFieldV1"];
        };
        TwinFieldUpdateRqV1: {
            /** @description On of values */
            value?: components["schemas"]["TwinFieldValueColorHexV1"] | components["schemas"]["TwinFieldValueDataListOptionsV1"] | components["schemas"]["TwinFieldValueDateV1"] | components["schemas"]["TwinFieldValueTextV1"];
        };
        AttachmentCreateRqV1: {
            /** @description attachments list */
            attachments?: components["schemas"]["AttachmentCreateV1"][];
        };
        AttachmentAddRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description id */
            attachmentIdList?: string[];
        };
        TwinCreateRqV2: {
            /**
             * Format: uuid
             * @description Class Id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            classId?: string;
            /**
             * Format: uuid
             * @description Head twin id, if selected class had to be linked to some head twin
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            headTwinId?: string;
            /**
             * @description name
             * @example Oak
             */
            name?: string;
            /**
             * Format: uuid
             * @description assigner user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            assignerUserId?: string;
            /**
             * @description description
             * @example The biggest tree
             */
            description?: string;
            /** @description fields */
            fields?: {
                [key: string]: string;
            };
            /** @description Attachments */
            attachments?: components["schemas"]["AttachmentCreateV1"][];
            /** @description Links list */
            links?: components["schemas"]["TwinLinkAddV1"][];
            /** @description Tags list */
            tags?: components["schemas"]["TwinTagAddV1"];
        };
        TwinTagAddV1: {
            /**
             * @description add already existing tags by their ids
             * @example [
             *       "11a4c3f8-c780-4421-9aee-9e7eec20c67d",
             *       "83050c4b-ef17-4d7d-8792-6e5a86557ab9"
             *     ]
             */
            existingTags?: string[];
            /**
             * @description add new tags by name (in current locale). If tag with given name is already exist, it will be used
             * @example [
             *       "String 1",
             *       "String 2"
             *     ]
             */
            newTags?: string[];
        };
        TwinCreateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /**
             * Format: uuid
             * @description new twin id
             */
            twinId?: string;
            /** @description twin alias list */
            twinAliasList?: string[];
        };
        TwinCreateRqV1: {
            /**
             * Format: uuid
             * @description Class Id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            classId?: string;
            /**
             * Format: uuid
             * @description Head twin id, if selected class had to be linked to some head twin
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            headTwinId?: string;
            /**
             * @description name
             * @example Oak
             */
            name?: string;
            /**
             * Format: uuid
             * @description assigner user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            assignerUserId?: string;
            /**
             * @description description
             * @example The biggest tree
             */
            description?: string;
            /** @description external id */
            externalId?: string;
            /** @description fields */
            fields?: {
                [key: string]: components["schemas"]["TwinFieldValueColorHexV1"] | components["schemas"]["TwinFieldValueDataListOptionsV1"] | components["schemas"]["TwinFieldValueDateV1"] | components["schemas"]["TwinFieldValueTextV1"];
            };
            /** @description Attachments */
            attachments?: components["schemas"]["AttachmentCreateV1"][];
            /** @description Links list */
            links?: components["schemas"]["TwinLinkAddV1"][];
        };
        TwinListTouchAddRqV1: {
            /** @description twin id list */
            twinIdList?: string[];
        };
        TwinTouchListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description touche twins data */
            touchTwins?: components["schemas"]["TwinTouchV1"][];
        };
        TwinSearchByAliasRqV1: {
            /** @description Search named params values */
            params?: {
                [key: string]: string;
            };
            /** @description search narrowing */
            narrow?: components["schemas"]["TwinSearchExtendedV1"];
        };
        TwinSearchExtendedV1: {
            /** @description Twin class id list */
            twinClassIdList?: string[];
            /** @description Twin class id exclude list */
            twinClassIdExcludeList?: string[];
            /** @description Twin name like list */
            twinNameLikeList?: string[];
            /** @description Twin name not like list */
            twinNameNotLikeList?: string[];
            /** @description Twin description like list */
            descriptionLikeList?: string[];
            /** @description Twin description not like list */
            descriptionNotLikeList?: string[];
            /** @description Head twin id list */
            headTwinIdList?: string[];
            /** @description Twin id list */
            twinIdList?: string[];
            /** @description Twin id exclude list */
            twinIdExcludeList?: string[];
            /** @description Status id list */
            statusIdList?: string[];
            /** @description Assigner id list */
            assignerUserIdList?: string[];
            /** @description Assigner id exclude list */
            assignerUserIdExcludeList?: string[];
            /** @description Reporter id list */
            createdByUserIdList?: string[];
            /** @description Reporter id exclude list */
            createdByUserIdExcludeList?: string[];
            /** @description External id list */
            externalIdList?: string[];
            /** @description External id exclude list */
            externalIdExcludeList?: string[];
            /** @description Include dst twins with given links. OR join */
            linksAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Exclude dst twins with given links. OR join */
            linksNoAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Include dst twins with given links. AND join */
            linksAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Exclude dst twins with given links. AND join */
            linksNoAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Hierarchy ids filter */
            hierarchyTreeContainsIdList?: string[];
            /** @description Twin status exclude list */
            statusIdExcludeList?: string[];
            /** @description Twin tag list(data list options ids) */
            tagDataListOptionIdList?: string[];
            /** @description Twin tag exclude list(data list options ids) */
            tagDataListOptionIdExcludeList?: string[];
            /** @description Twin marker list(data list options ids) */
            markerDataListOptionIdList?: string[];
            /** @description Twin marker exclude list(data list options ids) */
            markerDataListOptionIdExcludeList?: string[];
            /** @description Twin extends by twin class list ids */
            twinClassExtendsHierarchyContainsIdList?: string[];
            /** @description Head twin class list ids */
            headTwinClassIdList?: string[];
            /** @description Twin touch list ids */
            touchList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
            /** @description Twin touch exclude list ids */
            touchExcludeList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
            /**
             * @description Twin Field Search. Key TwinClassField id.
             * @example {
             *       "550e8400-e29b-41d4-a716-446655440000": {
             *         "type": "TwinFieldSearchNumericV1",
             *         "lessThen": "10",
             *         "moreThen": "5",
             *         "equals": "7"
             *       },
             *       "550e8400-e29b-41d4-a716-446655440001": {
             *         "type": "TwinFieldSearchTextV1",
             *         "valueLikeAllOfList": [
             *           "test%"
             *         ]
             *       }
             *     }
             */
            fields?: {
                [key: string]: components["schemas"]["TwinFieldSearchDTOv1"];
            };
            /** @description Head twin sub-search */
            headSearch?: components["schemas"]["TwinSearchV1"];
            /** @description Children twin sub-search */
            childrenSearch?: components["schemas"]["TwinSearchV1"];
        };
        TwinSearchByAliasBatchRqV1: {
            /** @description Search alias ref alias request body(TwinSearchByAliasRqV1) */
            searchMap?: {
                [key: string]: components["schemas"]["TwinSearchByAliasRqV1"];
            };
        };
        TwinSearchBatchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description Map { frontendId / count } */
            response?: {
                [key: string]: number;
            };
        };
        TwinSearchRqV1: {
            /** @description Twin class id list */
            twinClassIdList?: string[];
            /** @description Twin class id exclude list */
            twinClassIdExcludeList?: string[];
            /** @description Twin name like list */
            twinNameLikeList?: string[];
            /** @description Twin name not like list */
            twinNameNotLikeList?: string[];
            /** @description Twin description like list */
            descriptionLikeList?: string[];
            /** @description Twin description not like list */
            descriptionNotLikeList?: string[];
            /** @description Head twin id list */
            headTwinIdList?: string[];
            /** @description Twin id list */
            twinIdList?: string[];
            /** @description Twin id exclude list */
            twinIdExcludeList?: string[];
            /** @description Status id list */
            statusIdList?: string[];
            /** @description Assigner id list */
            assignerUserIdList?: string[];
            /** @description Assigner id exclude list */
            assignerUserIdExcludeList?: string[];
            /** @description Reporter id list */
            createdByUserIdList?: string[];
            /** @description Reporter id exclude list */
            createdByUserIdExcludeList?: string[];
            /** @description External id list */
            externalIdList?: string[];
            /** @description External id exclude list */
            externalIdExcludeList?: string[];
            /** @description Include dst twins with given links. OR join */
            linksAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Exclude dst twins with given links. OR join */
            linksNoAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Include dst twins with given links. AND join */
            linksAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Exclude dst twins with given links. AND join */
            linksNoAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
            /** @description Hierarchy ids filter */
            hierarchyTreeContainsIdList?: string[];
            /** @description Twin status exclude list */
            statusIdExcludeList?: string[];
            /** @description Twin tag list(data list options ids) */
            tagDataListOptionIdList?: string[];
            /** @description Twin tag exclude list(data list options ids) */
            tagDataListOptionIdExcludeList?: string[];
            /** @description Twin marker list(data list options ids) */
            markerDataListOptionIdList?: string[];
            /** @description Twin marker exclude list(data list options ids) */
            markerDataListOptionIdExcludeList?: string[];
            /** @description Twin extends by twin class list ids */
            twinClassExtendsHierarchyContainsIdList?: string[];
            /** @description Head twin class list ids */
            headTwinClassIdList?: string[];
            /** @description Twin touch list ids */
            touchList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
            /** @description Twin touch exclude list ids */
            touchExcludeList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
            /**
             * @description Twin Field Search. Key TwinClassField id.
             * @example {
             *       "550e8400-e29b-41d4-a716-446655440000": {
             *         "type": "TwinFieldSearchNumericV1",
             *         "lessThen": "10",
             *         "moreThen": "5",
             *         "equals": "7"
             *       },
             *       "550e8400-e29b-41d4-a716-446655440001": {
             *         "type": "TwinFieldSearchTextV1",
             *         "valueLikeAllOfList": [
             *           "test%"
             *         ]
             *       }
             *     }
             */
            fields?: {
                [key: string]: components["schemas"]["TwinFieldSearchDTOv1"];
            };
            /** @description Head twin sub-search */
            headSearch?: components["schemas"]["TwinSearchV1"];
            /** @description Children twin sub-search */
            childrenSearch?: components["schemas"]["TwinSearchV1"];
        };
        TwinSearchBatchRqV1: {
            /**
             * @description Map of { frontendId / TwinSearchRqV1 }
             * @example {
             *       "id1": {
             *         "twinClassIdList": [
             *           "ab750e98-70dd-404e-8164-4e0daa187164"
             *         ]
             *       },
             *       "id2": {
             *         "twinClassIdList": [
             *           "ab750e98-70dd-404e-8164-4e0daa187164"
             *         ]
             *       }
             *     }
             */
            searchMap?: {
                [key: string]: components["schemas"]["TwinSearchRqV1"];
            };
        };
        DataTimeRangeV1: {
            /**
             * Format: date-time
             * @description data time form
             * @example 2023-09-13T09:32:08
             */
            from?: string;
            /**
             * Format: date-time
             * @description data time to
             * @example 2023-09-13T09:32:08
             */
            to?: string;
        };
        HistorySearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description twin id list */
            twinIdList?: string[];
            /** @description twin id exclude list */
            twinIdExcludeList?: string[];
            /**
             * @description need include direct children
             * @example true
             */
            includeDirectChildren?: boolean;
            /** @description actor user id list */
            actorUseridList?: string[];
            /** @description actor user id exclude list */
            actorUserIdExcludeList?: string[];
            /** @description type list */
            typeList?: ("twinCreated" | "headChanged" | "statusChanged" | "nameChanged" | "descriptionChanged" | "createdByChanged" | "assigneeChanged" | "ownerChanged" | "externalIdChanged" | "fieldCreated" | "fieldChanged" | "fieldDeleted" | "markerChanged" | "tagChanged" | "attachmentCreate" | "attachmentDelete" | "attachmentUpdate" | "linkCreated" | "linkUpdated" | "linkDeleted" | "twinDeleted" | "unknown")[];
            /** @description type exclude list */
            typeExcludeList?: ("twinCreated" | "headChanged" | "statusChanged" | "nameChanged" | "descriptionChanged" | "createdByChanged" | "assigneeChanged" | "ownerChanged" | "externalIdChanged" | "fieldCreated" | "fieldChanged" | "fieldDeleted" | "markerChanged" | "tagChanged" | "attachmentCreate" | "attachmentDelete" | "attachmentUpdate" | "linkCreated" | "linkUpdated" | "linkDeleted" | "twinDeleted" | "unknown")[];
            /** @description create at */
            createdAt?: components["schemas"]["DataTimeRangeV1"];
        };
        HistorySearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description history list */
            histories?: components["schemas"]["HistoryV1"][];
        };
        HistoryV1: {
            /**
             * Format: uuid
             * @description id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            id?: string;
            /**
             * Format: uuid
             * @description twinId
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            twinId?: string;
            /**
             * Format: uuid
             * @description changes batch id
             */
            batchId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description history actor id
             */
            actorUserId?: string;
            /** @enum {string} */
            type?: "twinCreated" | "headChanged" | "statusChanged" | "nameChanged" | "descriptionChanged" | "createdByChanged" | "assigneeChanged" | "ownerChanged" | "externalIdChanged" | "fieldCreated" | "fieldChanged" | "fieldDeleted" | "markerChanged" | "tagChanged" | "attachmentCreate" | "attachmentDelete" | "attachmentUpdate" | "linkCreated" | "linkUpdated" | "linkDeleted" | "twinDeleted" | "unknown";
            /** @description Filled only if type = fieldChanged */
            fieldName?: string;
            /** @description twin */
            twin?: components["schemas"]["TwinBaseV2"];
            /** @description actor */
            actorUser?: components["schemas"]["UserV1"];
            /** @description Detailed description for history item. Contains markdown */
            changeDescription?: string;
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
        };
        TwinDeleteRqV1: {
            /** @description twin set id list */
            twinIds?: string[];
        };
        TwinBatchCreateRqV1: {
            /** @description twin list */
            twins?: components["schemas"]["TwinCreateRqV2"][];
        };
        TwinBasicFieldsV1: {
            /**
             * Format: uuid
             * @description assignee user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            assigneeUserId?: string;
            /**
             * Format: uuid
             * @description created by user_id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            createdByUserId?: string;
            name?: string;
            description?: string;
        };
        TwinLinkCudV1: {
            /** @description TwinLinks for adding */
            create?: components["schemas"]["TwinLinkAddV1"][];
            /** @description TwinLinks for updating */
            update?: components["schemas"]["TwinLinkUpdateV1"][];
            /** @description TwinLinks id list for deleting */
            delete?: string[];
        };
        TwinTransitionContextV1: {
            /** @description fields */
            fields?: {
                [key: string]: string;
            };
            /** @description Attachments for create/update/delete */
            attachments?: components["schemas"]["AttachmentCudV1"];
            /** @description TwinLinks for create/update/delete */
            twinLinks?: components["schemas"]["TwinLinkCudV1"];
            /** @description list of twins, that must be created during transition */
            newTwins?: components["schemas"]["TwinCreateRqV2"][];
            /** @description list of basic twin fields */
            basics?: components["schemas"]["TwinBasicFieldsV1"];
        };
        TwinTransitionPerformRqV1: {
            /**
             * Format: uuid
             * @description Target twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            twinId?: string;
            comment?: string;
            /** @description some extra data to perform transition */
            context?: components["schemas"]["TwinTransitionContextV1"];
        };
        /** @description On of values */
        TwinTransitionPerformResultDTO: {
            /** @description discriminator */
            resultType: string;
        };
        TwinTransitionPerformResultMajorRsV1: Omit<WithRequired<components["schemas"]["TwinTransitionPerformResultDTO"], "resultType">, "resultType"> & {
            /** @description draft */
            draft?: components["schemas"]["DraftV1"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            resultType: "multiUserV1";
        };
        TwinTransitionPerformResultMinorRsV1: Omit<WithRequired<components["schemas"]["TwinTransitionPerformResultDTO"], "resultType">, "resultType"> & {
            /** @description list of twins from input */
            transitionedTwinList?: components["schemas"]["TwinV2"][];
            /** @description list of twins processed by transition (some new can be created or updated). Key is twinClassId */
            processedTwinList?: {
                [key: string]: components["schemas"]["TwinV2"][];
            };
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            resultType: "userV1";
        };
        TwinTransitionPerformRsV2: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description major/minor result */
            result?: components["schemas"]["TwinTransitionPerformResultMajorRsV1"] | components["schemas"]["TwinTransitionPerformResultMinorRsV1"];
        };
        TwinTransitionPerformRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description list of twins from input */
            transitionedTwinList?: components["schemas"]["TwinV2"][];
            /** @description list of twins processed by transition (some new can be created or updated). Key is twinClassId */
            processedTwinList?: {
                [key: string]: components["schemas"]["TwinV2"][];
            };
        };
        TwinTransitionPerformBatchRqV1: {
            twinIdList?: string[];
            batchComment?: string;
            /** @description some extra data to perform transition */
            batchContext?: components["schemas"]["TwinTransitionContextV1"];
        };
        TwinTransitionDraftRqV1: {
            /**
             * Format: uuid
             * @description Target twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            twinId?: string;
            comment?: string;
            /** @description some extra data to draft transition */
            context?: components["schemas"]["TwinTransitionContextV1"];
        };
        TwinTransitionDraftRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description transition draft. It can be browsed and commited */
            transitionDraft?: components["schemas"]["DraftV1"];
        };
        TwinTransitionDraftBatchRqV1: {
            twinIdList?: string[];
            batchComment?: string;
            /** @description some extra data to perform transition */
            batchContext?: components["schemas"]["TwinTransitionContextV1"];
        };
        TransitionAliasSearchRqV1: {
            /** @description transition alias id */
            idList?: string[];
            /** @description transition alias id exclude */
            idExcludeList?: string[];
            /** @description alias like list */
            aliasLikeList?: string[];
            /** @description alias not like list */
            aliasNotLikeList?: string[];
        };
        TransitionAliasSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description transition alias list */
            aliasList?: components["schemas"]["TransitionAliasV1"][];
        };
        TransitionAliasV1: {
            /**
             * Format: uuid
             * @description id
             * @example da755c8a-248f-4e4f-978a-6474e41c8dca
             */
            id?: string;
            /**
             * @description alias
             * @example start
             */
            alias?: string;
            /**
             * Format: int32
             * @description usages count
             * @example 3
             */
            usagesCount?: number;
        };
        TransitionUpdateRqV1: {
            /** @description I18n name */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description I18n description */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * Format: uuid
             * @description [optional] src status id. if null - from any status transition
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            srcStatusId?: string;
            /**
             * Format: uuid
             * @description dst status is required
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            dstStatusId?: string;
            /**
             * @description [optional] uniq alias inside twinflow
             * @example start
             */
            alias?: string;
            /**
             * Format: uuid
             * @description [optional] some permission required to run transition
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description Inbuilt TwinFactory Id
             */
            inbuiltTwinFactoryId?: string;
            /**
             * Format: uuid
             * @description Drafting TwinFactory Id
             */
            draftingTwinFactoryId?: string;
            /**
             * @description twinflow transition type id
             * @example STATUS_CHANGE
             * @enum {string}
             */
            twinflowTransitionTypeId?: "STATUS_CHANGE" | "OPERATION";
            /** @description validator rules cud operations */
            validatorRules?: components["schemas"]["ValidatorCudV1"];
            /** @description triggers cud operations */
            triggers?: components["schemas"]["TriggerCudV1"];
        };
        TriggerCreateV1: {
            /**
             * Format: int32
             * @description order
             */
            order?: number;
            /**
             * Format: int32
             * @description trigger featurer id
             */
            triggerFeaturerId?: number;
            /** @description featurer params */
            triggerParams?: {
                [key: string]: string;
            };
            /** @description active */
            active?: boolean;
        };
        TriggerCudV1: {
            /** @description triggers create list */
            create?: components["schemas"]["TriggerCreateV1"][];
            /** @description triggers update list */
            update?: components["schemas"]["TriggerUpdateV1"][];
            /** @description triggers ids list to deletes */
            delete?: string[];
        };
        TriggerUpdateV1: {
            /**
             * Format: int32
             * @description order
             */
            order?: number;
            /**
             * Format: int32
             * @description trigger featurer id
             */
            triggerFeaturerId?: number;
            /** @description featurer params */
            triggerParams?: {
                [key: string]: string;
            };
            /** @description active */
            active?: boolean;
            /**
             * Format: uuid
             * @description id
             * @example 9d956a15-6858-40ba-b0aa-b123c54e250d
             */
            id?: string;
            /** @description trigger featurer */
            triggerFeaturer?: components["schemas"]["FeaturerV1"];
        };
        ValidatorCreateV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /**
             * Format: int32
             * @description order
             */
            order?: number;
            /** @description active */
            active?: boolean;
            /**
             * Format: uuid
             * @description grouped set of twin validators id
             */
            twinValidatorSetId?: string;
            /** @description Twin validator list */
            twinValidators?: components["schemas"]["TwinValidatorBaseV1"][];
            /** @description grouping set of twin validator */
            twinValidatorSet?: components["schemas"]["TwinValidatorSetBaseV1"];
            /**
             * Format: uuid
             * @description twinflow transition id
             */
            twinflowTransitionId?: string;
        };
        ValidatorCudV1: {
            /** @description validators create list */
            create?: components["schemas"]["ValidatorCreateV1"][];
            /** @description validators update list */
            update?: components["schemas"]["ValidatorUpdateV1"][];
            /** @description validators ids list to deletes */
            delete?: string[];
        };
        ValidatorUpdateV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /**
             * Format: int32
             * @description order
             */
            order?: number;
            /** @description active */
            active?: boolean;
            /**
             * Format: uuid
             * @description grouped set of twin validators id
             */
            twinValidatorSetId?: string;
            /** @description Twin validator list */
            twinValidators?: components["schemas"]["TwinValidatorBaseV1"][];
            /** @description grouping set of twin validator */
            twinValidatorSet?: components["schemas"]["TwinValidatorSetBaseV1"];
            /**
             * Format: uuid
             * @description twinflow transition id
             */
            twinflowTransitionId?: string;
        };
        TwinflowTransitionUpdateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description result - twinflow transition */
            transition?: components["schemas"]["TwinflowTransitionBaseV2"];
        };
        TransitionSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description name like list */
            nameLikeList?: string[];
            /** @description name not like list */
            nameNotLikeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /** @description twin class id map */
            twinClassIdMap?: {
                [key: string]: boolean;
            };
            /** @description twin class id exclude map */
            twinClassIdExcludeMap?: {
                [key: string]: boolean;
            };
            /** @description twinflow id list */
            twinflowIdList?: string[];
            /** @description twinflow id exclude list */
            twinflowIdExcludeList?: string[];
            /** @description source status id list */
            srcStatusIdList?: string[];
            /** @description source status id exclude list */
            srcStatusIdExcludeList?: string[];
            /** @description destination status id list */
            dstStatusIdList?: string[];
            /** @description destination status id exclude list */
            dstStatusIdExcludeList?: string[];
            /** @description alias like list */
            aliasLikeList?: string[];
            /** @description permission id list */
            permissionIdList?: string[];
            /** @description permission id exclude list */
            permissionIdExcludeList?: string[];
            /** @description inbuilt twin factory id list */
            inbuiltTwinFactoryIdList?: string[];
            /** @description inbuilt twin factory id exclude list */
            inbuiltTwinFactoryIdExcludeList?: string[];
            /** @description drafting twin factory id list */
            draftingTwinFactoryIdList?: string[];
            /** @description drafting twin factory id exclude list */
            draftingTwinFactoryIdExcludeList?: string[];
            /** @description twinflow transition type id list */
            twinflowTransitionTypeList?: ("STATUS_CHANGE" | "OPERATION")[];
            /** @description twinflow transition type id exclude list */
            twinflowTransitionTypeExcludeList?: ("STATUS_CHANGE" | "OPERATION")[];
        };
        TransitionSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - transition list */
            transition?: components["schemas"]["TwinflowTransitionBaseV2"][];
        };
        TierCreateRqV1: {
            /** @description tier create */
            tier?: components["schemas"]["TierCreateV1"];
        };
        TierCreateV1: {
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description custom
             * @example true
             */
            custom?: boolean;
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description twinflow schema id
             * @example 2c618b09-e8dc-4712-a433-2e18915ee70d
             */
            twinflowSchemaId?: string;
            /**
             * Format: uuid
             * @description twinclass schema id
             * @example 8b9ea6ad-2b9b-4a4a-8ea9-1b17da4d603b
             */
            twinClassSchemaId?: string;
            /**
             * Format: int32
             * @description attachments storage quota count
             * @example 3
             */
            attachmentsStorageQuotaCount?: number;
            /**
             * Format: int64
             * @description attachments storage quota size
             * @example 3
             */
            attachmentsStorageQuotaSize?: number;
            /**
             * Format: int32
             * @description user count quota
             * @example 3
             */
            userCountQuota?: number;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
        };
        TierRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - tier */
            tier?: components["schemas"]["TierV2"];
        };
        TierV2: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /**
             * Format: uuid
             * @description permission schema id
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description twinflow schema id
             */
            twinflowSchemaId?: string;
            /**
             * Format: uuid
             * @description twinclass schema id
             */
            twinClassSchemaId?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /** @description custom */
            custom?: boolean;
            /**
             * Format: int32
             * @description attachments storage quota count
             */
            attachmentsStorageQuotaCount?: number;
            /**
             * Format: int64
             * @description attachments storage quota size
             */
            attachmentsStorageQuotaSize?: number;
            /**
             * Format: int32
             * @description user count quota
             */
            userCountQuota?: number;
            /**
             * Format: date-time
             * @description created at
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description updated at
             */
            updatedAt?: string;
            /** @description permission schema */
            permissionSchema?: components["schemas"]["PermissionSchemaV1"];
            /** @description twinflow schema */
            twinflowSchema?: components["schemas"]["TwinflowSchemaV1"];
            /** @description twin class schema */
            twinClassSchema?: components["schemas"]["TwinClassSchemaV1"];
        };
        LongRangeDTOv1: {
            /**
             * Format: int64
             * @description from
             */
            from?: number;
            /**
             * Format: int64
             * @description to
             */
            to?: number;
        };
        TierSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description permission schema id list */
            permissionSchemaIdList?: string[];
            /** @description permission schema id exclude list */
            permissionSchemaIdExcludeList?: string[];
            /** @description twinflow schema id list */
            twinflowSchemaIdList?: string[];
            /** @description twinflow schema id exclude list */
            twinflowSchemaIdExcludeList?: string[];
            /** @description twinclass schema id list */
            twinclassSchemaIdList?: string[];
            /** @description twinclass schema id exclude list */
            twinclassSchemaIdExcludeList?: string[];
            /** @description name like list */
            nameLikeList?: string[];
            /** @description name not like list */
            nameNotLikeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /** @description attachments storage quota count range */
            attachmentsStorageQuotaCountRange?: components["schemas"]["LongRangeDTOv1"];
            /** @description attachments storage quota size range */
            attachmentsStorageQuotaSizeRange?: components["schemas"]["LongRangeDTOv1"];
            /** @description user count quota range */
            userCountQuotaRange?: components["schemas"]["LongRangeDTOv1"];
            /**
             * @description custom
             * @enum {string}
             */
            custom?: "ONLY" | "ONLY_NOT" | "ANY";
        };
        TierSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description tiers */
            tiers?: components["schemas"]["TierV2"][];
        };
        SpaceRoleSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description twin class id list */
            twinClassIdList?: string[];
            /** @description twin class id exclude list */
            twinClassIdExcludeList?: string[];
            /** @description business account id list */
            businessAccountIdList?: string[];
            /** @description business account id exclude list */
            businessAccountIdExcludeList?: string[];
            /** @description key like list */
            keyLikeList?: string[];
            /** @description key not like list */
            keyNotLikeList?: string[];
            /** @description name i18n like list */
            nameI18nLikeList?: string[];
            /** @description name i18n not like list */
            nameI18nNotLikeList?: string[];
            /** @description description i18n like list */
            descriptionI18nLikeList?: string[];
            /** @description description i18n not like list */
            descriptionI18nNotLikeList?: string[];
        };
        SpaceRoleSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description permission list */
            spaceRoles?: components["schemas"]["SpaceRoleV2"][];
        };
        UserRefSpaceRoleSearchV1: {
            /**
             * @description Filter by user name, case ignore
             * @example st Us
             */
            userNameLike?: string;
            /**
             * @description Filter by specific roles(uuids)
             * @example [
             *       "793e3120-e14a-4a22-ab09-060b9fedee35"
             *     ]
             */
            spaceRolesIdList?: string[];
            /**
             * @description Filter users from specific group
             * @example [
             *       "e155e05b-f353-49ff-9869-da1e62aab179"
             *     ]
             */
            userGroupIdList?: string[];
        };
        UserWithinSpaceRolesListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description space role list */
            usersRefSpaceRolesList?: components["schemas"]["UserWithinSpaceRolesRsV1"][];
        };
        UserWithinSpaceRolesRsV1: {
            /**
             * Format: uuid
             * @description user id
             */
            userId?: string;
            /** @description user */
            user?: components["schemas"]["UserV1"];
            /** @description space role list */
            spaceRoleList?: components["schemas"]["SpaceRoleV2"][];
            /** @description spaceRoleIds list. Will be filled only in lazyRelations mode is false */
            spaceRoleIdsList?: string[];
        };
        SpaceRoleUserOverrideRqV1: {
            /** @description space role user list */
            spaceRoleUserList?: string[];
        };
        UserListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description user list */
            userList?: components["schemas"]["UserV1"][];
        };
        SpaceRoleUserRqV1: {
            spaceRoleUserEnterList?: string[];
            spaceRoleUserExitList?: string[];
        };
        PermissionSchemaSearchRqV1: {
            /** @description id List */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description name like list */
            nameLikeList?: string[];
            /** @description name not like list */
            nameNotLikeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /** @description business account id list */
            businessAccountIdList?: string[];
            /** @description business account id exclude list */
            businessAccountIdExcludeList?: string[];
            /** @description created by user id list */
            createdByUserIdList?: string[];
            /** @description created by user id exclude list */
            createdByUserIdExcludeList?: string[];
        };
        PermissionSchemaSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description permission schema list */
            permissionSchemas?: components["schemas"]["PermissionSchemaV2"][];
        };
        PermissionGroupSearchRqV1: {
            /**
             * @description id list
             * @example 7efd9df0-cae7-455f-a721-eaec455105a4
             */
            idList?: string[];
            /**
             * @description id exclude list
             * @example 7efd9df0-cae7-455f-a721-eaec455105a4
             */
            idExcludeList?: string[];
            /**
             * @description twin class id exclude list
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassIdList?: string[];
            /**
             * @description twin class id exclude list
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassIdExcludeList?: string[];
            /**
             * @description key like list
             * @example LOCAL_PERMISSION
             */
            keyLikeList?: string[];
            /**
             * @description key not like list
             * @example LOCAL_PERMISSION
             */
            keyNotLikeList?: string[];
            /**
             * @description name like list
             * @example Some name
             */
            nameLikeList?: string[];
            /**
             * @description name not like list
             * @example Some name
             */
            nameNotLikeList?: string[];
            /**
             * @description description like list
             * @example Some description
             */
            descriptionLikeList?: string[];
            /**
             * @description description not like list
             * @example Some description
             */
            descriptionNotLikeList?: string[];
            /**
             * @description show system group
             * @example true
             */
            showSystemGroups?: boolean;
        };
        PermissionGroupSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description permission group list */
            permissionGroups?: components["schemas"]["PermissionGroupV1"][];
        };
        PermissionGrantUserGroupCreateRqV1: {
            /** @description permission grant user group */
            permissionGrantUserGroup?: components["schemas"]["PermissionGrantUserGroupCreateV1"];
        };
        PermissionGrantUserGroupCreateV1: {
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description user group id
             * @example e155e05b-f353-49ff-9869-da1e62aab1793
             */
            userGroupId?: string;
        };
        PermissionGrantUserGroupSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description permission schema id list */
            permissionSchemaIdList?: string[];
            /** @description permission schema id exclude list */
            permissionSchemaIdExcludeList?: string[];
            /** @description permission id list */
            permissionIdList?: string[];
            /** @description permission id exclude list */
            permissionIdExcludeList?: string[];
            /** @description user group id list */
            userGroupIdList?: string[];
            /** @description user group id exclude list */
            userGroupIdExcludeList?: string[];
            /** @description granted by user id list */
            grantedByUserIdList?: string[];
            /** @description granted by user id exclude list */
            grantedByUserIdExcludeList?: string[];
        };
        PermissionGrantUserGroupSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - permission grant user-group list */
            permissionGrantUserGroups?: components["schemas"]["PermissionGrantUserGroupV2"][];
        };
        PermissionGrantUserViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description permission grant user */
            permissionGrantUser?: components["schemas"]["PermissionGrantUserV2"];
        };
        PermissionGrantUserCreateRqV1: {
            /** @description permission grant user */
            permissionGrantUser?: components["schemas"]["PermissionGrantUserCreateV1"];
        };
        PermissionGrantUserCreateV1: {
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description business account id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            businessAccountId?: string;
            /**
             * Format: uuid
             * @description user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            userId?: string;
        };
        PermissionGrantUserSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description permission id list */
            permissionIdList?: string[];
            /** @description permission id exclude list */
            permissionIdExcludeList?: string[];
            /** @description permission schema id list */
            permissionSchemaIdList?: string[];
            /** @description permission schema id exclude list */
            permissionSchemaIdExcludeList?: string[];
            /** @description user id list */
            userIdList?: string[];
            /** @description user id exclude list */
            userIdExcludeList?: string[];
            /** @description granted by user id list */
            grantedByUserIdList?: string[];
            /** @description granted by user id exclude list */
            grantedByUserIdExcludeList?: string[];
        };
        PermissionGrantUserSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description permission grant user list */
            permissionGrantUsers?: components["schemas"]["PermissionGrantUserV2"][];
        };
        PermissionGrantTwinRoleCreateRqV1: {
            /** @description permission grant twin role create */
            permissionGrantTwinRole?: components["schemas"]["PermissionGrantTwinRoleCreateV1"];
        };
        PermissionGrantTwinRoleCreateV1: {
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /**
             * @description twin role
             * @example assignee
             * @enum {string}
             */
            twinRole?: "assignee" | "creator" | "watcher" | "space_assignee" | "space_creator";
        };
        PermissionGrantTwinRoleSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description permission schema id list */
            permissionSchemaIdList?: string[];
            /** @description permission schema id exclude list */
            permissionSchemaIdExcludeList?: string[];
            /** @description permission id list */
            permissionIdList?: string[];
            /** @description permission id exclude list */
            permissionIdExcludeList?: string[];
            /** @description twin class id list */
            twinClassIdList?: string[];
            /** @description twin class id exclude list */
            twinClassIdExcludeList?: string[];
            /** @description twin role list */
            twinRoleList?: ("assignee" | "creator" | "watcher" | "space_assignee" | "space_creator")[];
            /** @description twin role exclude list */
            twinRoleExcludeList?: ("assignee" | "creator" | "watcher" | "space_assignee" | "space_creator")[];
            /** @description granted by user id list */
            grantedByUserIdList?: string[];
            /** @description granted by user id exclude list */
            grantedByUserIdExcludeList?: string[];
        };
        PermissionGrantTwinRoleSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - permission grant twin role list */
            permissionGrantTwinRoles?: components["schemas"]["PermissionGrantTwinRoleV1"][];
        };
        PermissionGrantSpaceRoleCreateRqV1: {
            /** @description permission grant space role create */
            permissionGrantSpaceRole?: components["schemas"]["PermissionGrantSpaceRoleCreateV1"];
        };
        PermissionGrantSpaceRoleCreateV1: {
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description space role id
             * @example d74c3adc-c83c-4b55-92ca-cf570598296a
             */
            spaceRoleId?: string;
        };
        PermissionGrantSpaceRoleSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description permission schema id list */
            permissionSchemaIdList?: string[];
            /** @description permission schema id exclude list */
            permissionSchemaIdExcludeList?: string[];
            /** @description permission id list */
            permissionIdList?: string[];
            /** @description permission id exclude list */
            permissionIdExcludeList?: string[];
            /** @description space role id list */
            spaceRoleIdList?: string[];
            /** @description space role id exclude list */
            spaceRoleIdExcludeList?: string[];
            /** @description granted by user id list */
            grantedByUserIdList?: string[];
            /** @description granted by user id exclude list */
            grantedByUserIdExcludeList?: string[];
        };
        PermissionGrantSpaceRoleSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - permission grant space role list */
            permissionGrantSpaceRoles?: components["schemas"]["PermissionGrantSpaceRoleV2"][];
        };
        PermissionGrantAssigneePropagationCreateRqV1: {
            /** @description permission grant assignee propagation create */
            permissionGrantAssigneePropagation?: components["schemas"]["PermissionGrantAssigneePropagationCreateV1"];
        };
        PermissionGrantAssigneePropagationCreateV1: {
            /**
             * Format: uuid
             * @description permission schema id
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description permission id
             * @example abdeef68-7d6d-4385-9906-e3b701d2c503
             */
            permissionId?: string;
            /**
             * Format: uuid
             * @description propagation by twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            propagationByTwinClassId?: string;
            /**
             * Format: uuid
             * @description propagation by twin status id
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            propagationByTwinStatusId?: string;
            /**
             * @description is space only
             * @example true
             */
            inSpaceOnly?: boolean;
        };
        PermissionGrantAssigneePropagationSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description permission schema id list */
            permissionSchemaIdList?: string[];
            /** @description permission schema id exclude list */
            permissionSchemaIdExcludeList?: string[];
            /** @description permission id list */
            permissionIdList?: string[];
            /** @description permission id exclude list */
            permissionIdExcludeList?: string[];
            /** @description propagation twin class id list */
            propagationTwinClassIdList?: string[];
            /** @description propagation twin class id exclude list */
            propagationTwinClassIdExcludeList?: string[];
            /** @description propagation twin status id list */
            propagationTwinStatusIdList?: string[];
            /** @description propagation twin status id exclude list */
            propagationTwinStatusIdExcludeList?: string[];
            /** @description granted by user id list */
            grantedByUserIdList?: string[];
            /** @description granted by user id exclude list */
            grantedByUserIdExcludeList?: string[];
        };
        PermissionGrantAssigneePropagationSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - permission assignee propagation list */
            permissionGrantAssigneePropagations?: components["schemas"]["PermissionGrantAssigneePropagationV2"][];
        };
        PermissionUpdateRqV1: {
            /**
             * @description [optional] name
             * @example Some name
             */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description [optional] description
             * @example Some description
             */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description key
             * @example DENY_ALL
             */
            key?: string;
            /**
             * Format: uuid
             * @description group id
             * @example 7efd9df0-cae7-455f-a721-eaec455105a4
             */
            groupId?: string;
        };
        PermissionUpdateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description permission */
            permission?: components["schemas"]["PermissionV1"];
        };
        PermissionCreateRqV1: {
            /**
             * @description [optional] name
             * @example Some name
             */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description [optional] description
             * @example Some description
             */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description key
             * @example DENY_ALL
             */
            key?: string;
            /**
             * Format: uuid
             * @description group id
             * @example 7efd9df0-cae7-455f-a721-eaec455105a4
             */
            groupId?: string;
        };
        PermissionCreateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description permission */
            permission?: components["schemas"]["PermissionV1"];
        };
        PermissionSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description key like list */
            keyLikeList?: string[];
            /** @description ley not like list */
            keyNotLikeList?: string[];
            /** @description name like list */
            nameLikeList?: string[];
            /** @description name not like list */
            nameNotLikeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /** @description group id list */
            groupIdList?: string[];
            /** @description group id exclude list */
            groupIdExcludeList?: string[];
        };
        PermissionSearchRsV2: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description permission list */
            permissions?: components["schemas"]["PermissionV2"][];
        };
        LinkCreateV1: {
            /** @description Forward name i18n (if target twin-class as src) */
            forwardNameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description Backward name i18n (if target twin-class as dst) */
            backwardNameI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description Link type (Many-to-one, Many-to-many, One-to-one)
             * @enum {string}
             */
            type?: "ManyToOne" | "ManyToMany" | "OneToOne";
            /**
             * @description Link strength (MANDATORY, OPTIONAL, OPTIONAL_BUT_DELETE_CASCADE)
             * @enum {string}
             */
            linkStrength?: "MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE";
            /**
             * Format: int32
             * @description [optional] an id of linker featurer
             */
            linkerFeaturerId?: number;
            /** @description [optional] linker featurer params */
            linkerParams?: {
                [key: string]: string;
            };
            /**
             * Format: uuid
             * @description Source twin class id
             */
            srcTwinClassId?: string;
            /**
             * Format: uuid
             * @description Destination twin class id
             */
            dstTwinClassId?: string;
        };
        LinkCreateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description link */
            link?: components["schemas"]["LinkV3"];
        };
        LinkSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description src twin class id list */
            srcTwinClassIdList?: string[];
            /** @description src twin class id exclude list */
            srcTwinClassIdExcludeList?: string[];
            /** @description dst twin class id list */
            dstTwinClassIdList?: string[];
            /** @description dst twin class id exclude list */
            dstTwinClassIdExcludeList?: string[];
            /** @description src or dst twin class id list */
            srcOrDstTwinClassIdList?: string[];
            /** @description src or dst twin class id exclude list */
            srcOrDstTwinClassIdExcludeList?: string[];
            /** @description forward name like list */
            forwardNameLikeList?: string[];
            /** @description forward name not like list */
            forwardNameNotLikeList?: string[];
            /** @description backward name like list */
            backwardNameLikeList?: string[];
            /** @description backward name not like list */
            backwardNameNotLikeList?: string[];
            /** @description type like list */
            typeLikeList?: ("ManyToOne" | "ManyToMany" | "OneToOne")[];
            /** @description type not like list */
            typeNotLikeList?: ("ManyToOne" | "ManyToMany" | "OneToOne")[];
            /** @description strength like list */
            strengthLikeList?: ("MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE")[];
            /** @description strength not like list */
            strengthNotLikeList?: ("MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE")[];
        };
        LinkSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - link list */
            links?: components["schemas"]["LinkV3"][];
        };
        I18nTranslationSearchV1: {
            /** @description i18n id list */
            i18nIdList?: string[];
            /** @description i18n id exclude list */
            i18nIdExcludeList?: string[];
            /** @description translation like list */
            translationLikeList?: string[];
            /** @description translation not like list */
            translationNotLikeList?: string[];
            /** @description locale like list */
            localeLikeList?: string[];
            /** @description locale not like list */
            localeNotLikeList?: string[];
            /** @description usage counter */
            usageCounter?: components["schemas"]["LongRange"];
        };
        LongRange: {
            /** Format: int64 */
            from?: number;
            /** Format: int64 */
            to?: number;
        };
        FeaturerSearchRqV1: {
            /** @description ids list */
            idList?: number[];
            /** @description type ids list */
            typeIdList?: number[];
            /** @description names list */
            nameLikeList?: string[];
        };
        FeaturerSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description featurer list */
            featurerList?: components["schemas"]["FeaturerV1"][];
        };
        FactoryPipelineStepSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description factory id list */
            factoryIdList?: string[];
            /** @description factory id exclude list */
            factoryIdExcludeList?: string[];
            /** @description factory pipeline id list */
            factoryPipelineIdList?: string[];
            /** @description factory pipeline id exclude list */
            factoryPipelineIdExcludeList?: string[];
            /** @description factory condition set id list */
            factoryConditionSetIdList?: string[];
            /** @description factory condition set id exclude list */
            factoryConditionSetIdExcludeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /** @description filler featurer id list */
            fillerFeaturerIdList?: number[];
            /** @description filler featurer id exclude list */
            fillerFeaturerIdExcludeList?: number[];
            /**
             * @description condition invert
             * @example ANY
             * @enum {string}
             */
            conditionInvert?: "ONLY" | "ONLY_NOT" | "ANY";
            /**
             * @description active
             * @example ANY
             * @enum {string}
             */
            active?: "ONLY" | "ONLY_NOT" | "ANY";
            /**
             * @description optional
             * @example ANY
             * @enum {string}
             */
            optional?: "ONLY" | "ONLY_NOT" | "ANY";
        };
        FactoryPipelineStepSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - factory pipeline step list */
            steps?: components["schemas"]["FactoryPipelineStepV2"][];
        };
        FactoryPipelineSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description factory id list */
            factoryIdList?: string[];
            /** @description factory id exclude list */
            factoryIdExcludeList?: string[];
            /** @description input twin class id list */
            inputTwinClassIdList?: string[];
            /** @description input twin class id exclude list */
            inputTwinClassIdExcludeList?: string[];
            /** @description factory condition set id list */
            factoryConditionSetIdList?: string[];
            /** @description factory condition set id exclude list */
            factoryConditionSetIdExcludeList?: string[];
            /** @description output twin status id list */
            outputTwinStatusIdList?: string[];
            /** @description output twin status id exclude list */
            outputTwinStatusIdExcludeList?: string[];
            /** @description next factory id list */
            nextFactoryIdList?: string[];
            /** @description next factory id exclude list */
            nextFactoryIdExcludeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /**
             * @description is active
             * @example ANY
             * @enum {string}
             */
            active?: "ONLY" | "ONLY_NOT" | "ANY";
            /**
             * @description next factory limit scope
             * @example ANY
             * @enum {string}
             */
            nextFactoryLimitScope?: "ONLY" | "ONLY_NOT" | "ANY";
        };
        FactoryPipelineSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - factory pipeline list */
            pipelines?: components["schemas"]["FactoryPipelineV2"][];
        };
        FactoryMultiplierFilterSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description factory id list */
            factoryIdList?: string[];
            /** @description factory id exclude list */
            factoryIdExcludeList?: string[];
            /** @description factory multiplier id list */
            factoryMultiplierIdList?: string[];
            /** @description factory multiplier id exclude list */
            factoryMultiplierIdExcludeList?: string[];
            /** @description input twin class id list */
            inputTwinClassIdList?: string[];
            /** @description input twin class id exclude list */
            inputTwinClassIdExcludeList?: string[];
            /** @description factory condition set id list */
            factoryConditionSetIdList?: string[];
            /** @description factory condition set id exclude list */
            factoryConditionSetIdExcludeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /**
             * @description active
             * @example ANY
             * @enum {string}
             */
            active?: "ONLY" | "ONLY_NOT" | "ANY";
            /**
             * @description factory condition invert
             * @example ANY
             * @enum {string}
             */
            factoryConditionInvert?: "ONLY" | "ONLY_NOT" | "ANY";
        };
        FactoryMultiplierFilterSearchRsDTOv1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - condition list */
            multiplierFilters?: components["schemas"]["FactoryMultiplierFilterV2"][];
        };
        FactoryMultiplierFilterV2: {
            /**
             * Format: uuid
             * @description id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            id?: string;
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: uuid
             * @description multiplier id
             * @example 66956a15-6858-40ba-b0aa-b123c54e250d
             */
            multiplierId?: string;
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description active
             * @example true
             */
            active?: boolean;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /** @description multiplier */
            multiplier?: components["schemas"]["FactoryMultiplierV2"];
            /** @description factory condition set */
            factoryConditionSet?: components["schemas"]["FactoryConditionSetV1"];
            /** @description input twin class */
            inputTwinClass?: components["schemas"]["TwinClassBaseV1"];
        };
        FactoryMultiplierSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description factory id list */
            factoryIdList?: string[];
            /** @description factory id exclude list */
            factoryIdExcludeList?: string[];
            /** @description input twin class id list */
            inputTwinClassIdList?: string[];
            /** @description input twin class id exclude list */
            inputTwinClassIdExcludeList?: string[];
            /** @description multiplier featurer id list */
            multiplierFeaturerIdList?: number[];
            /** @description multiplier featurer id list */
            multiplierFeaturerIdExcludeList?: number[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /**
             * @description is active
             * @example ANY
             * @enum {string}
             */
            active?: "ONLY" | "ONLY_NOT" | "ANY";
        };
        FactoryMultiplierSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - factory multiplier list */
            multipliers?: components["schemas"]["FactoryMultiplierV2"][];
        };
        FactoryEraserSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description factory id list */
            factoryIdList?: string[];
            /** @description factory id exclude list */
            factoryIdExcludeList?: string[];
            /** @description input twin class id list */
            inputTwinClassIdList?: string[];
            /** @description input twin class id exclude list */
            inputTwinClassIdExcludeList?: string[];
            /** @description factory condition set id list */
            factoryConditionSetIdList?: string[];
            /** @description factory condition set id exclude list */
            factoryConditionSetIdExcludeList?: string[];
            /**
             * @description factory condition invert
             * @example ANY
             * @enum {string}
             */
            conditionInvert?: "ONLY" | "ONLY_NOT" | "ANY";
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /** @description erase action like list */
            eraseActionLikeList?: ("NOT_SPECIFIED" | "RESTRICT" | "ERASE_IRREVOCABLE" | "ERASE_CANDIDATE")[];
            /** @description erase action not like list */
            eraseActionNotLikeList?: ("NOT_SPECIFIED" | "RESTRICT" | "ERASE_IRREVOCABLE" | "ERASE_CANDIDATE")[];
            /**
             * @description active
             * @example ANY
             * @enum {string}
             */
            active?: "ONLY" | "ONLY_NOT" | "ANY";
        };
        FactoryEraserSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - eraser list */
            erasers?: components["schemas"]["FactoryEraserV2"][];
        };
        FactoryConditionSetSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description name like list */
            nameLikeList?: string[];
            /** @description name like exclude list */
            nameNotLikeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description like exclude list */
            descriptionNotLikeList?: string[];
        };
        FactoryConditionSetSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - condition list */
            conditionSets?: components["schemas"]["FactoryConditionSetV2"][];
        };
        FactoryConditionSetV2: {
            /**
             * Format: uuid
             * @description id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            id?: string;
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: uuid
             * @description created by user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            createdByUserId?: string;
            /**
             * Format: date-time
             * @description updated at
             * @example 2023-09-13T09:32:08
             */
            updatedAt?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: int32
             * @description count in factory pipeline usages
             * @example 3
             */
            inFactoryPipelineUsagesCount?: number;
            /**
             * Format: int32
             * @description count in factory pipeline step usages
             * @example 3
             */
            inFactoryPipelineStepUsagesCount?: number;
            /**
             * Format: int32
             * @description count in factory multiplier filter usages
             * @example 3
             */
            inFactoryMultiplierFilterUsagesCount?: number;
            /**
             * Format: int32
             * @description count in factory branch usages
             * @example 3
             */
            inFactoryBranchUsagesCount?: number;
            /**
             * Format: int32
             * @description count in factory eraser usages
             * @example 3
             */
            inFactoryEraserUsagesCount?: number;
            /** @description created by user */
            createdByUser?: components["schemas"]["UserV1"];
        };
        FactoryBranchSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description factory id list */
            factoryIdList?: string[];
            /** @description factory id exclude list */
            factoryIdExcludeList?: string[];
            /** @description factory condition set id list */
            factoryConditionSetIdList?: string[];
            /** @description factory condition set id exclude list */
            factoryConditionSetIdExcludeList?: string[];
            /** @description next factory id list */
            nextFactoryIdList?: string[];
            /** @description next factory id exclude list */
            nextFactoryIdExcludeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /**
             * @description condition invert
             * @example ANY
             * @enum {string}
             */
            conditionInvert?: "ONLY" | "ONLY_NOT" | "ANY";
            /**
             * @description active
             * @example ANY
             * @enum {string}
             */
            active?: "ONLY" | "ONLY_NOT" | "ANY";
        };
        FactoryBranchSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - condition list */
            branches?: components["schemas"]["FactoryBranchV2"][];
        };
        FactoryPipelineCreateRqV1: {
            /** @description factory pipeline create */
            factoryPipeline?: components["schemas"]["FactoryPipelineCreateV1"];
        };
        FactoryPipelineCreateV1: {
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description is active
             * @example true
             */
            active?: boolean;
            /**
             * Format: uuid
             * @description output status id
             * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
             */
            outputStatusId?: string;
            /**
             * Format: uuid
             * @description next factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            nextFactoryId?: string;
            /**
             * Format: uuid
             * @description template twin id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            templateTwinId?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
        };
        FactoryMultiplierCreateRqV1: {
            /** @description factory multiplier create */
            factoryMultiplier?: components["schemas"]["FactoryMultiplierCreateV1"];
        };
        FactoryMultiplierCreateV1: {
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: int32
             * @description multiplier featurer id
             * @example 1000
             */
            multiplierFeaturerId?: number;
            /**
             * @description multiplier params
             * @example {
             *       "outputTwinClassId": "da69c441-9c8f-4e73-a07e-b5648f8f4396",
             *       "copyHead": "true"
             *     }
             */
            multiplierParams?: {
                [key: string]: string;
            };
            /**
             * @description is active
             * @example true
             */
            active?: boolean;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
        };
        FactoryEraserCreateRqV1: {
            /** @description factory eraser create */
            eraser?: components["schemas"]["FactoryEraserCreateV1"];
        };
        FactoryEraserCreateV1: {
            /**
             * Format: uuid
             * @description input twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            inputTwinClassId?: string;
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            twinFactoryConditionSetId?: string;
            /**
             * @description factory condition invert
             * @example true
             */
            twinFactoryConditionInvert?: boolean;
            /**
             * @description active
             * @example true
             */
            active?: boolean;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * @description action
             * @example NOT_SPECIFIED
             * @enum {string}
             */
            action?: "NOT_SPECIFIED" | "RESTRICT" | "ERASE_IRREVOCABLE" | "ERASE_CANDIDATE";
        };
        FactoryBranchCreateRqV1: {
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description factory condition set invert
             * @example true
             */
            active?: boolean;
            /**
             * Format: uuid
             * @description next factory id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            nextFactoryId?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
        };
        FactoryCreateRqV1: {
            /**
             * @description key
             * @example taskReassign
             */
            key?: string;
            /** @description name i18n */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /** @description description i18n */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
        };
        FactorySearchRqV1: {
            /** @description id List */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description key like list */
            keyLikeList?: string[];
            /** @description key not like list */
            keyNotLikeList?: string[];
            /** @description name like list */
            nameLikeList?: string[];
            /** @description name not like list */
            nameNotLikeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
        };
        FactorySearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - factory list */
            factories?: components["schemas"]["FactoryV2"][];
        };
        FactoryPipelineStepCreateRqV1: {
            /** @description factory pipeline step create */
            factoryPipelineStep?: components["schemas"]["FactoryPipelineStepCreateV1"];
        };
        FactoryPipelineStepCreateV1: {
            /**
             * Format: uuid
             * @description factory pipeline id
             * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryPipelineId?: string;
            /**
             * Format: int32
             * @description order
             * @example 3
             */
            order?: number;
            /**
             * Format: uuid
             * @description factory condition set id
             * @example 69856a15-6858-40ba-b0aa-b123c54e250d
             */
            factoryConditionSetId?: string;
            /**
             * @description factory condition set invert
             * @example true
             */
            factoryConditionSetInvert?: boolean;
            /**
             * @description is active
             * @example true
             */
            active?: boolean;
            /**
             * Format: int32
             * @description filler featurer id
             * @example 1000
             */
            fillerFeaturerId?: number;
            /**
             * @description filler params
             * @example {"linkId"=>"6e42ef74-3015-4400-946e-1326bcb4cf48",
             *     "GTEvalue"=>"2"}
             */
            fillerParams?: {
                [key: string]: string;
            };
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * @description is optional
             * @example true
             */
            optional?: boolean;
        };
        DomainUserAddV1: {
            /**
             * Format: uuid
             * @description id
             * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
             */
            userId?: string;
            /**
             * @description locale [optional]
             * @example en
             */
            locale?: string;
        };
        DomainBusinessAccountUpdateV1: {
            /**
             * Format: uuid
             * @description permissionSchemaId
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @description twinClassSchemaId
             * @example 8b9ea6ad-2b9b-4a4a-8ea9-1b17da4d603b
             */
            twinClassSchemaId?: string;
            /**
             * Format: uuid
             * @description twinFlowSchemaId
             * @example 2c618b09-e8dc-4712-a433-2e18915ee70d
             */
            twinFlowSchemaId?: string;
            /**
             * Format: uuid
             * @description Tier id.
             */
            tierId?: string;
            /** @description Name */
            name?: string;
        };
        DomainBusinessAccountAddV1: {
            /**
             * Format: uuid
             * @description id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            businessAccountId?: string;
            /**
             * Format: uuid
             * @description Tier id. Optional. If it’s not set then default_tier of domain will be used for new domain BA
             */
            tierId?: string;
            /** @description Name */
            name?: string;
        };
        DomainCreateRqV1: {
            /** @description domain */
            domain?: components["schemas"]["DomainCreateV1"];
        };
        DomainCreateV1: {
            /**
             * @description name
             * @example alcosi
             */
            name?: string;
            /**
             * @description description
             * @example some domain
             */
            description?: string;
            /**
             * @description default locale for domain [en/de/by]
             * @example en
             */
            defaultLocale?: string;
            /**
             * Format: uuid
             * @description Resource storage type
             * @example 00000000-0000-0000-0007-000000000001
             */
            resourceStorageId?: string;
            /**
             * Format: uuid
             * @description Attachment storage type
             * @example 00000000-0000-0000-0007-000000000001
             */
            attachmentStorageId?: string;
            /**
             * @description will be used for url generation and for twins aliases
             * @example alcosi
             */
            key?: string;
            /**
             * @description type [basic/b2b]
             * @example basic
             * @enum {string}
             */
            type?: "basic" | "b2b";
        };
        DomainUserSearchRqV1: {
            /** @description user id list */
            userIdList?: string[];
            /** @description user id exclude list */
            userIdExcludeList?: string[];
            /** @description name like list */
            nameLikeList?: string[];
            /** @description name not like list */
            nameNotLikeList?: string[];
            /** @description email like list */
            emailLikeList?: string[];
            /** @description email not like list */
            emailNotLikeList?: string[];
            /** @description status id list */
            statusIdList?: ("ACTIVE" | "DELETED" | "EMAIL_VERIFICATION_REQUIRED" | "BLOCKED")[];
            /** @description status id exclude list */
            statusIdExcludeList?: ("ACTIVE" | "DELETED" | "EMAIL_VERIFICATION_REQUIRED" | "BLOCKED")[];
            /** @description business account id list */
            businessAccountIdList?: string[];
            /** @description business account id exclude list */
            businessAccountIdExcludeList?: string[];
        };
        BusinessAccountUserV2: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /**
             * Format: uuid
             * @description user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            userId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description business account id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            businessAccountId?: string;
            /** @description user */
            user?: components["schemas"]["UserV1"];
            /** @description business account */
            businessAccount?: components["schemas"]["BusinessAccountV1"];
        };
        DomainUserSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description user list */
            users?: components["schemas"]["DomainUserV2"][];
        };
        DomainUserV2: {
            /**
             * Format: uuid
             * @description id
             * @example 1b2091e3-971a-41bc-b343-1f980227d02f
             */
            id?: string;
            /**
             * Format: uuid
             * @description user id
             * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            userId?: string;
            /**
             * @description locale
             * @example en
             */
            currentLocale?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /** @description Business account id list. Will be filled only in lazyRelations mode is false */
            businessAccountUserIdList?: string[];
            /** @description user */
            user?: components["schemas"]["UserV1"];
            /** @description Business account users. Will be filled only if lazyRelations mode is true */
            businessAccountUsers?: components["schemas"]["BusinessAccountUserV2"][];
        };
        DomainBusinessAccountSearchRqV1: {
            /** @description business account id list */
            businessAccountIdList?: string[];
            /** @description business account id exclude list */
            businessAccountIdExcludeList?: string[];
            /** @description business account name like keyword list(AND) */
            businessAccountNameLikeList?: string[];
            /** @description business account name exclude like keyword list(OR) */
            businessAccountNameNotLikeList?: string[];
            /** @description business account permission schema id list */
            permissionSchemaIdList?: string[];
            /** @description business account permission schema id exclude list */
            permissionSchemaIdExcludeList?: string[];
            /** @description business account twinflow schema id list */
            twinflowSchemaIdList?: string[];
            /** @description business account twinflows chema id exclude list */
            twinflowSchemaIdExcludeList?: string[];
            /** @description business account twin class schema id list */
            twinClassSchemaIdList?: string[];
            /** @description business account twin class schema id exclude list */
            twinClassSchemaIdExcludeList?: string[];
        };
        DomainBusinessAccountSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - domain business account list */
            businessAccounts?: components["schemas"]["DomainBusinessAccountV1"][];
        };
        DomainBusinessAccountV1: {
            /**
             * Format: uuid
             * @description domain business account id
             */
            id?: string;
            /**
             * Format: uuid
             * @description business account id
             */
            businessAccountid?: string;
            /**
             * Format: uuid
             * @example af143656-9899-4e1f-8683-48795cdefeac
             */
            permissionSchemaId?: string;
            /**
             * Format: uuid
             * @example 2c618b09-e8dc-4712-a433-2e18915ee70d
             */
            twinflowSchemaId?: string;
            /**
             * Format: uuid
             * @example 8b9ea6ad-2b9b-4a4a-8ea9-1b17da4d603b
             */
            twinClassSchemaId?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /** @description business account */
            businessAccount?: components["schemas"]["BusinessAccountV1"];
        };
        DataListOptionCreateDV1: {
            /** @description icon */
            icon?: string;
            /** @description option */
            optionI18n?: components["schemas"]["I18nSaveV1"];
            /** @description attributes map */
            attributesMap?: {
                [key: string]: string;
            };
            /** @description external id */
            externalId?: string;
            /**
             * @description background color hex
             * @example #ff00ff
             */
            backgroundColor?: string;
            /**
             * @description font color hex
             * @example #ff00ff
             */
            fontColor?: string;
            /**
             * Format: uuid
             * @description data list id
             * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
             */
            dataListId?: string;
        };
        DataListOptionCreateRqV2: {
            /** @description data list options */
            dataListOptions?: components["schemas"]["DataListOptionCreateDV1"][];
        };
        DataListOptionCreateRqDV1: {
            /** @description icon */
            icon?: string;
            /** @description option */
            optionI18n?: components["schemas"]["I18nSaveV1"];
            /** @description attributes map */
            attributesMap?: {
                [key: string]: string;
            };
            /** @description external id */
            externalId?: string;
            /**
             * @description background color hex
             * @example #ff00ff
             */
            backgroundColor?: string;
            /**
             * @description font color hex
             * @example #ff00ff
             */
            fontColor?: string;
            /**
             * Format: uuid
             * @description data list id
             * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
             */
            dataListId?: string;
        };
        DataListCreateRqV1: {
            /**
             * @description key
             * @example country
             */
            key?: string;
            /**
             * @description name
             * @example Some name
             */
            nameI18n?: components["schemas"]["I18nSaveV1"];
            /**
             * @description description
             * @example Some description
             */
            descriptionI18n?: components["schemas"]["I18nSaveV1"];
            /** @description attribute1 */
            attribute1?: components["schemas"]["DataListAttributeSaveV1"];
            /** @description attribute2 */
            attribute2?: components["schemas"]["DataListAttributeSaveV1"];
            /** @description attribute3 */
            attribute3?: components["schemas"]["DataListAttributeSaveV1"];
            /** @description attribute4 */
            attribute4?: components["schemas"]["DataListAttributeSaveV1"];
            /** @description external id */
            externalId?: string;
        };
        CommentCreateRqV1: {
            /** @description comment */
            comment?: components["schemas"]["CommentCreateV1"];
        };
        CommentCreateV1: {
            text?: string;
            /** @description attachments */
            attachments?: components["schemas"]["AttachmentCreateV1"][];
        };
        CommentCreateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /**
             * Format: uuid
             * @description comment id
             */
            commentId?: string;
            /** @description attachment list id */
            attachmentListId?: string[];
        };
        CommentSearchRqDTOv1: {
            /** @description List of ids to select */
            idList?: string[];
            /** @description List of ids to exclude */
            idExcludeList?: string[];
            /** @description List of twin ids to select */
            twinIdList?: string[];
            /** @description List of twin ids to exclude */
            twinIdExcludeList?: string[];
            /** @description List of created by user Id's to select */
            createdByUserIdList?: string[];
            /** @description List of created by user Id's to exclude */
            createdByUserIdExcludeList?: string[];
            /** @description Full text search list to select */
            textLikeList?: string[];
            /** @description Full text search list to exclude */
            textNotLikeList?: string[];
            /** @description created at */
            createdAt?: components["schemas"]["DataTimeRangeV1"];
            /** @description updated at */
            updatedAt?: components["schemas"]["DataTimeRangeV1"];
        };
        CommentSearchRsDTOv1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description results - comment list */
            comments?: components["schemas"]["CommentV1"][];
        };
        BusinessAccountUserAddRqV1: {
            /**
             * Format: uuid
             * @description id
             * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
             */
            userId?: string;
        };
        AttachmentCUDValidateRqV1: {
            /**
             * Format: uuid
             * @description Twin id
             */
            twinId?: string;
            /** @description Attachments for validation */
            attachments?: components["schemas"]["AttachmentCudV1"];
        };
        AttachmentCUDProblemsDTOv1: {
            /** @description create problems */
            createProblems?: components["schemas"]["AttachmentFileCreateProblemsDTOv1"][];
            /** @description update problems */
            updateProblems?: components["schemas"]["AttachmentFileUpdateProblemsDTOv1"][];
            /** @description delete problems */
            deleteProblems?: components["schemas"]["AttachmentFileDeleteProblemsDTOv1"][];
            /** @description field attachment problems */
            fieldAttachmentProblems?: components["schemas"]["TwinFieldAttachmentProblemsV1"][];
            /** @description comment attachment problems */
            commentAttachmentProblems?: components["schemas"]["TwinCommentAttachmentProblemsV1"][];
        };
        AttachmentCUDValidateRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description Twin attachment problems */
            cudProblems?: components["schemas"]["AttachmentCUDProblemsDTOv1"];
            /** @description Attachment entities for update and delete operations */
            attachmentsForUD?: components["schemas"]["AttachmentV1"][];
        };
        AttachmentFileCreateProblemsDTOv1: {
            /** @description Problem message */
            message?: string;
            /** @description external id */
            externalId?: string;
            /**
             * @description attachment file problems
             * @enum {string}
             */
            problem?: "INVALID_NAME" | "INVALID_TYPE" | "INVALID_SIZE";
        };
        AttachmentFileDeleteProblemsDTOv1: {
            /** @description Problem message */
            message?: string;
            /** @description external id */
            externalId?: string;
            /**
             * @description attachment file delete problems
             * @enum {string}
             */
            problem?: "LOCKED" | "NOT_ALLOWED";
        };
        AttachmentFileUpdateProblemsDTOv1: {
            /** @description Problem message */
            message?: string;
            /** @description external id */
            externalId?: string;
            /**
             * @description attachment file problems
             * @enum {string}
             */
            problem?: "INVALID_NAME" | "INVALID_TYPE" | "INVALID_SIZE";
        };
        TwinCommentAttachmentProblemsV1: {
            /** @description Problem message */
            message?: string;
            /**
             * Format: uuid
             * @description Comment id
             */
            commentId?: string;
            /**
             * @description Twin comment attachment problem
             * @enum {string}
             */
            problem?: "NOT_ALLOWED" | "INAVLID_FILES_SIZE" | "INAVLID_FILES_COUNT";
        };
        TwinFieldAttachmentProblemsV1: {
            /** @description Problem message */
            message?: string;
            /**
             * Format: uuid
             * @description Twin field id
             */
            twinFieldId?: string;
            /**
             * @description Twin field attachment problem
             * @enum {string}
             */
            problem?: "NOT_ALLOWED" | "INAVLID_FILES_SIZE" | "INAVLID_FILES_COUNT";
        };
        AttachmentSearchRqV1: {
            /** @description id list */
            idList?: string[];
            /** @description id exclude list */
            idExcludeList?: string[];
            /** @description twin id list */
            twinIdList?: string[];
            /** @description twin id exclude list */
            twinIdExcludeList?: string[];
            /** @description twinflow transition id list */
            twinflowTransitionIdList?: string[];
            /** @description twinflow transition id exclude list */
            twinflowTransitionIdExcludeList?: string[];
            /** @description comment id list */
            commentIdList?: string[];
            /** @description comment id exclude list */
            commentIdExcludeList?: string[];
            /** @description twin class field id list */
            twinClassFieldIdList?: string[];
            /** @description twin class field id exclude list */
            twinClassFieldIdExcludeList?: string[];
            /** @description storage link like list */
            storageLinkLikeList?: string[];
            /** @description storage link not like list */
            storageLinkNotLikeList?: string[];
            /** @description view permission id list */
            viewPermissionIdList?: string[];
            /** @description view permission id exclude list */
            viewPermissionIdExcludeList?: string[];
            /** @description created by user id list */
            createdByUserIdList?: string[];
            /** @description created by user id exclude list */
            createdByUserIdExcludeList?: string[];
            /** @description external id like list */
            externalIdLikeList?: string[];
            /** @description external id not like list */
            externalIdNotLikeList?: string[];
            /** @description title like list */
            titleLikeList?: string[];
            /** @description title not like list */
            titleNotLikeList?: string[];
            /** @description description like list */
            descriptionLikeList?: string[];
            /** @description description not like list */
            descriptionNotLikeList?: string[];
            /** @description createdAt */
            createdAt?: components["schemas"]["DataTimeRangeV1"];
        };
        AttachmentSearchRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description attachment list */
            attachments?: components["schemas"]["AttachmentV1"][];
        };
        AuthSignupByEmailRqV1: {
            /**
             * @description first name
             * @example Some name
             */
            firstName?: string;
            /**
             * @description last name
             * @example Some name
             */
            lastName?: string;
            /**
             * @description password
             * @example user@example.com
             */
            email?: string;
            /**
             * @description password
             * @example secret
             */
            password?: string;
            /**
             * Format: uuid
             * @description public key id
             */
            publicKeyId?: string;
        };
        AuthSignupByEmailRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
        };
        AuthSignupByEmailConfirmRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
        };
        AuthRefreshRqV2: {
            /** @description refreshToken */
            refreshToken?: string;
            /** @description agent fingerprint (hash) */
            fingerprint?: string;
        };
        AuthRefreshRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description tokens data */
            authData?: {
                [key: string]: string;
            };
        };
        AuthRefreshRqV1: {
            /** @description refreshToken */
            refreshToken?: string;
        };
        AuthM2MLoginRqV1: {
            /** @description client id */
            clientId?: string;
            /** @description client secret */
            clientSecret?: string;
            /**
             * Format: uuid
             * @description public key id
             */
            publicKeyId?: string;
        };
        AuthM2MTokenRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description tokens data */
            authData?: {
                [key: string]: string;
            };
            /** @description public key to encrypt act as user data [optional] */
            actAsUserPublicKey?: components["schemas"]["CryptKeyV1"];
        };
        CryptKeyV1: {
            /**
             * Format: uuid
             * @description key id
             */
            id?: string;
            algorithm?: string;
            format?: string;
            /** Format: int32 */
            keySize?: number;
            key?: string;
            /**
             * Format: date-time
             * @description expires at
             */
            expiresAt?: string;
        };
        AuthLogoutRqV1: {
            /** @description logout data. depends upon IDP */
            authData?: {
                [key: string]: string;
            };
        };
        FaceViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - face details */
            face?: components["schemas"]["FaceV1"];
        };
        AuthLoginRqV1: {
            /**
             * @description username
             * @example user@example.com
             */
            username?: string;
            /**
             * @description password
             * @example secret
             */
            password?: string;
            /** @description agent fingerprint (hash) */
            fingerprint?: string;
            /**
             * Format: uuid
             * @description public key id
             */
            publicKeyId?: string;
        };
        AuthLoginRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description tokens data */
            authData?: {
                [key: string]: string;
            };
        };
        AuthConfigRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description supported auth methods by linked identity provider */
            config?: components["schemas"]["AuthConfigV1"];
        };
        AuthConfigV1: {
            /** @description some name */
            name?: string;
            /** @description supported auth methods by linked identity provider */
            authMethods?: (components["schemas"]["AuthMethodOath2V1"] | components["schemas"]["AuthMethodPasswordV1"] | components["schemas"]["AuthMethodStubV1"])[];
        };
        /** @description One of values */
        AuthMethodDTOv1: {
            type: string;
        };
        AuthMethodOath2V1: Omit<components["schemas"]["AuthMethodDTOv1"], "type"> & {
            type?: string;
            /** @description icon */
            icon?: string;
            /** @description label */
            label?: string;
            /** @description redirect url */
            redirectUrl?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "AuthMethodOath2V1";
        };
        /** @description Login by username/password */
        AuthMethodPasswordV1: Omit<components["schemas"]["AuthMethodDTOv1"], "type"> & {
            type?: string;
            /** @description icon */
            icon?: string;
            /** @description label */
            label?: string;
            /** @description New user register is supported */
            registerSupported?: boolean;
            /** @description Password recover is supported */
            recoverSupported?: boolean;
            /** @description Agent finger print check is supported */
            fingerPrintRequired?: boolean;
            /** @description Public key to crypt password (if supported) */
            publicKey?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "AuthMethodPasswordV1";
        };
        /** @description Stub auth token = user_id + business_account_id */
        AuthMethodStubV1: Omit<components["schemas"]["AuthMethodDTOv1"], "type"> & {
            type?: string;
            /** @description icon */
            icon?: string;
            /** @description label */
            label?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "AuthMethodStubV1";
        };
        LocaleV1: {
            /** @description id */
            id?: string;
            /** @description name */
            name?: string;
            /** @description nativeName */
            nativeName?: string;
            /** @description icon */
            icon?: string;
        };
        LocaleViewV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description locales in domain */
            localeList?: components["schemas"]["LocaleV1"][];
        };
        DomainViewPublicRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description domain */
            domain?: components["schemas"]["DomainViewPublicV1"];
        };
        DataListOptionRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /**
             * Format: uuid
             * @description id
             * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
             */
            dataListId?: string;
            /** @description data lists option */
            option?: components["schemas"]["DataListOptionV1"];
        };
        PermissionGroupV2: {
            /**
             * Format: uuid
             * @description id
             * @example 7efd9df0-cae7-455f-a721-eaec455105a4
             */
            id?: string;
            /**
             * @description key
             * @example LOCAL_PERMISSION
             */
            key?: string;
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
            /**
             * Format: uuid
             * @description twin class id
             * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
             */
            twinClassId?: string;
            /** @description twin class */
            twinClass?: components["schemas"]["TwinClassV1"];
            /** @description permission list */
            permissions?: components["schemas"]["PermissionV1"][];
        };
        PermissionGroupedListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description permission groups list */
            permissionGroups?: components["schemas"]["PermissionGroupV2"][];
        };
        PermissionListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description permission list */
            permissions?: components["schemas"]["PermissionV2"][];
        };
        LocaleRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description locale */
            locale?: string;
        };
        TwinflowViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description twinflow details */
            twinflow?: components["schemas"]["TwinflowBaseV3"];
        };
        TwinStatusRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description twin status */
            twinStatus?: components["schemas"]["TwinStatusV2"];
        };
        WidgetListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - valid widget list */
            widgetList?: components["schemas"]["WidgetV1"][];
        };
        WidgetV1: {
            /**
             * Format: uuid
             * @description id
             * @example 4245e338-3c09-4390-8a03-435d1da4e311
             */
            id?: string;
            /**
             * @description key
             * @example details
             */
            key?: string;
            /**
             * @description name
             * @example Details
             */
            name?: string;
        };
        TwinClassLinkListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            forwardLinkMap?: {
                [key: string]: components["schemas"]["LinkV1"];
            };
            backwardLinkMap?: {
                [key: string]: components["schemas"]["LinkV1"];
            };
        };
        TwinClassFieldListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - twin class fields list */
            twinClassFieldList?: components["schemas"]["TwinClassFieldV2"][];
        };
        CardListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - card list */
            cardList?: components["schemas"]["CardV1"][];
        };
        CardV1: {
            /**
             * Format: uuid
             * @description id
             * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
             */
            id?: string;
            /**
             * @description key
             * @example details
             */
            key?: string;
            /**
             * @description name
             * @example Details
             */
            name?: string;
            /**
             * @description logo
             * @example http://twins.org/t/card/main.png
             */
            logo?: string;
            /**
             * @description layout
             * @example OneColumn
             */
            layoutKey?: string;
            /** @description Class fields list */
            widgets?: components["schemas"]["CardWidgetV1"][];
        };
        CardWidgetV1: {
            /**
             * Format: uuid
             * @description id
             * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
             */
            id?: string;
            /**
             * @description layoutPosition
             * @example FirstColumn
             */
            layoutPositionKey?: string;
            /**
             * Format: int32
             * @description in layout position order
             * @example 1
             */
            inPositionOrder?: number;
            /**
             * @description name
             * @example Details
             */
            name?: string;
            /**
             * @description color
             * @example red
             */
            color?: string;
            /**
             * Format: uuid
             * @description widgetId
             * @example 4245e338-3c09-4390-8a03-435d1da4e311
             */
            widgetId?: string;
            /** @description widget */
            widget?: components["schemas"]["WidgetV1"];
        };
        TwinRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description twin */
            twin?: components["schemas"]["TwinV1"];
        };
        HistoryListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description history list */
            historyList?: components["schemas"]["HistoryV1"][];
        };
        HistoryViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description history */
            history?: components["schemas"]["HistoryV1"];
        };
        TransitionViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description transition details */
            transition?: components["schemas"]["TwinflowTransitionBaseV3"];
        };
        CommandRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description Command for run script */
            command?: string;
        };
        AppInfoRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description Info attributes key/value */
            attributes?: {
                [key: string]: string;
            };
        };
        UserWithinSpaceRolesViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description space roles */
            userRefSpaceRoles?: components["schemas"]["UserWithinSpaceRolesRsV1"];
        };
        PermissionSchemaViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description permission schema */
            permissionSchema?: components["schemas"]["PermissionSchemaV2"];
        };
        PermissionGroupViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description permission group */
            permissionGroup?: components["schemas"]["PermissionGroupV1"];
        };
        PermissionGrantUserGroupViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - permission grant user-group */
            permissionGrantUserGroup?: components["schemas"]["PermissionGrantUserGroupV2"];
        };
        PermissionGrantTwinRoleViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - permission grant twin role */
            permissionGrantTwin?: components["schemas"]["PermissionGrantTwinRoleV1"];
        };
        PermissionGrantSpaceRoleViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - permission grant space role */
            permissionGrantSpaceRole?: components["schemas"]["PermissionGrantSpaceRoleV2"];
        };
        PermissionGrantAssigneePropagationViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - permission assignee propagation  */
            permissionGrantAssigneePropagation?: components["schemas"]["PermissionGrantAssigneePropagationV2"];
        };
        PermissionViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description permission  */
            permission?: components["schemas"]["PermissionV2"];
        };
        LinkViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - link */
            link?: components["schemas"]["LinkV3"];
        };
        I18nViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description i18n */
            i18n?: components["schemas"]["I18nV1"];
        };
        FactoryPipelineStepViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - factory pipeline step */
            step?: components["schemas"]["FactoryPipelineStepV2"];
        };
        FactoryPipelineViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - factory pipeline */
            pipeline?: components["schemas"]["FactoryPipelineV2"];
        };
        FactoryMultiplierFilterViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - multiplierFilter */
            multiplierFilter?: components["schemas"]["FactoryMultiplierFilterV2"];
        };
        FactoryMultiplierViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - factory multiplier */
            multiplier?: components["schemas"]["FactoryMultiplierV2"];
        };
        FactoryEraserViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - eraser */
            eraser?: components["schemas"]["FactoryEraserV2"];
        };
        FactoryConditionSetViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - condition set */
            conditionSet?: components["schemas"]["FactoryConditionSetV1"];
        };
        FactoryBranchViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - branch */
            branch?: components["schemas"]["FactoryBranchV2"];
        };
        FactoryViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - factory */
            factory?: components["schemas"]["FactoryV2"];
        };
        FaceWT003DTOv1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * @description level (info, warn, etc.)
             * @enum {string}
             */
            level?: "INFO" | "WARN" | "ERROR" | "SUCCESS" | "DEFAULT";
            /** @description title */
            title?: string;
            /** @description message */
            message?: string;
            /** @description icon */
            icon?: string;
            /** @description styles, converted to css classes */
            styleClasses?: string[];
        };
        FaceWT003ViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - widget details */
            widget?: components["schemas"]["FaceWT003DTOv1"];
        };
        FaceWT002ButtonV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /** @description uniq key */
            key?: string;
            /** @description label */
            label?: string;
            /** @description Icon url. Might be relative */
            icon?: string;
            /** @description widget layout */
            styleClasses?: string[];
            /**
             * Format: uuid
             * @description extends hierarchy twin class id
             */
            twinClassId?: string;
            /**
             * Format: int32
             * @description hierarchy depth
             */
            extendsDepth?: number;
        };
        FaceWT002ViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - widget details */
            widget?: components["schemas"]["FaceWT002v1"];
        };
        FaceWT002v1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /** @description uniq key */
            key?: string;
            /** @description widget layout */
            styleClasses?: string[];
            /** @description creat twin buttons array */
            buttons?: components["schemas"]["FaceWT002ButtonV1"][];
        };
        FaceWT001ColumnV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /** @description label */
            label?: string;
            /**
             * Format: uuid
             * @description twin class field id
             */
            twinClassFieldId?: string;
            /**
             * Format: int32
             * @description order
             */
            order?: number;
            /** @description show by default */
            showByDefault?: boolean;
        };
        FaceWT001ViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - widget details */
            widget?: components["schemas"]["FaceWT001v1"];
        };
        FaceWT001v1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /** @description uniq key */
            key?: string;
            /** @description UI label for item */
            label?: string;
            /**
             * Format: uuid
             * @description twins of given twin class id
             */
            twinClassId?: string;
            /**
             * Format: uuid
             * @description searchId
             */
            searchId?: string;
            /**
             * @description show create button
             * @example true
             */
            showCreateButton?: boolean;
            /** @description show given columns from table and filter */
            columns?: components["schemas"]["FaceWT001ColumnV1"][];
        };
        FaceTW005ButtonV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /** @description label */
            label?: string;
            /**
             * Format: uuid
             * @description twin class field id
             */
            transitionId?: string;
            /**
             * Format: int32
             * @description order
             */
            order?: number;
            /** @description Icon url. Might be relative */
            icon?: string;
            /** @description styles, converted to css classes */
            styleClasses?: string[];
            /** @description is showing needed when button inactive */
            showWhenInactive?: boolean;
        };
        FaceWT005ViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - widget details */
            widget?: components["schemas"]["FaceWT005v1"];
        };
        FaceWT005v1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: uuid
             * @description an id of twin, for which current config is pointed. It can bu useful when we want to display widget witch some head twin data on current twin page.
             */
            pointedTwinId?: string;
            /** @description twins of given twin class id */
            glue?: boolean;
            /** @description twins of given twin class id */
            alignVertical?: boolean;
            /**
             * Format: uuid
             * @description searchId
             */
            searchId?: string;
            /** @description styles, converted to css classes */
            styleClasses?: string[];
            /** @description show given columns from table and filter */
            buttons?: components["schemas"]["FaceTW005ButtonV1"][];
        };
        /** @description TW004 field config */
        FaceTW004FieldV1: {
            /** @description uniq key */
            key?: string;
            /** @description some label for field */
            label?: string;
            /**
             * Format: uuid
             * @description twin field (also basic field constants supported)
             */
            twinClassFieldId?: string;
            /** @description is editable */
            editable?: boolean;
        };
        FaceTW004ViewRsV2: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - widget details */
            widget?: components["schemas"]["FaceTW004v2"];
        };
        /** @description Twin single field view/edit twidget */
        FaceTW004v2: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: uuid
             * @description an id of twin, for which current config is pointed. It can bu useful when we want to display widget witch some head twin data on current twin page.
             */
            pointedTwinId?: string;
            /** @description twin fields */
            fields?: components["schemas"]["FaceTW004FieldV1"][];
        };
        FaceTW004ViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - widget details */
            widget?: components["schemas"]["FaceTW004v1"];
        };
        /** @description Twin single field view/edit twidget */
        FaceTW004v1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: uuid
             * @description an id of twin, for which current config is pointed. It can bu useful when we want to display widget witch some head twin data on current twin page.
             */
            pointedTwinId?: string;
            /** @description uniq key */
            key?: string;
            /** @description some label for twidget */
            label?: string;
            /**
             * Format: uuid
             * @description twin field (also basic field constants supported)
             */
            twinClassFieldId?: string;
            /** @description is editable */
            editable?: boolean;
        };
        FaceTW002AccordionItemV1: {
            /**
             * Format: uuid
             * @description item id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /** @description locale */
            locale?: string;
            /** @description label for header */
            label?: string;
        };
        FaceTW002ViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - widget details */
            widget?: components["schemas"]["FaceTW002v1"];
        };
        /** @description Twin i18n field accordion widget */
        FaceTW002v1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: uuid
             * @description an id of twin, for which current config is pointed. It can bu useful when we want to display widget witch some head twin data on current twin page.
             */
            pointedTwinId?: string;
            /** @description uniq key */
            key?: string;
            /** @description label for widget */
            label?: string;
            /**
             * Format: uuid
             * @description widget should display an accordion with translations for given field [by id]
             */
            i18nTwinClassFieldId?: string;
            accordionItems?: components["schemas"]["FaceTW002AccordionItemV1"][];
        };
        FaceTW001ViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - widget details */
            widget?: components["schemas"]["FaceTW001v1"];
        };
        /** @description Twin images simple gallery widget */
        FaceTW001v1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /**
             * Format: uuid
             * @description an id of twin, for which current config is pointed. It can bu useful when we want to display widget witch some head twin data on current twin page.
             */
            pointedTwinId?: string;
            /** @description uniq key */
            key?: string;
            /** @description some label for widget */
            label?: string;
            /**
             * Format: uuid
             * @description only images from given field [by id] should be taken, if empty - then all twins images
             */
            imagesTwinClassFieldId?: string;
        };
        FacePG002TabV1: {
            /**
             * Format: uuid
             * @description id
             */
            id?: string;
            /** @description page title */
            title?: string;
            /** @description Icon url. Might be relative */
            icon?: string;
            /** @description page layout */
            styleClasses?: string[];
            /** @description tab widgets list */
            widgets?: components["schemas"]["FacePG002WidgetV1"][];
            /** Format: int32 */
            order?: number;
        };
        FacePG002ViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - page details */
            page?: components["schemas"]["FacePG002v1"];
        };
        FacePG002WidgetV1: {
            /**
             * Format: uuid
             * @description uniq id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /** @description page layout */
            styleClasses?: string[];
            /** @description is widget active */
            active?: boolean;
            /**
             * Format: uuid
             * @description widget face pointer
             */
            widgetFaceId?: string;
        };
        FacePG002v1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /** @description page title */
            title?: string;
            /**
             * @description page layout
             * @enum {string}
             */
            layout?: "TOP" | "BOTTOM" | "LEFT" | "RIGHT";
            /** @description page widgets list */
            tabs?: components["schemas"]["FacePG002TabV1"][];
        };
        FacePG001ViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - page details */
            page?: components["schemas"]["FacePG001v1"];
        };
        FacePG001WidgetV1: {
            /**
             * Format: uuid
             * @description uniq id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /** @description page layout */
            styleClasses?: string[];
            /** @description is widget active */
            active?: boolean;
            /**
             * Format: uuid
             * @description widget face pointer
             */
            widgetFaceId?: string;
        };
        FacePG001v1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /** @description page title */
            title?: string;
            /** @description page layout */
            styleClasses?: string[];
            /** @description page widgets list */
            widgets?: components["schemas"]["FacePG001WidgetV1"][];
        };
        FaceNB001MenuItemV1: {
            /**
             * Format: uuid
             * @description item id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /** @description uniq menu item key */
            key?: string;
            /** @description UI label for item */
            label?: string;
            /** @description description */
            description?: string;
            /** @description item is not selectable */
            disabled?: boolean;
            /** @description Icon url. Might be relative */
            icon?: string;
            /**
             * Format: uuid
             * @description domain navigation bar pointer
             */
            targetPageFaceId?: string;
            /**
             * Format: uuid
             * @description permission id
             */
            guardedByPermissionId?: string;
            /**
             * Format: uuid
             * @description parent face menu item id
             */
            parentFaceMenuItemId?: string;
            /** @description children */
            children?: unknown;
        };
        FaceNB001ViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description results - navbar details */
            navbar?: components["schemas"]["FaceNB001v1"];
        };
        FaceNB001v1: {
            /**
             * Format: uuid
             * @description config id
             * @example 9a3f6075-f175-41cd-a804-934201ec969c
             */
            id?: string;
            /**
             * @description component
             * @example some domain
             */
            component?: string;
            /** @description name */
            name?: string;
            /** @description description */
            description?: string;
            /**
             * Format: date-time
             * @description created at
             * @example 2023-09-13T09:32:08
             */
            createdAt?: string;
            /**
             * Format: uuid
             * @description createdByUserId
             */
            createdByUserId?: string;
            /** @description label for admin area menu */
            adminAreaLabel?: string;
            /** @description Icon for admin area menu */
            adminAreaIcon?: string;
            /** @description label for user area menu */
            userAreaLabel?: string;
            /** @description Icon for user area menu */
            userAreaIcon?: string;
            /** @description menu items list */
            userAreaMenuItems?: components["schemas"]["FaceNB001MenuItemV1"][];
        };
        DomainUserViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description user */
            user?: components["schemas"]["DomainUserV2"];
        };
        DomainListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description domain list */
            domains?: components["schemas"]["DomainViewV1"][];
        };
        DomainClassOwnerTypeListRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - twin class owner types */
            twinClassOwnerTypes?: components["schemas"]["TwinClassOwnerTypeV1"][];
        };
        TwinClassOwnerTypeV1: {
            /**
             * @description owner type
             * @example SYSTEM
             * @enum {string}
             */
            id?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
            /**
             * @description name
             * @example Some name
             */
            name?: string;
            /**
             * @description description
             * @example Some description
             */
            description?: string;
        };
        DomainBusinessAccountViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description result - domain business account */
            businessAccount?: components["schemas"]["DomainBusinessAccountV1"];
        };
        CommentListRsv1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description pagination data */
            pagination?: components["schemas"]["PaginationV1"];
            /** @description comment data */
            comments?: components["schemas"]["CommentV1"][];
        };
        AttachmentViewRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description results - related objects, if lazeRelation is false */
            relatedObjects?: components["schemas"]["RelatedObjectsV1"];
            /** @description attachment details */
            attachment?: components["schemas"]["AttachmentV1"];
        };
        AttachmentQuotasBaseV1: {
            /**
             * Format: int64
             * @description Quota count
             */
            quotaCount?: number;
            /**
             * Format: int64
             * @description Quota size
             */
            quotaSize?: number;
            /**
             * Format: int64
             * @description Used count
             */
            usedCount?: number;
            /**
             * Format: int64
             * @description Used size
             */
            usedSize?: number;
        };
        AttachmentQuotasRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description attachment quotas details */
            quotas?: components["schemas"]["AttachmentQuotasBaseV1"];
        };
        AuthLoginKeyRsV1: {
            /**
             * Format: int32
             * @description request processing status (see ErrorCode enum)
             * @example 0
             */
            status?: number;
            /**
             * @description User friendly, localized request processing status description
             * @example success
             */
            msg?: string;
            /**
             * @description request processing status description, technical
             * @example success
             */
            statusDetails?: string;
            /** @description public key to encrypt login */
            publicKey?: components["schemas"]["CryptKeyV1"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    userUpdateV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateRqV1"];
            };
        };
        responses: {
            /** @description User was updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    userDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    userLocaleUpdateV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example en */
                localeName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinflowViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showTransition2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTrigger2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinValidator2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinValidator2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflow2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowTransition2TwinflowTransitionValidatorRuleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowTransitionValidatorRule2TwinValidatorMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowTransitionValidatorRule2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
                twinflowId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twinflow details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinflowViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinflowUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
                twinflowId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinflowUpdateRqV1"];
            };
        };
        responses: {
            /** @description Twinflow prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinflowBaseV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinStatusViewV1: {
        parameters: {
            query?: {
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinStatus2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5 */
                twinStatusId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin status data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinStatusRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinStatusUpdateV1: {
        parameters: {
            query?: {
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5 */
                twinStatusId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinStatusUpdateRqV1"];
            };
        };
        responses: {
            /** @description Twin status data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinStatusUpdateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassFieldViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassField2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassField2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassField2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d */
                twinClassFieldId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin class field information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassFieldRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassFieldUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassField2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassField2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassField2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d */
                twinClassFieldId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassFieldUpdateRqV1"];
            };
        };
        responses: {
            /** @description Twin class data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassFieldRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassFieldUpdateV2: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassFieldUpdateRqV2"];
            };
        };
        responses: {
            /** @description Twin class fields updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassFieldCreateV2: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassFieldCreateRqV2"];
            };
        };
        responses: {
            /** @description Twin class fields created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin class prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassUpdateRqV1"];
            };
        };
        responses: {
            /** @description Twin class prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassUpdateV2: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassUpdateRqV2"];
            };
        };
        responses: {
            /** @description Twin classes updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassCreateV2: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassCreateRqV2"];
            };
        };
        responses: {
            /** @description Twin classes created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassCreateRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinUpdateRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinDeleteV1: {
        parameters: {
            query?: {
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinUntouchV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
                /** @example WATCHED */
                touchId: "WATCHED" | "STARRED" | "REVIEWED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTouchAddV1: {
        parameters: {
            query?: {
                showTouch2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTouchMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
                /** @example WATCHED */
                touchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTouchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    tierUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showTierMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 64807201-e3d6-4016-b699-b36c5f91c58e */
                tierId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TierUpdateRqV1"];
            };
        };
        responses: {
            /** @description Tier data updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListOptionRsV3"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    tierServiceDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 64807201-e3d6-4016-b699-b36c5f91c58e */
                tierId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantUserGroupUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 12fd2df0-cae7-455f-a721-eaec415105a4 */
                permissionGrantUserGroupId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantUserGroupUpdateRqV1"];
            };
        };
        responses: {
            /** @description Permission grant user group updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantUserGroupSaveRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantUserGroupDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 12fd2df0-cae7-455f-a721-eaec415105a4 */
                permissionGrantUserGroupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantUserUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryEraser2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryEraserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9e8641f2-dda1-4a43-9a23-8786124cdb6b */
                permissionGrantUserId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantUserUpdateRqV1"];
            };
        };
        responses: {
            /** @description Permission grant user was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantUserSaveRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantUserDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9e8641f2-dda1-4a43-9a23-8786124cdb6b */
                permissionGrantUserId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Permission grant user was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantTwinRoleUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantTwinRole2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantTwinRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 22fd2df0-cae7-455f-a721-eaec415105a4 */
                permissionGrantTwinRoleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantTwinRoleUpdateRqV1"];
            };
        };
        responses: {
            /** @description Permission grant twin role update */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantTwinRoleRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantTwinRoleDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 22fd2df0-cae7-455f-a721-eaec415105a4 */
                permissionGrantTwinRoleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantSpaceRoleUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f64ec2c1-a791-4305-acfc-6925d671c005 */
                permissionGrantSpaceRoleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantSpaceRoleUpdateRqV1"];
            };
        };
        responses: {
            /** @description Permission grant space role update */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantSpaceRoleRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantSpaceRoleDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f64ec2c1-a791-4305-acfc-6925d671c005 */
                permissionGrantSpaceRoleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantAssigneePropagationUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantAssigneePropagation2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagationMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPropagationTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example a7485d77-16bc-440e-a88e-1a576954a839 */
                permissionGrantAssigneePropagationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantAssigneePropagationUpdateRqV1"];
            };
        };
        responses: {
            /** @description Permission grant assignee propagation update */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantAssigneePropagationRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    linkViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showLinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showLinkSrc2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                linkId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Link data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinkViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    linkUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showLinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showLinkSrc2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                linkId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LinkUpdateV1"];
            };
        };
        responses: {
            /** @description Updated link */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinkUpdateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    i18nTranslationUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showI18nTranslation2I18nMode?: "HIDE" | "SHORT" | "DETAILED";
                showI18nTranslationMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["I18nUpdateRqV1"];
            };
        };
        responses: {
            /** @description I18n translation data updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["I18nTranslationListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryPipelineUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                factoryPipelineId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryPipelineUpdateRqV1"];
            };
        };
        responses: {
            /** @description Factory data pipeline update */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryPipelineRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryMultiplierUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultiplier2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryMultiplierFiltersCountMode?: "HIDE" | "SHOW";
                showFactoryMultiplierMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example eb773f30-8f24-4ec7-8f06-9dc71d351177 */
                factoryMultiplierId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryMultiplierUpdateRqV1"];
            };
        };
        responses: {
            /** @description Factory data multiplier update */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryMultiplierRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryBranchViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranch2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranch2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 99956a15-6858-40ba-b0aa-b123c54e250d */
                factoryBranchId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Factory branch data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryBranchViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryBranchUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranch2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranch2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 99956a15-6858-40ba-b0aa-b123c54e250d */
                factoryBranchId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryBranchUpdateRqv1"];
            };
        };
        responses: {
            /** @description Factory data branch update */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryBranchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                factoryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                factoryId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryUpdateRqV1"];
            };
        };
        responses: {
            /** @description Factory data update */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryPipelineStepUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStepMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 99856a15-6858-40ba-b0aa-b123c54e250d */
                factoryPipelineStepId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryPipelineStepUpdateRqV1"];
            };
        };
        responses: {
            /** @description Factory pipeline set updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryPipelineStepRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryEraserUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryEraser2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryEraserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 47991b35-e9fb-454e-a9b1-d715b2e6c71e */
                factoryEraserId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryEraserUpdateRqV1"];
            };
        };
        responses: {
            /** @description Factory eraser was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryEraserSaveRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    draftCommitV1: {
        parameters: {
            query?: {
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
                draftId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twinflow prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDomainMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainNavbar2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainUpdateRqV1"];
            };
        };
        responses: {
            /** @description domain was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainViewRsv1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainCreateV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainCreateRqV1"];
            };
        };
        responses: {
            /** @description Domain was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainViewRsv1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListOptionViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListOption2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showDataListOption2DataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 7de977d4-df6d-4250-9cb2-088363d139a1 */
                dataListOptionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListOptionRsV3"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListOptionUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListOption2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showDataListOption2DataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 7de977d4-df6d-4250-9cb2-088363d139a1 */
                dataListOptionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListOptionUpdateRqV1"];
            };
        };
        responses: {
            /** @description Updated data list option data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListOptionRsV3"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListOptionUpdateV2: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListOptionUpdateRqV2"];
            };
        };
        responses: {
            /** @description Data list option batch updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListOptionCreateV2: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListOptionCreateRqV2"];
            };
        };
        responses: {
            /** @description The data list option batch was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example e844a4e5-1c09-474e-816f-05cdb1f093ed */
                dataListId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example e844a4e5-1c09-474e-816f-05cdb1f093ed */
                dataListId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListUpdateRqV1"];
            };
        };
        responses: {
            /** @description Data list update */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinCommentV1: {
        parameters: {
            query?: {
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
                commentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinCommentUpdateV1: {
        parameters: {
            query?: {
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
                commentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentUpdateRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinCommentDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
                commentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    businessAccountUpdateV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                businessAccountId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BusinessAccountUpdateRqV1"];
            };
        };
        responses: {
            /** @description User was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    businessAccountDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                businessAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainSearchPublicV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDomainMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainSearchRqV1"];
            };
        };
        responses: {
            /** @description Public domain details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListOptionSearchPublicListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListOption2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showDataListOption2DataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
                /** @example en */
                Locale: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListOptionSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListOptionSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListOptionsMapViewPublicV1: {
        parameters: {
            query?: {
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
                /** @example en */
                Locale: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListOptionMapRqV1"];
            };
        };
        responses: {
            /** @description Map {option id/list data option} prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListOptionMapRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListPublicSearchV1: {
        parameters: {
            query?: {
                showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
                /** @example en */
                Locale: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListSearchRqV1"];
            };
        };
        responses: {
            /** @description Public list details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    userGroupSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showUserGroup2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserGroupSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserGroupSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    userGroupMemberManageV1: {
        parameters: {
            query?: {
                showUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserGroupMemberManageRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserGroupListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    userAddV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserAddRqV1"];
            };
        };
        responses: {
            /** @description User was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    userSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showUserMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinflowSchemaSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showTwinflowSchema2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowSchema2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinflowSchemaSearchRqV1"];
            };
        };
        responses: {
            /** @description Twinflow schema list prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinflowSchemaSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    transitionCreateV1: {
        parameters: {
            query?: {
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
                twinflowId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransitionCreateRqV1"];
            };
        };
        responses: {
            /** @description Transition data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransitionCreateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinflowSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showTransition2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTrigger2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinValidator2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinValidator2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflow2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowTransition2TwinflowTransitionValidatorRuleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowTransitionValidatorRule2TwinValidatorMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowTransitionValidatorRule2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinflowListRqV1"];
            };
        };
        responses: {
            /** @description Twinflow list prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinflowListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinStatusSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinStatus2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinStatusSearchRqV1"];
            };
        };
        responses: {
            /** @description Twin status list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinStatusSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassFieldSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassField2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassField2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassField2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassFieldSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassFieldSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    validHeadV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchSimpleV1"];
            };
        };
        responses: {
            /** @description Twin class data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinflowCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinflowCreateRqV1"];
            };
        };
        responses: {
            /** @description Twinflow data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinflowCreateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinStatusCreateV1: {
        parameters: {
            query?: {
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinStatusCreateRqV1"];
            };
        };
        responses: {
            /** @description Twin status data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinStatusCreateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    tagSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagSearchRqV1"];
            };
        };
        responses: {
            /** @description Tag data result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    validLinkedTwinV1: {
        parameters: {
            query?: {
                headTwinId?: string;
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                linkId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchSimpleV1"];
            };
        };
        responses: {
            /** @description Twin class data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassFieldCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassField2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassField2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassField2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassFieldCreateRqV1"];
            };
        };
        responses: {
            /** @description Twin class data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassFieldRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassDuplicateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassDuplicateRqV1"];
            };
        };
        responses: {
            /** @description Twin class copy result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassCreateRqV1"];
            };
        };
        responses: {
            /** @description Twin class data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassCreateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinClassListRqV1"];
            };
        };
        responses: {
            /** @description Twin class list prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    validLinkedTwinsV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchSimpleV1"];
            };
        };
        responses: {
            /** @description Twin class data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissonCheckOverviewV1: {
        parameters: {
            query?: {
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpaceRoleUser2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRoleUserGroup2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRoleUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRoleUserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionCheckOverviewRqV1"];
            };
        };
        responses: {
            /** @description Twin list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    validLinkedTwinsV1_1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                linkId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchSimpleV1"];
            };
        };
        responses: {
            /** @description Twin class data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinLinkAddV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinLinkAddRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinLinkAddRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinFieldListUpdateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinFieldListUpdateRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinFieldByKeySaveV2: {
        parameters: {
            query: {
                /** @example alcosi */
                fieldValue: string;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
                /** @example brand */
                fieldKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinFieldRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinFieldByKeyViewV1: {
        parameters: {
            query?: {
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
                /** @example brand */
                fieldKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinFieldRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinFieldByKeySaveV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
                /** @example brand */
                fieldKey: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinFieldUpdateRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinFieldRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    attachmentCreateV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttachmentCreateRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttachmentAddRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinCreateV2: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinCreateRqV2"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinCreateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinCreateV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinCreateRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinCreateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    "twinTouchAddListV1 ": {
        parameters: {
            query?: {
                showTouch2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTouchMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example WATCHED */
                touchId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinListTouchAddRqV1"];
            };
        };
        responses: {
            /** @description Twin touch data list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTouchListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinSearchByAliasV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example tools */
                searchAlias: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchByAliasRqV1"];
            };
        };
        responses: {
            /** @description Twin list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinSearchByAliasCountV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchByAliasBatchRqV1"];
            };
        };
        responses: {
            /** @description Map { alias / count } */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchBatchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinSearchByIdV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 8c580967-c050-47cf-ac27-4096c6dda2d1 */
                searchId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchByAliasRqV1"];
            };
        };
        responses: {
            /** @description Twin list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinSearchV3: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchRqV1"][];
            };
        };
        responses: {
            /** @description Twin list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinSearchV2: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchRqV1"];
            };
        };
        responses: {
            /** @description Twin list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchRqV1"];
            };
        };
        responses: {
            /** @description Twin list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinSearchCountV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinSearchBatchRqV1"];
            };
        };
        responses: {
            /** @description Map { frontendId / count } */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinSearchBatchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    historySearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showHistory2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showHistory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HistorySearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistorySearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinDeleteBatchV1: {
        parameters: {
            query?: {
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinDeleteRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinBatchCreateV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinBatchCreateRqV1"];
            };
        };
        responses: {
            /** @description Import was completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionByAliasPerformV2: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example start */
                transitionAlias: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionPerformRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionPerformRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionByAliasPerformV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example start */
                transitionAlias: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionPerformRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionByAliasPerformBatchV2: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example start */
                transitionAlias: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionPerformBatchRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionPerformRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionByAliasPerformBatchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example start */
                transitionAlias: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionPerformBatchRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionByAliasDraftV1: {
        parameters: {
            query?: {
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example start */
                transitionAlias: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionDraftRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionDraftRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionByAliasDraftBatchV1: {
        parameters: {
            query?: {
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example start */
                transitionAlias: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionDraftBatchRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionDraftRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    transitionAliasSearchV1: {
        parameters: {
            query?: {
                showTransitionAliasMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransitionAliasSearchRqV1"];
            };
        };
        responses: {
            /** @description Transition alias data list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransitionAliasSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    transitionViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTrigger2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinValidator2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinValidator2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowTransition2TwinflowTransitionValidatorRuleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowTransitionValidatorRule2TwinValidatorMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowTransitionValidatorRule2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                transitionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transition details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransitionViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    transitionUpdateV1: {
        parameters: {
            query?: {
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                transitionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransitionUpdateRqV1"];
            };
        };
        responses: {
            /** @description Transition prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinflowTransitionUpdateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionPerformV2: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                transitionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionPerformRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionPerformRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionPerformV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                transitionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionPerformRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionPerformBatchV2: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                transitionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionPerformBatchRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionPerformRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionPerformBatchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                transitionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionPerformBatchRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionDraftV1: {
        parameters: {
            query?: {
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                transitionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionDraftRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionDraftRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinTransitionDraftBatchV1: {
        parameters: {
            query?: {
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
                transitionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TwinTransitionDraftBatchRqV1"];
            };
        };
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinTransitionDraftRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    transitionSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransitionSearchRqV1"];
            };
        };
        responses: {
            /** @description Transition data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransitionSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    tierCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showTier2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showTier2TwinclassSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showTier2TwinflowSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showTierMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TierCreateRqV1"];
            };
        };
        responses: {
            /** @description Tier added successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TierRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    tierSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showTier2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showTier2TwinclassSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showTier2TwinflowSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showTierMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TierSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TierSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    spaceRoleSearchListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpaceRoleSearchRqV1"];
            };
        };
        responses: {
            /** @description Space role list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpaceRoleSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    spaceRoleWithinUsersMapV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpace2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                spaceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRefSpaceRoleSearchV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithinSpaceRolesListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    spaceRoleUserOverrideV1: {
        parameters: {
            query?: {
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showUserMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                spaceId: string;
                /** @example 793e3120-e14a-4a22-ab09-060b9fedee35 */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpaceRoleUserOverrideRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    spaceRoleUserManageV1: {
        parameters: {
            query?: {
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showUserMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                spaceId: string;
                /** @example 793e3120-e14a-4a22-ab09-060b9fedee35 */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpaceRoleUserRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionSchemaSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showPermissionSchema2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionSchema2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionSchemaSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionSchemaSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGroupSearchListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGroupSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGroupSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantUserGroupCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantUserGroupCreateRqV1"];
            };
        };
        responses: {
            /** @description Permission grant user group created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantUserGroupSaveRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantUserGroupSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantUserGroupSearchRqV1"];
            };
        };
        responses: {
            /** @description Permission grant user group list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantUserGroupSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantUserViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUser2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUser2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9e8641f2-dda1-4a43-9a23-8786124cdb6b */
                grantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantUserViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantUserCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryEraser2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryEraserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantUserCreateRqV1"];
            };
        };
        responses: {
            /** @description Permission grant user created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantUserSaveRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantUserSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUser2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUser2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantUserSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantUserSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantTwinRoleCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantTwinRole2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantTwinRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantTwinRoleCreateRqV1"];
            };
        };
        responses: {
            /** @description permission grant twin role create add */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantTwinRoleRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantTwinRoleSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantTwinRole2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantTwinRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantTwinRoleSearchRqV1"];
            };
        };
        responses: {
            /** @description Permission grant twin role list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantTwinRoleSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantSpaceRoleCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantSpaceRoleCreateRqV1"];
            };
        };
        responses: {
            /** @description permission grant space role add */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantSpaceRoleRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantSpaceRoleSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantSpaceRoleSearchRqV1"];
            };
        };
        responses: {
            /** @description Permission grant space role list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantSpaceRoleSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantAssigneePropagationCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantAssigneePropagation2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagationMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPropagationTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantAssigneePropagationCreateRqV1"];
            };
        };
        responses: {
            /** @description permission grant assignee propagation add */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantAssigneePropagationRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantAssigneePropagationSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantAssigneePropagation2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagationMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPropagationTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantAssigneePropagationSearchRqV1"];
            };
        };
        responses: {
            /** @description Permission grant assignee propagation list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantAssigneePropagationSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example abdeef68-7d6d-4385-9906-e3b701d2c503 */
                permissionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionUpdateV1: {
        parameters: {
            query?: {
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example abdeef68-7d6d-4385-9906-e3b701d2c503 */
                permissionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionUpdateRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionUpdateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionCreateV1: {
        parameters: {
            query?: {
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionCreateRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionCreateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionSearchListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionSearchRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    linkCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showLinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showLinkSrc2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LinkCreateV1"];
            };
        };
        responses: {
            /** @description Created link */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinkCreateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    linkSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showLinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showLinkSrc2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LinkSearchRqV1"];
            };
        };
        responses: {
            /** @description Link data list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinkSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    i18nTranslationSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showI18nTranslation2I18nMode?: "HIDE" | "SHORT" | "DETAILED";
                showI18nTranslationMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["I18nTranslationSearchV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["I18nTranslationListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    featurerSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeaturerSearchRqV1"];
            };
        };
        responses: {
            /** @description Featurer data result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeaturerSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryPipelineStepSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStepMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryPipelineStepSearchRqV1"];
            };
        };
        responses: {
            /** @description Factory pipeline step list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryPipelineStepSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryPipelineSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryPipelineSearchRqV1"];
            };
        };
        responses: {
            /** @description Factory pipeline list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryPipelineSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryMultiplierFilterSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultiplier2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryMultiplierFilter2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplierFilter2FactoryMultiplierMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplierFilter2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryMultiplierFilterMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplierFiltersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryMultiplierFilterSearchRqV1"];
            };
        };
        responses: {
            /** @description Factory multiplier filter list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryMultiplierFilterSearchRsDTOv1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryMultiplierSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultiplier2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryMultiplierFiltersCountMode?: "HIDE" | "SHOW";
                showFactoryMultiplierMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryMultiplierSearchRqV1"];
            };
        };
        responses: {
            /** @description Factory multiplier list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryMultiplierSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryEraserSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryEraser2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryEraserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryEraserSearchRqV1"];
            };
        };
        responses: {
            /** @description Factory eraser data list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryEraserSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryConditionSetSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryConditionSet2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryConditionSetSearchRqV1"];
            };
        };
        responses: {
            /** @description Condition set list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryConditionSetSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryBranchSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranch2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranch2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryBranchSearchRqV1"];
            };
        };
        responses: {
            /** @description Factory branch list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryBranchSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryPipelineCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                factoryId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryPipelineCreateRqV1"];
            };
        };
        responses: {
            /** @description Factory pipeline add */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryPipelineRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryMultiplierCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultiplier2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryMultiplierFiltersCountMode?: "HIDE" | "SHOW";
                showFactoryMultiplierMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                factoryId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryMultiplierCreateRqV1"];
            };
        };
        responses: {
            /** @description Factory multiplier add */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryMultiplierRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryEraserCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryEraser2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryEraserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                factoryId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryEraserCreateRqV1"];
            };
        };
        responses: {
            /** @description Factory eraser created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryEraserSaveRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryEraserDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                factoryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Factory eraser deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryBranchCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranch2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranch2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                factoryId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryBranchCreateRqV1"];
            };
        };
        responses: {
            /** @description Factory branch add */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryBranchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryCreateRqV1"];
            };
        };
        responses: {
            /** @description Factory data add */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factorySearchListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactorySearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactorySearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    " factoryPipelineStepCreateV1": {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStepMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                factoryPipelineId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FactoryPipelineStepCreateRqV1"];
            };
        };
        responses: {
            /** @description factory pipeline step added successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryPipelineStepRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryPipelineStepDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 99856a15-6858-40ba-b0aa-b123c54e250d */
                factoryPipelineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainUserAddV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                domainId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainUserAddV1"];
            };
        };
        responses: {
            /** @description User was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainBusinessAccountUpdateV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                domainId: string;
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                businessAccountId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainBusinessAccountUpdateV1"];
            };
        };
        responses: {
            /** @description BusinessAccount was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainBusinessAccountAddV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                domainId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainBusinessAccountAddV1"];
            };
        };
        responses: {
            /** @description BusinessAccount was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainCreateV2: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description request json */
                    request: components["schemas"]["DomainCreateRqV1"];
                    /**
                     * Format: binary
                     * @description Dark icon
                     */
                    iconDark: string;
                    /**
                     * Format: binary
                     * @description Light icon
                     */
                    iconLight: string;
                };
            };
        };
        responses: {
            /** @description Domain was created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainViewRsv1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainUserSearchListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showBusinessAccountUser2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showBusinessAccountUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showBusinessAccountUserCollectionMode?: "HIDE" | "SHOW";
                showDomainUser2BusinessAccountUserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainUserMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainUserSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainUserSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainBusinessAccountSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDomainBusinessAccount2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainBusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainBusinessAccountSearchRqV1"];
            };
        };
        responses: {
            /** @description Domain business account list prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainBusinessAccountSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListOptionCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListOption2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showDataListOption2DataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListOptionCreateRqDV1"];
            };
        };
        responses: {
            /** @description The data list option was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListOptionRsV3"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListOptionSearchListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListOption2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showDataListOption2DataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListOptionSearchRqV1"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListOptionSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListOptionsMapViewV1: {
        parameters: {
            query?: {
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListOptionMapRqV1"];
            };
        };
        responses: {
            /** @description Map {option id/list data option} prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListOptionMapRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListCreateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListCreateRqV1"];
            };
        };
        responses: {
            /** @description Data list add */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListSearchV1: {
        parameters: {
            query?: {
                showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataListSearchRqV1"];
            };
        };
        responses: {
            /** @description List details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinCommentListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentListRsv1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinCommentAddV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreateRqV1"];
            };
        };
        responses: {
            /** @description Twin comment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentCreateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    commentSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentSearchRqDTOv1"];
            };
        };
        responses: {
            /** @description Comment status list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentSearchRsDTOv1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    businessAccountUserAddV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                businessAccountId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BusinessAccountUserAddRqV1"];
            };
        };
        responses: {
            /** @description User was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    attachmentValidateV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentCUDValidate2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showAttachmentValidateProblemsMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttachmentCUDValidateRqV1"];
            };
        };
        responses: {
            /** @description Attachment validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttachmentCUDValidateRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    attachmentSearchV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showAttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttachmentSearchRqV1"];
            };
        };
        responses: {
            /** @description List of attachments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttachmentSearchRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    authSignupByEmailInitiateV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthSignupByEmailRqV1"];
            };
        };
        responses: {
            /** @description SignUp to  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthSignupByEmailRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    authSignupByEmailConfirmV1: {
        parameters: {
            query: {
                verificationToken: string;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SignUp to  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthSignupByEmailConfirmRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    authRefreshV2: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthRefreshRqV2"];
            };
        };
        responses: {
            /** @description Login to  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthRefreshRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    authRefreshV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthRefreshRqV1"];
            };
        };
        responses: {
            /** @description Login to  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthRefreshRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    authM2MTokenV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthM2MLoginRqV1"];
            };
        };
        responses: {
            /** @description Login to  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthM2MTokenRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    authM2MLoginV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthM2MLoginRqV1"];
            };
        };
        responses: {
            /** @description Login to  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthM2MTokenRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    authLogoutV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthLogoutRqV1"];
            };
        };
        responses: {
            /** @description Logout success   */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    authLoginV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthLoginRqV1"];
            };
        };
        responses: {
            /** @description Login to  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthLoginRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    authConfigV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Login to  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthConfigRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getResourceFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Resource Id
                 * @example 09cd9a50-dcbe-4c73-b39e-65d2000a8e85
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": unknown;
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description File is not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    localeListPublicViewV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Public list details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocaleViewV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainViewByKeyPublicV1: {
        parameters: {
            query?: {
                showDomainMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header?: never;
            path: {
                /** @example alcosi */
                domainKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Public domain details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainViewPublicRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainViewPublicV1: {
        parameters: {
            query?: {
                showDomainMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header?: never;
            path: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                domainId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Public domain details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainViewPublicRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListOptionPublicViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
                /** @example en */
                Locale: string;
            };
            path: {
                /** @example 7de977d4-df6d-4250-9cb2-088363d139a1 */
                dataListOptionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Public list details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListOptionRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListPublicByKeyViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
                /** @example en */
                Locale: string;
            };
            path: {
                /** @example country */
                dataListKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Public list details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListPublicViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
                /** @example en */
                Locale: string;
            };
            path: {
                /** @example e844a4e5-1c09-474e-816f-05cdb1f093ed */
                dataListId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Public list details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    userGroupForUserListV1: {
        parameters: {
            query?: {
                showUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserGroupListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    userPermissionGroupedListV1: {
        parameters: {
            query?: {
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGroupedListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    userPermissionListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    currentUserPermissionGroupedListV1: {
        parameters: {
            query?: {
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGroupedListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    currentUserPermissionListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    userLocaleViewV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocaleRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassFieldDataListSharedInHeadV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d */
                twinClassFieldId: string;
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                headTwinId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassViewByKeyV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example TOOL */
                twinClassKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin class prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassFieldViewByKeyV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example TOOL */
                classKey: string;
                /** @example brand */
                fieldKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin class field information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassFieldRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassWidgetListV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Widget list prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WidgetListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassLinkListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showLinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassLinkListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassFieldListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassField2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassField2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassField2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin class field list prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassFieldListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassCardListV1: {
        parameters: {
            query?: {
                showCard2WidgetMode?: "HIDE" | "SHORT" | "DETAILED";
                showCardMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                twinClassId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin card list prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin class list prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinClassListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinViewByAliasV2: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinAlias: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinViewByAliasV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinAlias: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinViewV2: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinFieldCollectionMapMode?: "KEY" | "ID";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TwinRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    historyListV1: {
        parameters: {
            query?: {
                childDepth?: number;
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showHistory2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showHistory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    historyViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showHistory2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showHistory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                historyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    makeConfigForSubstitutions: {
        parameters: {
            query?: {
                filename?: string;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Run command */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommandRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    "Application info": {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppInfoRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    spaceRoleUserViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpace2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                spaceId: string;
                /** @example abdeef68-7d6d-4385-9906-e3b701d2c503 */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithinSpaceRolesViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    spaceRoleWithinAllUsersMapV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpace2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                spaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithinSpaceRolesListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    spaceRoleByUserListV1: {
        parameters: {
            query?: {
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showUserMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                spaceId: string;
                /** @example 793e3120-e14a-4a22-ab09-060b9fedee35 */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionSchemaViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showPermissionSchema2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionSchema2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example af143656-9899-4e1f-8683-48795cdefeac */
                schemaId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionSchemaViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGroupViewByKeyV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example LOCAL_PERMISSION */
                groupKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGroupViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGroupViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 7efd9df0-cae7-455f-a721-eaec455105a4 */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGroupViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantUserGroupViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 12fd2df0-cae7-455f-a721-eaec415105a4 */
                grantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Permission grant user group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantUserGroupViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantTwinRoleViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantTwinRole2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantTwinRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantTwinRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 22fd2df0-cae7-455f-a721-eaec415105a4 */
                grantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Permission grant twin role */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantTwinRoleViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantSpaceRoleViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 275bf3c4-951a-4d26-bb82-5e18361d301c */
                grantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Permission grant space role */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantSpaceRoleViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantAssigneePropagationViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagation2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionGrantAssigneePropagation2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGrantAssigneePropagationMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPropagationTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example a7485d77-16bc-440e-a88e-1a576954a839 */
                grantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Permission grant assignee propagation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantAssigneePropagationViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionViewByKeyV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example DENY_ALL */
                permissionKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    i18nViewV1: {
        parameters: {
            query?: {
                showI18nMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 633c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                i18nId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["I18nViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryPipelineStepViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStep2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineStepMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 99856a15-6858-40ba-b0aa-b123c54e250d */
                stepId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Factory pipeline step */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryPipelineStepViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryPipelineViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
                pipelineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Factory pipeline data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryPipelineViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryMultiplierFilterViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultiplier2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryMultiplierFilter2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplierFilter2FactoryMultiplierMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplierFilter2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryMultiplierFilterMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplierFiltersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 66956a15-6858-40ba-b0aa-b123c54e250d */
                multiplierId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Factory multiplier filter data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryMultiplierFilterViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryMultiplierViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultiplier2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultiplier2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryMultiplierFiltersCountMode?: "HIDE" | "SHOW";
                showFactoryMultiplierMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 66956a15-6858-40ba-b0aa-b123c54e250d */
                multiplierId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Factory multiplier */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryMultiplierViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryEraserViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryBranchesCountMode?: "HIDE" | "SHOW";
                showFactoryEraser2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryEraser2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFactoryEraserMode?: "HIDE" | "SHORT" | "DETAILED";
                showFactoryErasersCountMode?: "HIDE" | "SHOW";
                showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
                showFactoryPipelineCountMode?: "HIDE" | "SHOW";
                showFactoryUsagesCountMode?: "HIDE" | "SHOW";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 47991b35-e9fb-454e-a9b1-d715b2e6c71e */
                eraserId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Factory eraser data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryEraserViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    factoryConditionSetViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
                showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
                showFactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 69856a15-6858-40ba-b0aa-b123c54e250d */
                factoryConditionSetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Condition set */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FactoryConditionSetViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    faceViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin card list prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    faceWT003ViewV1: {
        parameters: {
            query?: {
                twinId?: string;
                lazyRelation?: unknown;
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WT003 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceWT003ViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    faceWT002ViewV1: {
        parameters: {
            query?: {
                twinId?: string;
                lazyRelation?: unknown;
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFaceWT002Button2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WT002 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceWT002ViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    faceWT001ViewV1: {
        parameters: {
            query?: {
                twinId?: string;
                lazyRelation?: unknown;
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFaceWT001Column2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WT001 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceWT001ViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    faceTW005ViewV1: {
        parameters: {
            query: {
                twinId: string;
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFaceTW005Button2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFaceTwidget2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description TW005 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceWT005ViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    faceTW004ViewV2: {
        parameters: {
            query: {
                twinId: string;
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFaceTW0042TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFaceTwidget2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description TW004 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceTW004ViewRsV2"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    faceTW004ViewV1: {
        parameters: {
            query: {
                twinId: string;
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFaceTW0042TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFaceTwidget2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description TW004 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceTW004ViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    faceTW002ViewV1: {
        parameters: {
            query: {
                twinId: string;
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFaceTW0022TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFaceTwidget2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description TW002 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceTW002ViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    faceTW001ViewV1: {
        parameters: {
            query: {
                twinId: string;
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFaceTW0012TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showFaceTwidget2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description TW001 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceTW001ViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    facePG002ViewV1: {
        parameters: {
            query?: {
                twinId?: string;
                lazyRelation?: unknown;
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFacePG002TabCollectionMode?: "HIDE" | "SHOW";
                showFacePG002TabWidgetCollectionMode?: "HIDE" | "SHOW";
                showFacePG002Widget2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PG002 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FacePG002ViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    facePG001ViewV1: {
        parameters: {
            query?: {
                twinId?: string;
                lazyRelation?: unknown;
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFacePG001Widget2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFacePG001WidgetCollectionMode?: "HIDE" | "SHOW";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PG001 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FacePG001ViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    faceNB001ViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showFaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFaceNB001MenuItem2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showFaceNB001MenuItem2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showFaceNB001MenuItemCollectionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
                showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                faceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description NB001 face config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FaceNB001ViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDomainMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainNavbar2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                domainId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description  domain details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainViewRsv1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainUserViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showBusinessAccountUser2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showBusinessAccountUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showBusinessAccountUserCollectionMode?: "HIDE" | "SHOW";
                showDomainUser2BusinessAccountUserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainUserMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainUserViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainCurrentUserViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showBusinessAccountUser2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showBusinessAccountUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showBusinessAccountUserCollectionMode?: "HIDE" | "SHOW";
                showDomainUser2BusinessAccountUserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainUserMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainUserViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainListV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDomainMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainNavbar2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                offset?: unknown;
                limit?: unknown;
                sortAsc?: unknown;
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description domain data list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinClassOwnerTypeListV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainClassOwnerTypeListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainBusinessAccountViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDomainBusinessAccount2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
                showDomainBusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                businessAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Domain business account prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainBusinessAccountViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    dataListByKeyViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example country */
                dataListKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List details prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataListRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    attachmentViewV1: {
        parameters: {
            query?: {
                lazyRelation?: unknown;
                showAttachment2CommentModeMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showAttachment2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showAttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showAttachmentModificationMode?: "HIDE" | "SHOW";
                showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showCommentActionMode?: "HIDE" | "SHOW";
                showFeaturerParamMode?: "HIDE" | "SHOW";
                showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
                showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinActionMode?: "HIDE" | "SHOW";
                showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
                showTwinAttachmentActionMode?: "HIDE" | "SHOW";
                showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
                showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinClassPage2FaceMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
                showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
                showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 553ef9bc-3b48-430d-90d3-bdee516c3d87 */
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttachmentViewRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    attachmentDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 553ef9bc-3b48-430d-90d3-bdee516c3d87 */
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deletion result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    attachmentDomainBusinessAccountQuotasV1: {
        parameters: {
            query?: {
                showAttachmentQuotasMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment quotas data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttachmentQuotasRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    attachmentDomainQuotasV1: {
        parameters: {
            query?: {
                showAttachmentQuotasMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment quotas data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttachmentQuotasRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    authCryptKeyV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Login to  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthLoginKeyRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    twinDeleteDraftedV1: {
        parameters: {
            query?: {
                showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
                showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
                showUser2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
            };
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
                twinId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Twin data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftRsV1"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    permissionGrantAssigneePropagationDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example a7485d77-16bc-440e-a88e-1a576954a839 */
                permissionGrantAssigneePropagationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainUserDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                domainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    domainBusinessAccountDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
                DomainId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
                AuthToken: string;
                /** @example WEB */
                Channel: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description BusinessAccount was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    businessAccountUserDeleteV1: {
        parameters: {
            query?: never;
            header: {
                /** @example WEB */
                Channel: string;
            };
            path: {
                /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
                businessAccountId: string;
                /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Access is denied */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
