/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/private/user/{userId}/v1": {
    /** Update user */
    put: operations["userUpdateV1"];
    /** Delete user */
    delete: operations["userDeleteV1"];
  };
  "/private/user/locale/{localeName}/v1": {
    /** Update user locale */
    put: operations["userLocaleUpdateV1"];
  };
  "/private/twinflow/{twinflowId}/v1": {
    /** Returns twinflow details */
    get: operations["twinflowViewV1"];
    /** Update twinflow by id */
    put: operations["twinflowUpdateV1"];
  };
  "/private/twin_status/{twinStatusId}/v1": {
    /** Return twin status data by id */
    get: operations["twinStatusViewV1"];
    /** Update twin status */
    put: operations["twinStatusUpdateV1"];
  };
  "/private/twin_class_field/{twinClassFieldId}/v1": {
    /** Returns twin class field list */
    get: operations["twinClassFieldViewV1"];
    /** Update twin class field */
    put: operations["twinClassFieldUpdateV1"];
  };
  "/private/twin_class/{twinClassId}/v1": {
    /** Returns twin class by id */
    get: operations["twinClassViewV1"];
    /** Update twin class by id */
    put: operations["twinClassUpdateV1"];
  };
  "/private/twin/{twinId}/v1": {
    /**
     * Returns twin data by id
     * @deprecated
     */
    get: operations["twinViewV1"];
    /** Update twin */
    put: operations["twinUpdateV1"];
    /** Delete twin by id */
    delete: operations["twinDeleteV1"];
  };
  "/private/twin/{twinId}/untouch/{touchId}/v1": {
    /** Unmark twin as touched for user */
    put: operations["twinUntouchV1"];
  };
  "/private/twin/{twinId}/touch/{touchId}/v1": {
    /** Mark twin as touched for user */
    put: operations["twinTouchAddV1"];
  };
  "/private/link/{linkId}/v1": {
    /** Link view */
    get: operations["linkViewV1"];
    /** Update link by id */
    put: operations["linkUpdateV1"];
  };
  "/private/factory_branch/{factoryBranchId}/v1": {
    /** Factory branch by id */
    get: operations["factoryBranchViewV1"];
    /** Factory branch update */
    put: operations["factoryBranchUpdateV1"];
  };
  "/private/factory/{factoryId}/v1": {
    /** Factory data */
    get: operations["factoryViewV1"];
    /** Factory update */
    put: operations["factoryUpdateV1"];
  };
  "/private/draft/{draftId}/commit/v1": {
    /** Commit draft by id */
    put: operations["draftCommitV1"];
  };
  "/private/data_list_option/{dataListOptionId}/v1": {
    /** Returns list data */
    get: operations["dataListOptionViewV1"];
    /** Data list option for update */
    put: operations["dataListOptionUpdateV1"];
  };
  "/private/data_list/{dataListId}/v1": {
    /** Returns list data */
    get: operations["dataListViewV1"];
    /** Data list update */
    put: operations["dataListUpdateV1"];
  };
  "/private/comment/{commentId}/v1": {
    /** Returns comment by comment id */
    get: operations["twinCommentV1"];
    /** Update comment and it's attachments */
    put: operations["twinCommentUpdateV1"];
    /** Delete comment with attachments */
    delete: operations["twinCommentDeleteV1"];
  };
  "/private/business_account/{businessAccountId}/v1": {
    /** Update businessAccount */
    put: operations["businessAccountUpdateV1"];
    /** Delete businessAccount */
    delete: operations["businessAccountDeleteV1"];
  };
  "/public/data_list_option/search/v1": {
    /** Return a list of all public data list options */
    post: operations["dataListOptionSearchPublicListV1"];
  };
  "/public/data_list_option/map/v1": {
    /** Returns map option id ref list data option */
    post: operations["dataListOptionsMapViewPublicV1"];
  };
  "/public/data_list/search/v1": {
    /** Returns public details lists */
    post: operations["dataListPublicSearchV1"];
  };
  "/private/user_group/search/v1": {
    /** Return a list of all user groups for the current domain */
    post: operations["userGroupSearchV1"];
  };
  "/private/user/{userId}/user_group/manage/v1": {
    /** Assign or discharge some group to user */
    post: operations["userGroupMemberManageV1"];
  };
  "/private/user/v1": {
    /** Smart endpoint for adding new user. It will also add user to domain and businessAccount if specified. If given businessAccount is not registered in domain, it will register it */
    post: operations["userAddV1"];
  };
  "/private/twinflow_schema/search/v1": {
    /** Returns twinflow schema search result */
    post: operations["twinflowSchemaSearchV1"];
  };
  "/private/twinflow/{twinflowId}/transition/v1": {
    /** Create new transition */
    post: operations["transitionCreateV1"];
  };
  "/private/twinflow/search/v1": {
    /** Returns twinflow search result */
    post: operations["twinflowSearchV1"];
  };
  "/private/twin_status/search/v1": {
    /** Returns twin status search result in current domain */
    post: operations["twinStatusSearchV1"];
  };
  "/private/twin_class_fields/search/v1": {
    /** Return a list of all twin class field for the current domain */
    post: operations["twinClassFieldSearchV1"];
  };
  "/private/twin_class/{twinClassId}/valid_heads/v1": {
    /** Get valid heads of given class */
    post: operations["validHeadV1"];
  };
  "/private/twin_class/{twinClassId}/twinflow/v1": {
    /** Create new twinflow */
    post: operations["twinflowCreateV1"];
  };
  "/private/twin_class/{twinClassId}/twin_status/v1": {
    /** Create new twin status */
    post: operations["twinStatusCreateV1"];
  };
  "/private/twin_class/{twinClassId}/tag/search/v1": {
    /** Tag search */
    post: operations["tagSearchV1"];
  };
  "/private/twin_class/{twinClassId}/link/{linkId}/valid_twins/v1": {
    /** Get valid twins list for link of new (not created) twin */
    post: operations["validLinkedTwinV1"];
  };
  "/private/twin_class/{twinClassId}/field/v1": {
    /** Create new twin class field */
    post: operations["twinClassFieldCreateV1"];
  };
  "/private/twin_class/{twinClassId}/duplicate/v1": {
    /** Duplicates twin class by id */
    post: operations["twinClassDuplicateV1"];
  };
  "/private/twin_class/v1": {
    /** Create new twin class */
    post: operations["twinClassCreateV1"];
  };
  "/private/twin_class/search/v1": {
    /** Returns twin class search result */
    post: operations["twinClassSearchV1"];
  };
  "/private/twin/{twinId}/valid_heads/v1": {
    /** Get valid twins list for link of existed twin */
    post: operations["validLinkedTwinsV1"];
  };
  "/private/twin/{twinId}/permisson_check_overview/v1": {
    /** Permisson check overview by twinId & userId */
    post: operations["permissonCheckOverviewV1"];
  };
  "/private/twin/{twinId}/link/{linkId}/valid_twins/v1": {
    /** Get valid twins list for link of new (not created) twin */
    post: operations["validLinkedTwinsV1_1"];
  };
  "/private/twin/{twinId}/link/v1": {
    /** Add link to twin */
    post: operations["twinLinkAddV1"];
  };
  "/private/twin/{twinId}/field_list/v1": {
    /** Updates twin fields data by keys */
    post: operations["twinFieldListUpdateV1"];
  };
  "/private/twin/{twinId}/field/{fieldKey}/v2": {
    /** Creates or updates twin field data by key. */
    post: operations["twinFieldByKeySaveV2"];
  };
  "/private/twin/{twinId}/field/{fieldKey}/v1": {
    /** Returns twin field data by key */
    get: operations["twinFieldByKeyViewV1"];
    /** Creates or updates twin field data by key. */
    post: operations["twinFieldByKeySaveV1"];
  };
  "/private/twin/{twinId}/attachment/v1": {
    /** Add attachment to twin */
    post: operations["attachmentAddV1"];
  };
  "/private/twin/v2": {
    /** Create new twin */
    post: operations["twinCreateV2"];
  };
  "/private/twin/v1": {
    /** Create new twin */
    post: operations["twinCreateV1"];
  };
  "/private/twin/touch/{touchId}/v1": {
    /** Mark twin list as touched for user */
    post: operations["twinTouchAddListV1 "];
  };
  "/private/twin/search_by_alias/{searchAlias}/v1": {
    /** Twins search by alias */
    post: operations["twinSearchByAliasV1"];
  };
  "/private/twin/search_by_alias/count/v1": {
    /** Count twins by search aliases */
    post: operations["twinSearchByAliasCountV1"];
  };
  "/private/twin/search/{searchId}/v1": {
    /** Twins search by search_id */
    post: operations["twinSearchByIdV1"];
  };
  "/private/twin/search/v3": {
    /** Twins basic search for several queries connected by OR operator */
    post: operations["twinSearchV3"];
  };
  "/private/twin/search/v2": {
    /** Twins basic search */
    post: operations["twinSearchV2"];
  };
  "/private/twin/search/v1": {
    /** Twins basic search */
    post: operations["twinSearchV1"];
  };
  "/private/twin/search/count/v1": {
    /** Count twins by frontendId */
    post: operations["twinSearchCountV1"];
  };
  "/private/twin/history/search/v1": {
    /** Return a list of all histories */
    post: operations["historySearchV1"];
  };
  "/private/twin/delete/v1": {
    /** Delete twins by self id */
    post: operations["twinDeleteBatchV1"];
  };
  "/private/transition_by_alias/{transitionAlias}/perform/v2": {
    /** Perform twin transition by alias. An alias can be useful for performing transitions for twin from different statuses. For incoming twin, the appropriate transition will be selected based on its current status. */
    post: operations["twinTransitionByAliasPerformV2"];
  };
  "/private/transition_by_alias/{transitionAlias}/perform/v1": {
    /**
     * Perform twin transition by alias. An alias can be useful for performing transitions for twin from different statuses. For incoming twin, the appropriate transition will be selected based on its current status.
     * @deprecated
     */
    post: operations["twinTransitionByAliasPerformV1"];
  };
  "/private/transition_by_alias/{transitionAlias}/perform/batch/v2": {
    /** Perform transition for batch of twins by alias. An alias can be useful for performing transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status. */
    post: operations["twinTransitionByAliasPerformBatchV2"];
  };
  "/private/transition_by_alias/{transitionAlias}/perform/batch/v1": {
    /**
     * Perform transition for batch of twins by alias. An alias can be useful for performing transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status.
     * @deprecated
     */
    post: operations["twinTransitionByAliasPerformBatchV1"];
  };
  "/private/transition_by_alias/{transitionAlias}/draft/v1": {
    /** Draft twin transition by alias. Result will not be commited to db, and can be browsed by draftId */
    post: operations["twinTransitionByAliasDraftV1"];
  };
  "/private/transition_by_alias/{transitionAlias}/draft/batch/v1": {
    /** Draft transition for batch of twins by alias. An alias can be useful for Drafting transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status. */
    post: operations["twinTransitionByAliasDraftBatchV1"];
  };
  "/private/transition/{transitionId}/v1": {
    /** Returns transition details */
    get: operations["transitionViewV1"];
    /** Update transition by id */
    post: operations["transitionUpdateV1"];
  };
  "/private/transition/{transitionId}/perform/v2": {
    /** Perform twin transition by transition id. Transition will be performed only if current twin status is correct for given transition */
    post: operations["twinTransitionPerformV2"];
  };
  "/private/transition/{transitionId}/perform/v1": {
    /**
     * Perform twin transition by transition id. Transition will be performed only if current twin status is correct for given transition
     * @deprecated
     */
    post: operations["twinTransitionPerformV1"];
  };
  "/private/transition/{transitionId}/perform/batch/v2": {
    /** Perform transition for batch of twins by transition id. Transition will be performed only if current twin status is correct for given transition */
    post: operations["twinTransitionPerformBatchV2"];
  };
  "/private/transition/{transitionId}/perform/batch/v1": {
    /**
     * Perform transition for batch of twins by transition id. Transition will be performed only if current twin status is correct for given transition
     * @deprecated
     */
    post: operations["twinTransitionPerformBatchV1"];
  };
  "/private/transition/{transitionId}/draft/v1": {
    /** Draft twin transition by transition id. Result will not be commited to db, and can be browsed by draftId */
    post: operations["twinTransitionDraftV1"];
  };
  "/private/transition/{transitionId}/draft/batch/v1": {
    /** Draft transition for batch of twins by transition id */
    post: operations["twinTransitionDraftBatchV1"];
  };
  "/private/transition/search/v1": {
    /** Returns transition search result */
    post: operations["transitionSearchV1"];
  };
  "/private/space/{spaceId}/users/search/v1": {
    /** Search users within their roles of specific space */
    post: operations["spaceRoleWithinUsersMapV1"];
  };
  "/private/space/{spaceId}/role/{roleId}/users/override/v1": {
    /** Add/Remove user list by role and twin */
    post: operations["spaceRoleUserOverrideV1"];
  };
  "/private/space/{spaceId}/role/{roleId}/users/manage/v1": {
    /** Adding/removing a user to the space by role */
    post: operations["spaceRoleUserManageV1"];
  };
  "/private/permission_schema/search/v1": {
    /** Return a list of all permission schemas for the current domain */
    post: operations["permissionSchemaSearchV1"];
  };
  "/private/permission_group/search/v1": {
    /** Return a list of all permission groups for the current domain */
    post: operations["permissionGroupSearchListV1"];
  };
  "/private/permission_grant/user_group/search/v1": {
    /** Permission grant user-group search */
    post: operations["permissionGrantUserGroupSearchV1"];
  };
  "/private/permission_grant/user/{grantId}/v1": {
    /** Return the permission grant users for the current domain */
    post: operations["permissionGrantUserViewV1"];
  };
  "/private/permission_grant/user/search/v1": {
    /** Return a list of all permission grant users for the current domain */
    post: operations["permissionGrantUserSearchV1"];
  };
  "/private/permission_grant/twin_role/search/v1": {
    /** Permission grant twin role search */
    post: operations["permissionGrantTwinRoleSearchV1"];
  };
  "/private/permission_grant/space_role/search/v1": {
    /** Permission grant space role search */
    post: operations["permissionGrantSpaceRoleSearchV1"];
  };
  "/private/permission_grant/assignee_propagation/search/v1": {
    /** Permission grant assignee propagation search */
    post: operations["permissionGrantAssigneePropagationSearchV1"];
  };
  "/private/permission/{permissionId}/v1": {
    /** Return the permission for the current domain */
    get: operations["permissionViewV1"];
    /** Update permission */
    post: operations["permissionUpdateV1"];
  };
  "/private/permission/v1": {
    /** Create permission */
    post: operations["permissionCreateV1"];
  };
  "/private/permission/search/v1": {
    /** Return a list of all permissions for the current domain */
    post: operations["permissionSearchListV1"];
  };
  "/private/link/v1": {
    /** Create new link */
    post: operations["linkCreateV1"];
  };
  "/private/link/search/v1": {
    /** Link search */
    post: operations["linkSearchV1"];
  };
  "/private/featurer/search/v1": {
    /** Featurer search */
    post: operations["featurerSearchV1"];
  };
  "/private/factory_pipeline_step/search/v1": {
    /** Factory pipeline step search */
    post: operations["factoryPipelineStepSearchV1"];
  };
  "/private/factory_pipeline/search/v1": {
    /** Factory pipeline search */
    post: operations["factoryPipelineSearchV1"];
  };
  "/private/factory_multiplier_filter/search/v1": {
    /** Factory multiplier filter search */
    post: operations["factoryMultiplierFilterSearchV1"];
  };
  "/private/factory_multiplier/search/v1": {
    /** Factory multiplier search */
    post: operations["factoryMultiplierSearchV1"];
  };
  "/private/factory_eraser/search/v1": {
    /** Factory eraser search */
    post: operations["factoryEraserSearchV1"];
  };
  "/private/factory_condition_set/search/v1": {
    /** Condition set search */
    post: operations["factoryConditionSetSearchV1"];
  };
  "/private/factory_branch/search/v1": {
    /** Factory branch search */
    post: operations["factoryBranchSearchV1"];
  };
  "/private/factory/{factoryId}/factory_branch/v1": {
    /** Factory branch add */
    post: operations["factoryBranchCreateV1"];
  };
  "/private/factory/v1": {
    /** Factory add */
    post: operations["factoryCreateV1"];
  };
  "/private/factory/search/v1": {
    /** Return a list of all factories for the current domain */
    post: operations["factorySearchListV1"];
  };
  "/private/domain/{domainId}/user/v1": {
    /** Add user to domainIf user is not exist it will be created. */
    post: operations["domainUserAddV1"];
  };
  "/private/domain/{domainId}/business_account/{businessAccountId}/v1": {
    /** Update settings for businessAccount in domain */
    post: operations["domainBusinessAccountUpdateV1"];
  };
  "/private/domain/{domainId}/business_account/v1": {
    /** Add businessAccount to domain. If business account is not exist it will be created. Domain must be already present. */
    post: operations["domainBusinessAccountAddV1"];
  };
  "/private/domain/v2": {
    /** Add new domain with icons */
    post: operations["domainAddV2"];
  };
  "/private/domain/v1": {
    /** Add new domain. */
    post: operations["domainAddV1"];
  };
  "/private/domain/user/search/v1": {
    /** Return a list of users by current domain */
    post: operations["domainUserSearchListV1"];
  };
  "/private/domain/business_account/search/v1": {
    /** Returns domain business account search result */
    post: operations["domainBusinessAccountSearchV1"];
  };
  "/private/data_list_option/v1": {
    /** Create data list option data */
    post: operations["dataListOptionCreateV1"];
  };
  "/private/data_list_option/search/v1": {
    /** Return a list of all data list option for the current domain */
    post: operations["dataListOptionSearchListV1"];
  };
  "/private/data_list_option/map/v1": {
    /** Returns map option id ref list data option */
    post: operations["dataListOptionsMapViewV1"];
  };
  "/private/data_list/v1": {
    /** Data list add */
    post: operations["dataListCreateV1"];
  };
  "/private/data_list/search/v1": {
    /** Returns lists details */
    post: operations["dataListSearchV1"];
  };
  "/private/comment/twin/{twinId}/v1": {
    /** Returns comment list by twin id */
    get: operations["twinCommentListV1"];
    /** Add comment and it's attachments by twin */
    post: operations["twinCommentAddV1"];
  };
  "/private/comment/search/v1": {
    /** Returns comment search result in current domain */
    post: operations["commentSearchV1"];
  };
  "/private/business_account/{businessAccountId}/user/v1": {
    /** Add user to business account. If business account is not exist it will be created. If user is not exist it will be created */
    post: operations["businessAccountUserAddV1"];
  };
  "/private/attachment/validate_cud/v1": {
    /** Validate attachment CUD operations */
    post: operations["attachmentValidateV1"];
  };
  "/public/resource/{id}/v1": {
    /** File in attachment */
    get: operations["getResourceFile"];
  };
  "/public/locale/list/v1": {
    /** Return list of locales */
    get: operations["localeListPublicViewV1"];
  };
  "/public/data_list_option/{dataListOptionId}/v1": {
    /** Returns public list data */
    get: operations["dataListOptionPublicViewV1"];
  };
  "/public/data_list_by_key/{dataListKey}/v1": {
    /** Returns public data list */
    get: operations["dataListPublicByKeyViewV1"];
  };
  "/public/data_list/{dataListId}/v1": {
    /** Returns public data list */
    get: operations["dataListPublicViewV1"];
  };
  "/private/user/{userId}/user_group/v1": {
    /** Returns user group list for selected user */
    get: operations["userGroupForUserListV1"];
  };
  "/private/user/{userId}/permission_group/v1": {
    /** Returns grouped permission list for selected user */
    get: operations["userPermissionGroupedListV1"];
  };
  "/private/user/{userId}/permission/v1": {
    /** Returns permission list for selected user */
    get: operations["userPermissionListV1"];
  };
  "/private/user/locale/v1": {
    /** View user locale in domain */
    get: operations["userLocaleViewV1"];
  };
  "/private/twin_class_field/{twinClassFieldId}/data_list_shared_in_head/{headTwinId}/v1": {
    /** Returns twin class field options shared in head (free for select) */
    get: operations["twinClassFieldDataListSharedInHeadV1"];
  };
  "/private/twin_class_by_key/{twinClassKey}/v1": {
    /** Returns twin class by key */
    get: operations["twinClassViewByKeyV1"];
  };
  "/private/twin_class_by_key/{classKey}/field/{fieldKey}/v1": {
    /** Returns twin class field list */
    get: operations["twinClassFieldViewByKeyV1"];
  };
  "/private/twin_class/{twinClassId}/widget/list/v1": {
    /** Returns widget list */
    get: operations["twinClassWidgetListV1"];
  };
  "/private/twin_class/{twinClassId}/link/v1": {
    /**
     * Returns twin class link list
     * @deprecated
     */
    get: operations["twinClassLinkListV1"];
  };
  "/private/twin_class/{twinClassId}/field/list/v1": {
    /** Returns twin class field list */
    get: operations["twinClassFieldListV1"];
  };
  "/private/twin_class/{twinClassId}/card/list/v1": {
    /** Returns card list */
    get: operations["twinClassCardListV1"];
  };
  "/private/twin_class/list/v1": {
    /** Returns twin class list */
    get: operations["twinClassListV1"];
  };
  "/private/twin_by_alias/{twinAlias}/v2": {
    /** Returns twin data by alias */
    get: operations["twinViewByAliasV2"];
  };
  "/private/twin_by_alias/{twinAlias}/v1": {
    /** Returns twin data by alias */
    get: operations["twinViewByAliasV1"];
  };
  "/private/twin/{twinId}/v2": {
    /** Returns twin data by id */
    get: operations["twinViewV2"];
  };
  "/private/twin/{twinId}/history/list/v1": {
    /** Returns twin history by id */
    get: operations["historyListV1"];
  };
  "/private/twin/history/{historyId}/v1": {
    /** Return history by id */
    get: operations["historyViewV1"];
  };
  "/private/system/log/substitutions_config/v1": {
    /** Make config file for log substitutions */
    get: operations["makeConfigForSubstitutions"];
  };
  "/private/system/info": {
    /** Returns application info: versions, etc... */
    get: operations["Application info"];
  };
  "/private/space/{spaceId}/users/{userId}/v1": {
    /** Get user within his roles of specific space */
    get: operations["spaceRoleUserViewV1"];
  };
  "/private/space/{spaceId}/users/list/v1": {
    /** Return all users within roles of specific space */
    get: operations["spaceRoleWithinAllUsersMapV1"];
  };
  "/private/space/{spaceId}/role/{roleId}/users/v1": {
    /** Returns user list by selected space and role */
    get: operations["spaceRoleByUserListV1"];
  };
  "/private/permission_schema/{schemaId}/v1": {
    /** Return the permission schema for the current domain */
    get: operations["permissionSchemaViewV1"];
  };
  "/private/permission_group_by_key/{groupKey}/v1": {
    /** Return the permission group by key */
    get: operations["permissionGroupViewByKeyV1"];
  };
  "/private/permission_group/{groupId}/v1": {
    /** Return the permission group by id */
    get: operations["permissionGroupViewV1"];
  };
  "/private/permission_grant/user_group/{grantId}/v1": {
    /** Permission grant user-group view */
    get: operations["permissionGrantUserGroupViewV1"];
  };
  "/private/permission_grant/twin_role/{grantId}/v1": {
    /** Permission grant twin role view */
    get: operations["permissionGrantTwinRoleViewV1"];
  };
  "/private/permission_grant/space_role/{grantId}/v1": {
    /** Permission grant space role view */
    get: operations["permissionGrantSpaceRoleViewV1"];
  };
  "/private/permission_grant/assignee_propagation/{grantId}/v1": {
    /** Permission grant assignee propagation view */
    get: operations["permissionGrantAssigneePropagationViewV1"];
  };
  "/private/permission_by_key/{permissionKey}/v1": {
    /** Return the permission for the current domain by key */
    get: operations["permissionViewByKeyV1"];
  };
  "/private/factory_pipeline_step/{stepId}/v1": {
    /** Factory pipeline step */
    get: operations["factoryPipelineStepViewV1"];
  };
  "/private/factory_pipeline/{pipelineId}/v1": {
    /** Factory pipeline view */
    get: operations["factoryPipelineViewV1"];
  };
  "/private/factory_multiplier_filter/{multiplierId}/v1": {
    /** Factory multiplier filter search */
    get: operations["factoryMultiplierFilterViewV1"];
  };
  "/private/factory_multiplier/{multiplierId}/v1": {
    /** Factory multiplier view */
    get: operations["factoryMultiplierViewV1"];
  };
  "/private/factory_eraser/{eraserId}/v1": {
    /** Factory eraser view by id */
    get: operations["factoryEraserViewV1"];
  };
  "/private/factory_condition_set/{factoryConditionSetId}/v1": {
    /** Condition set view by id */
    get: operations["factoryConditionSetViewV1"];
  };
  "/private/domain/user/{userId}/v1": {
    /** Return the user by id */
    get: operations["domainUserViewV1"];
  };
  "/private/domain/list/v1": {
    /** Return a list of domains for current user */
    get: operations["domainListV1"];
  };
  "/private/domain/class_owner_type/list/v1": {
    /** Returns the owner type of the domain class */
    get: operations["twinClassOwnerTypeListV1"];
  };
  "/private/domain/business_account/{businessAccountId}/v1": {
    /** Returns domain business account result */
    get: operations["domainBusinessAccountViewV1"];
  };
  "/private/data_list_by_key/{dataListKey}/v1": {
    /** Returns list data */
    get: operations["dataListByKeyViewV1"];
  };
  "/private/attachment/{attachmentId}/v1": {
    /** View attachment by id */
    get: operations["attachmentViewV1"];
    /** Delete attachment by id */
    delete: operations["attachmentDeleteV1"];
  };
  "/private/attachment/quotas/domain_business_account/v1": {
    /** Get info about storage quotas(count files/disk space usage) for BA */
    get: operations["attachmentDomainBusinessAccountQuotasV1"];
  };
  "/private/attachment/quotas/domain/v1": {
    /** Get info about storage quotas(count files/disk space usage) for Domain */
    get: operations["attachmentDomainQuotasV1"];
  };
  "/private/twin/{twinId}/delete_drafted/v1": {
    /** Delete twin by id */
    delete: operations["twinDeleteDraftedV1"];
  };
  "/private/domain/{domainId}/user/{userId}/v1": {
    /** Delete user from domain */
    delete: operations["domainUserDeleteV1"];
  };
  "/private/domain/business_account/v1": {
    /** Delete businessAccount from domain */
    delete: operations["domainBusinessAccountDeleteV1"];
  };
  "/private/business_account/{businessAccountId}/user/{userId}/v1": {
    /** Delete user from businessAccount */
    delete: operations["businessAccountUserDeleteV1"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UserUpdateRqV1: {
      /**
       * @description fullName
       * @example John Doe
       */
      fullName?: string;
      /**
       * @description email
       * @example some@email.com
       */
      email?: string;
      /**
       * @description avatar url
       * @example http://twins.org/a/avatar/carkikrefmkawfwfwg.png
       */
      avatar?: string;
    };
    Response: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
    };
    /** @description I18n description */
    I18nV1: {
      /**
       * @description translation in current locale
       * @example translation
       */
      translationInCurrentLocale?: string;
      /**
       * @description map (locale : translate)
       * @example {
       *   "en": "translation",
       *   "pl": "tłumaczenie",
       *   "ru": "перевод"
       * }
       */
      translations?: {
        [key: string]: string;
      };
    };
    TwinflowUpdateRqV1: {
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: uuid
       * @description initial status id
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      initialStatusId?: string;
    };
    /** @description extends class */
    TwinClassBaseV1: {
      /**
       * Format: uuid
       * @description id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      id?: string;
      /**
       * @description key
       * @example PROJECT
       */
      key?: string;
      /**
       * @description name
       * @example Project
       */
      name?: string;
      /**
       * @description description
       * @example Projects business objects
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description logo
       * @example http://twins.org/t/class/project.png
       */
      logo?: string;
      /** @description if class is abstract no twin of it can be created. Some child class must be used */
      abstractClass?: boolean;
      /**
       * Format: uuid
       * @description head class id or empty if class is not linked to any head
       * @example c2854a55-1dfe-41cd-bb36-f71eeaf16f81
       */
      headClassId?: string;
      /**
       * Format: uuid
       * @description some markers for twins. Are domain level and not editable by user
       */
      markersDataListId?: string;
      /**
       * Format: uuid
       * @description some tags for twins. Can be business account level and editable by user
       */
      tagsDataListId?: string;
      /**
       * @description twin class owner type
       * @enum {string}
       */
      ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
      /**
       * Format: uuid
       * @description extends class id or empty if class is not linked to any classes
       */
      extendsClassId?: string;
      /** @description if true, take the twinflow scheme in space */
      twinflowSchemaSpace?: boolean;
      twinClassSchemaSpace?: boolean;
      /** @description if true, take the permission scheme in space */
      permissionSchemaSpace?: boolean;
      aliasSpace?: boolean;
      /**
       * Format: int32
       * @description head hunter featurer id
       */
      headHunterFeaturerId?: number;
      /** @description head hunter featurer params */
      headHunterParams?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description view permission id
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description create permission id
       */
      createPermissionId?: string;
      /**
       * Format: uuid
       * @description edit permission id
       */
      editPermissionId?: string;
      /**
       * Format: uuid
       * @description delete permission id
       */
      deletePermissionId?: string;
      /**
       * Format: uuid
       * @description uuid of name in I18n table
       */
      nameI18nId?: string;
      /**
       * Format: uuid
       * @description uuid of description in I18n table
       */
      descriptionI18nId?: string;
    };
    /**
     * @description related twinflow map
     * @example {twinflow map}
     */
    TwinflowBaseV1: {
      /**
       * Format: uuid
       * @example 34618b09-e8dc-4712-a433-2e18915ee70d
       */
      id?: string;
      /**
       * Format: uuid
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      /**
       * @description name
       * @example Project
       */
      name?: string;
      /**
       * @description description
       * @example Projects business objects
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
      /**
       * Format: uuid
       * @description initialStatusId
       */
      initialStatusId?: string;
      twinClass?: components["schemas"]["TwinClassBaseV1"];
    };
    TwinStatusUpdateRqV1: {
      /**
       * @description [optional] key within the domain
       * @example toDo
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * @description [optional] url for status UI logo
       * @example https://twins.org/img/twin_status_default.png
       */
      logo?: string;
      /**
       * @description [optional] background color hex
       * @example #ff00ff
       */
      backgroundColor?: string;
      /**
       * @description [optional] font color hex
       * @example #ff00ff
       */
      fontColor?: string;
    };
    TwinStatusUpdateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      twinStatus?: components["schemas"]["TwinStatusV1"];
    };
    /** @description Map of statuses. Will be filled only if lazyRelations mode is true */
    TwinStatusV1: {
      /**
       * Format: uuid
       * @description uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      id?: string;
      /** @description key within the domain */
      key?: string;
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description url for status UI logo
       * @example https://twins.org/img/twin_status_default.png
       */
      logo?: string;
      /**
       * @description background color hex
       * @example #ff00ff
       */
      backgroundColor?: string;
      /**
       * @description font color hex
       * @example #ff00ff
       */
      fontColor?: string;
      /**
       * Format: uuid
       * @description twin class
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
    };
    TwinClassFieldUpdateRqV1: {
      /**
       * @description unique key within the class
       * @example serialNumber
       */
      key?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to view this field
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to edit this field
       */
      editPermissionId?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * @description Required field
       * @example true
       */
      required?: boolean;
      /**
       * Format: int32
       * @description Field typer featurer ID
       * @example 1
       */
      fieldTyperFeaturerId?: number;
      /**
       * @description Field typer parameters
       * @example {}
       */
      fieldTyperParams?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
    };
    /** @description attachments */
    AttachmentViewV1: {
      /**
       * @description External storage link
       * @example https://test.filestorage.by/JFUjEFWksfqwf
       */
      storageLink?: string;
      /**
       * @description External id
       * @example JD999weqw9f
       */
      externalId?: string;
      /**
       * @description Title
       * @example cert.pdf
       */
      title?: string;
      /**
       * @description Description
       * @example cert.pdf
       */
      description?: string;
      /**
       * Format: int64
       * @description File size in bytes
       */
      size?: number;
      /**
       * Format: uuid
       * @description link to the field to which attachment was added (if any)
       */
      twinClassFieldId?: string;
      /**
       * Format: uuid
       * @description link to the comment to which attachment was added (if any)
       */
      commentId?: string;
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description author id
       */
      authorUserId?: string;
      authorUser?: components["schemas"]["UserV1"];
      /**
       * Format: uuid
       * @description twinflow transition id
       */
      twinflowTransitionId?: string;
      twinflowTransition?: components["schemas"]["TwinflowTransitionBaseV1"];
      comment?: components["schemas"]["CommentBaseDTOv2"];
      twinClassField?: components["schemas"]["TwinClassFieldV1"];
      /** @description attachment action list */
      attachmentActions?: ("VIEW" | "EDIT" | "DELETE")[];
    };
    /** @description Attachments count */
    AttachmentsCountV1: {
      /**
       * Format: int32
       * @description Total number of attachments
       * @example 20
       */
      all?: number;
      /**
       * Format: int32
       * @description Number of attachments direct for a twin
       * @example 12
       */
      direct?: number;
      /**
       * Format: int32
       * @description Number of attachments for transition only
       * @example 3
       */
      fromTransitions?: number;
      /**
       * Format: int32
       * @description Number of attachments for comment only
       * @example 4
       */
      fromComments?: number;
      /**
       * Format: int32
       * @description Number of attachments for twin class field only
       * @example 1
       */
      fromFields?: number;
    };
    /** @description businessAccount */
    BusinessAccountV1: {
      /**
       * Format: uuid
       * @description id
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      id?: string;
      /**
       * @description name
       * @example Business account name
       */
      name?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
    };
    /** @description comment */
    CommentBaseDTOv2: {
      text?: string;
      /**
       * Format: uuid
       * @description id
       * @example be44e826-ce24-4881-a227-f3f72d915a20
       */
      id?: string;
      /**
       * Format: uuid
       * @description author id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      authorUserId?: string;
      authorUser?: components["schemas"]["UserV1"];
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description changed at
       */
      changedAt?: string;
    };
    /** @description attribute5 */
    DataListAttributeV1: {
      /**
       * @description key
       * @example color
       */
      key?: string;
      /**
       * @description name
       * @example Some name
       */
      name?: string;
    };
    /** @description Map of tags. Will be filled only if lazyRelations mode is true */
    DataListOptionV1: {
      /**
       * Format: uuid
       * @description id
       * @example 7de977d4-df6d-4250-9cb2-088363d139a1
       */
      id?: string;
      /**
       * @description name
       * @example Bharat
       */
      name?: string;
      /**
       * @description icon
       * @example Icon path
       */
      icon?: string;
      /**
       * @description status
       * @example active
       * @enum {string}
       */
      status?: "active" | "disabled" | "hidden";
      /** @description map attributes (key : value) */
      attributes?: {
        [key: string]: string;
      };
    };
    /**
     * @description related datalist map
     * @example {datalist map}
     */
    DataListV1: {
      /**
       * Format: uuid
       * @description id
       * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
       */
      id?: string;
      /**
       * @description name
       * @example Country list
       */
      name?: string;
      /**
       * @description description
       * @example Supported country list
       */
      description?: string;
      /**
       * @description key
       * @example country
       */
      key?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description updated at
       */
      updatedAt?: string;
      attribute1?: components["schemas"]["DataListAttributeV1"];
      attribute2?: components["schemas"]["DataListAttributeV1"];
      attribute3?: components["schemas"]["DataListAttributeV1"];
      attribute4?: components["schemas"]["DataListAttributeV1"];
      attribute5?: components["schemas"]["DataListAttributeV1"];
    };
    /**
     * @description related factory pipeline map
     * @example {factory pipeline map}
     */
    FactoryPipelineV1: {
      /**
       * Format: uuid
       * @description id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      id?: string;
      /**
       * Format: uuid
       * @description factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryId?: string;
      /**
       * Format: uuid
       * @description input twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      inputTwinClassId?: string;
      /**
       * Format: uuid
       * @description factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryConditionSetId?: string;
      /**
       * @description factory condition set invert
       * @example true
       */
      factoryConditionSetInvert?: boolean;
      /**
       * @description is active
       * @example true
       */
      active?: boolean;
      /**
       * Format: uuid
       * @description output twin status id
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      outputTwinStatusId?: string;
      /**
       * Format: uuid
       * @description next factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      nextFactoryId?: string;
      /**
       * @description next factory limit scope
       * @example true
       */
      nextFactoryLimitScope?: boolean;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: int32
       * @description count pipeline steps
       * @example 3
       */
      pipelineStepsCount?: number;
    };
    /**
     * @description related factory map
     * @example {factory map}
     */
    FactoryV1: {
      /**
       * Format: uuid
       * @description id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      id?: string;
      /**
       * @description key
       * @example taskReassign
       */
      key?: string;
      /**
       * @description name
       * @example Some name
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description created by user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      createdByUserId?: string;
      /**
       * Format: int32
       * @description factory usages count
       * @example 3
       */
      factoryUsagesCount?: number;
      /**
       * Format: int32
       * @description factory pipelines count
       * @example 3
       */
      factoryPipelinesCount?: number;
      /**
       * Format: int32
       * @description factory multipliers count
       * @example 3
       */
      factoryMultipliersCount?: number;
      /**
       * Format: int32
       * @description factory branches count
       * @example 3
       */
      factoryBranchesCount?: number;
      /**
       * Format: int32
       * @description factory erasers count
       * @example 3
       */
      factoryErasersCount?: number;
    };
    /** @description params list */
    FeaturerParamV1: {
      /**
       * @description key
       * @example listUUID
       */
      key?: string;
      /**
       * @description name
       * @example listUUID
       */
      name?: string;
      /** @description description */
      description?: string;
      /** @description type */
      type?: string;
      /**
       * Format: int32
       * @description order
       */
      order?: number;
    };
    /** @description head hunter featurer */
    FeaturerV1: {
      /**
       * Format: int32
       * @description id
       * @example 1000
       */
      id?: number;
      /**
       * Format: int32
       * @description featurer type id
       * @example 12
       */
      featurerTypeId?: number;
      /**
       * @description name
       * @example InjectorImpl
       */
      name?: string;
      /** @description description */
      description?: string;
      /** @description deprecated */
      deprecated?: boolean;
      /** @description params list */
      params?: components["schemas"]["FeaturerParamV1"][];
    };
    LinkV1: {
      /**
       * Format: uuid
       * @description id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      dstTwinClassId?: string;
      dstTwinClass?: components["schemas"]["TwinClassV1"];
      /**
       * @description name
       * @example Serial number
       */
      name?: string;
      /**
       * @description Ling strength id
       * @example OPTIONAL
       * @enum {string}
       */
      linkStrengthId?: "MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE";
      /**
       * @description link type
       * @example ManyToOne
       * @enum {string}
       */
      type?: "ManyToOne" | "ManyToMany" | "OneToOne";
    };
    /**
     * @description related permission group map
     * @example {permission group map}
     */
    PermissionGroupV1: {
      /**
       * Format: uuid
       * @description id
       * @example 7efd9df0-cae7-455f-a721-eaec455105a4
       */
      id?: string;
      /**
       * @description key
       * @example LOCAL_PERMISSION
       */
      key?: string;
      /**
       * @description name
       * @example Some name
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: uuid
       * @description twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      twinClass?: components["schemas"]["TwinClassV1"];
    };
    /**
     * @description related permission schema map
     * @example {permission schema map}
     */
    PermissionSchemaV2: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: uuid
       * @description domainId
       */
      domainId?: string;
      /**
       * Format: uuid
       * @description businessAccountId
       */
      businessAccountId?: string;
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
      businessAccount?: components["schemas"]["BusinessAccountV1"];
      createdByUser?: components["schemas"]["UserV1"];
    };
    /** @description delete permission */
    PermissionV1: {
      /**
       * Format: uuid
       * @description id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      id?: string;
      /** @description key */
      key?: string;
      /**
       * @description name
       * @example Manager
       */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * Format: uuid
       * @description group id
       * @example 7efd9df0-cae7-455f-a721-eaec455105a4
       */
      groupId?: string;
    };
    /** @description results - related objects, if lazeRelation is false */
    RelatedObjectsV1: {
      /**
       * @description related statuses map
       * @example {twin map}
       */
      twinMap?: {
        [key: string]: components["schemas"]["TwinV2"];
      };
      /**
       * @description related statuses map
       * @example {twin status map}
       */
      statusMap?: {
        [key: string]: components["schemas"]["TwinStatusV1"];
      };
      /**
       * @description related users map
       * @example {user map}
       */
      userMap?: {
        [key: string]: components["schemas"]["UserV1"];
      };
      /**
       * @description related users group map
       * @example {user group map}
       */
      userGroupMap?: {
        [key: string]: components["schemas"]["UserGroupV1"];
      };
      /**
       * @description related twinClass map
       * @example {twin class map}
       */
      twinClassMap?: {
        [key: string]: components["schemas"]["TwinClassV1"];
      };
      /**
       * @description related transitionsMap map
       * @example {twin transition map}
       */
      transitionsMap?: {
        [key: string]: components["schemas"]["TwinflowTransitionBaseV1"];
      };
      /**
       * @description related datalist map
       * @example {datalist map}
       */
      dataListsMap?: {
        [key: string]: components["schemas"]["DataListV1"];
      };
      /**
       * @description related datalistOption map
       * @example {datalistOption map}
       */
      dataListsOptionMap?: {
        [key: string]: components["schemas"]["DataListOptionV1"];
      };
      /**
       * @description related space role map
       * @example {space role map}
       */
      spaceRoleMap?: {
        [key: string]: components["schemas"]["SpaceRoleV1"];
      };
      /**
       * @description related business account map
       * @example {business account map}
       */
      businessAccountMap?: {
        [key: string]: components["schemas"]["BusinessAccountV1"];
      };
      /**
       * @description related permission group map
       * @example {permission group map}
       */
      permissionGroupMap?: {
        [key: string]: components["schemas"]["PermissionGroupV1"];
      };
      /**
       * @description related permission map
       * @example {permission map}
       */
      permissionMap?: {
        [key: string]: components["schemas"]["PermissionV1"];
      };
      /**
       * @description related permission schema map
       * @example {permission schema map}
       */
      permissionSchemaMap?: {
        [key: string]: components["schemas"]["PermissionSchemaV2"];
      };
      /**
       * @description related twinflow map
       * @example {twinflow map}
       */
      twinflowMap?: {
        [key: string]: components["schemas"]["TwinflowBaseV1"];
      };
      /**
       * @description related factory map
       * @example {factory map}
       */
      factoryMap?: {
        [key: string]: components["schemas"]["FactoryV1"];
      };
      /**
       * @description related factory pipeline map
       * @example {factory pipeline map}
       */
      factoryPipelineMap?: {
        [key: string]: components["schemas"]["FactoryPipelineV1"];
      };
      /**
       * @description related featurer map
       * @example {featurer map}
       */
      featurerMap?: {
        [key: string]: components["schemas"]["FeaturerV1"];
      };
    };
    /**
     * @description related space role map
     * @example {space role map}
     */
    SpaceRoleV1: {
      /**
       * Format: uuid
       * @description space role user id
       * @example 275bf3c4-951a-4d26-bb82-5e18361d301c
       */
      id?: string;
      /**
       * @description key
       * @example Member
       */
      key?: string;
      /**
       * @description name
       * @example Some name
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: uuid
       * @description twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description business account id
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
    };
    /** @description Valid options */
    TwinBaseV2: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * @description externalId
       * @example 934599502DFFAE
       */
      externalId?: string;
      /**
       * Format: uuid
       * @description headTwinId
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /**
       * Format: uuid
       * @description statusId
       */
      statusId?: string;
      /**
       * Format: uuid
       * @description class
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description current assigner
       */
      assignerUserId?: string;
      /**
       * Format: uuid
       * @description author
       */
      authorUserId?: string;
      status?: components["schemas"]["TwinStatusV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
      assignerUser?: components["schemas"]["UserV1"];
      authorUser?: components["schemas"]["UserV1"];
      headTwin?: components["schemas"]["TwinBaseV2"];
      /** @description aliases */
      aliases?: string[];
    };
    TwinClassFieldDescriptorAttachmentV1: {
      fieldType: "attachmentFieldV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * Format: int32
       * @description Min count of files to upload
       * @example 1
       */
      minCount?: number;
      /**
       * Format: int32
       * @description Max count of files to upload
       * @example 1
       */
      maxCount?: number;
      /**
       * @description Allowed extensions
       * @example [
       *   "jpg",
       *   "jpeg",
       *   "png"
       * ]
       */
      extensions?: string[];
      /**
       * @description Filename must match this regexp
       * @example .*
       */
      filenameRegExp?: string;
      /**
       * Format: int32
       * @description Filesize limit(per file)
       * @example 8
       */
      fileSizeMbLimit?: number;
    };
    TwinClassFieldDescriptorColorHexV1: {
      fieldType: "colorHexV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
    };
    /** @description On of values */
    TwinClassFieldDescriptorDTO: {
      fieldType: string;
    } & (components["schemas"]["TwinClassFieldDescriptorTextV1"] | components["schemas"]["TwinClassFieldDescriptorColorHexV1"] | components["schemas"]["TwinClassFieldDescriptorUrlV1"] | components["schemas"]["TwinClassFieldDescriptorDateScrollV1"] | components["schemas"]["TwinClassFieldDescriptorListV1"] | components["schemas"]["TwinClassFieldDescriptorListLongV1"] | components["schemas"]["TwinClassFieldDescriptorListSharedInHeadV1"] | components["schemas"]["TwinClassFieldDescriptorLinkV1"] | components["schemas"]["TwinClassFieldDescriptorLinkLongV1"] | components["schemas"]["TwinClassFieldDescriptorUserV1"] | components["schemas"]["TwinClassFieldDescriptorUserLongV1"] | components["schemas"]["TwinClassFieldDescriptorAttachmentV1"] | components["schemas"]["TwinClassFieldDescriptorNumericV1"] | components["schemas"]["TwinClassFieldDescriptorImmutableV1"]);
    TwinClassFieldDescriptorDateScrollV1: {
      fieldType: "dateScrollV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /** @description Date pattern */
      pattern?: string;
    };
    TwinClassFieldDescriptorImmutableV1: {
      fieldType: "immutableV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
    };
    TwinClassFieldDescriptorLinkLongV1: {
      fieldType: "selectLinkLongV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /**
       * Format: uuid
       * @description Link id for grabbing valid dst twins
       */
      linkId?: string;
    };
    TwinClassFieldDescriptorLinkV1: {
      fieldType: "selectLinkV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /** @description Valid options */
      dstTwins?: components["schemas"]["TwinBaseV2"][];
    };
    TwinClassFieldDescriptorListLongV1: {
      fieldType: "selectLongV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Can custom option be entered
       * @example false
       */
      supportCustom?: boolean;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /**
       * Format: uuid
       * @description Data list id for grabbing valid options
       */
      dataListId?: string;
    };
    TwinClassFieldDescriptorListSharedInHeadV1: {
      fieldType: "selectSharedInHeadV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
    };
    TwinClassFieldDescriptorListV1: {
      fieldType: "selectListV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Can custom option be entered
       * @example false
       */
      supportCustom?: boolean;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /** @description Valid options */
      options?: components["schemas"]["DataListOptionV1"][];
      /** @description Valid option id list */
      optionIdList?: string[];
    };
    TwinClassFieldDescriptorNumericV1: {
      fieldType: "numericFieldV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * Format: double
       * @description Min possible value
       * @example 1
       */
      min?: number;
      /**
       * Format: double
       * @description Max possible value
       * @example 10
       */
      max?: number;
      /**
       * Format: double
       * @description Step of value change
       * @example 1
       */
      step?: number;
      /**
       * @description Thousand separator. Must not be equal to decimal separator.
       * @example ,
       */
      thousandSeparator?: string;
      /**
       * @description Decimal separator. Must not be equal to thousand separator.
       * @example .
       */
      decimalSeparator?: string;
      /**
       * Format: int32
       * @description Number of decimal places.
       * @example 0
       */
      decimalPlaces?: number;
    };
    TwinClassFieldDescriptorTextV1: {
      fieldType: "textV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Some validation regexp
       * @example .*
       */
      regExp?: string;
    };
    TwinClassFieldDescriptorUrlV1: {
      fieldType: "urlV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
    };
    TwinClassFieldDescriptorUserLongV1: {
      fieldType: "selectUserLongV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /**
       * Format: uuid
       * @description User filter list id for grabbing valid users
       */
      userFilterId?: string;
    };
    TwinClassFieldDescriptorUserV1: {
      fieldType: "selectUserV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /** @description Valid users */
      users?: components["schemas"]["UserV1"][];
      /** @description Valid users id list */
      userIdList?: string[];
    };
    TwinClassFieldRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      field?: components["schemas"]["TwinClassFieldV2"];
    };
    /** @description field */
    TwinClassFieldV1: {
      /**
       * Format: uuid
       * @description id
       * @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d
       */
      id?: string;
      /**
       * @description key
       * @example serialNumber
       */
      key?: string;
      /**
       * @description name
       * @example Serial number
       */
      name?: string;
      /**
       * @description required
       * @example true
       */
      required?: boolean;
      /** @description description */
      description?: string;
      descriptor?: components["schemas"]["TwinClassFieldDescriptorDTO"];
      /**
       * Format: uuid
       * @description twin class id
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description name i18n id
       */
      nameI18nId?: string;
      /**
       * Format: uuid
       * @description description i18n id
       */
      descriptionI18nId?: string;
      /**
       * Format: int32
       * @description field typer featurer id
       */
      fieldTyperFeaturerId?: number;
      /** @description field typer params */
      fieldTyperParams?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description view permission id
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description edit permission id
       */
      editPermissionId?: string;
    };
    /** @description results - twin class fields list */
    TwinClassFieldV2: {
      /**
       * Format: uuid
       * @description id
       * @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d
       */
      id?: string;
      /**
       * @description key
       * @example serialNumber
       */
      key?: string;
      /**
       * @description name
       * @example Serial number
       */
      name?: string;
      /**
       * @description required
       * @example true
       */
      required?: boolean;
      /** @description description */
      description?: string;
      descriptor?: components["schemas"]["TwinClassFieldDescriptorDTO"];
      /**
       * Format: uuid
       * @description twin class id
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description name i18n id
       */
      nameI18nId?: string;
      /**
       * Format: uuid
       * @description description i18n id
       */
      descriptionI18nId?: string;
      /**
       * Format: int32
       * @description field typer featurer id
       */
      fieldTyperFeaturerId?: number;
      /** @description field typer params */
      fieldTyperParams?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description view permission id
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description edit permission id
       */
      editPermissionId?: string;
      twinClass?: components["schemas"]["TwinClassBaseV1"];
      viewPermission?: components["schemas"]["PermissionV1"];
      editPermission?: components["schemas"]["PermissionV1"];
      fieldTyperFeaturer?: components["schemas"]["FeaturerV1"];
    };
    /** @description class */
    TwinClassV1: {
      /**
       * Format: uuid
       * @description id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      id?: string;
      /**
       * @description key
       * @example PROJECT
       */
      key?: string;
      /**
       * @description name
       * @example Project
       */
      name?: string;
      /**
       * @description description
       * @example Projects business objects
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description logo
       * @example http://twins.org/t/class/project.png
       */
      logo?: string;
      /** @description if class is abstract no twin of it can be created. Some child class must be used */
      abstractClass?: boolean;
      /**
       * Format: uuid
       * @description head class id or empty if class is not linked to any head
       * @example c2854a55-1dfe-41cd-bb36-f71eeaf16f81
       */
      headClassId?: string;
      /**
       * Format: uuid
       * @description some markers for twins. Are domain level and not editable by user
       */
      markersDataListId?: string;
      /**
       * Format: uuid
       * @description some tags for twins. Can be business account level and editable by user
       */
      tagsDataListId?: string;
      /**
       * @description twin class owner type
       * @enum {string}
       */
      ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
      /**
       * Format: uuid
       * @description extends class id or empty if class is not linked to any classes
       */
      extendsClassId?: string;
      /** @description if true, take the twinflow scheme in space */
      twinflowSchemaSpace?: boolean;
      twinClassSchemaSpace?: boolean;
      /** @description if true, take the permission scheme in space */
      permissionSchemaSpace?: boolean;
      aliasSpace?: boolean;
      /**
       * Format: int32
       * @description head hunter featurer id
       */
      headHunterFeaturerId?: number;
      /** @description head hunter featurer params */
      headHunterParams?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description view permission id
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description create permission id
       */
      createPermissionId?: string;
      /**
       * Format: uuid
       * @description edit permission id
       */
      editPermissionId?: string;
      /**
       * Format: uuid
       * @description delete permission id
       */
      deletePermissionId?: string;
      /**
       * Format: uuid
       * @description uuid of name in I18n table
       */
      nameI18nId?: string;
      /**
       * Format: uuid
       * @description uuid of description in I18n table
       */
      descriptionI18nId?: string;
      /** @description Class fields list */
      fields?: components["schemas"]["TwinClassFieldV1"][];
      /** @description Class fields id list */
      fieldIds?: string[];
      /** @description List of status id. Will be filled only in lazyRelations mode is false */
      statusList?: string[];
      /** @description List of marker id. Will be filled only in lazyRelations mode is false */
      markerList?: string[];
      /** @description List of tag id. Will be filled only in lazyRelations mode is false */
      tagList?: string[];
      forwardLinkMap?: {
        [key: string]: components["schemas"]["LinkV1"];
      };
      backwardLinkMap?: {
        [key: string]: components["schemas"]["LinkV1"];
      };
      /** @description Map of statuses. Will be filled only if lazyRelations mode is true */
      statusMap?: {
        [key: string]: components["schemas"]["TwinStatusV1"];
      };
      /** @description Map of markers. Will be filled only if lazyRelations mode is true */
      markerMap?: {
        [key: string]: components["schemas"]["DataListOptionV1"];
      };
      /** @description Map of tags. Will be filled only if lazyRelations mode is true */
      tagMap?: {
        [key: string]: components["schemas"]["DataListOptionV1"];
      };
      headClass?: components["schemas"]["TwinClassBaseV1"];
      extendsClass?: components["schemas"]["TwinClassBaseV1"];
      viewPermission?: components["schemas"]["PermissionV1"];
      createPermission?: components["schemas"]["PermissionV1"];
      editPermission?: components["schemas"]["PermissionV1"];
      deletePermission?: components["schemas"]["PermissionV1"];
      headHunterFeaturer?: components["schemas"]["FeaturerV1"];
    };
    /** @description Links */
    TwinLinkListV1: {
      /** @description forward links from current twin to other twins */
      forwardLinks?: {
        [key: string]: components["schemas"]["TwinLinkViewV1"];
      };
      /** @description links */
      backwardLinks?: {
        [key: string]: components["schemas"]["TwinLinkViewV1"];
      };
    };
    /** @description links */
    TwinLinkViewV1: {
      /**
       * Format: uuid
       * @description Link id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      linkId?: string;
      /**
       * Format: uuid
       * @description Destination twin id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      dstTwinId?: string;
      /**
       * Format: uuid
       * @description id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description createdByUser
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      createdByUserId?: string;
      createdByUser?: components["schemas"]["UserV1"];
      link?: components["schemas"]["LinkV1"];
      dstTwin?: components["schemas"]["TwinBaseV2"];
    };
    /** @description Transition list. Will be filled only if lazyRelations mode is true */
    TwinTransitionViewV1: {
      /**
       * Format: uuid
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstTwinStatusId?: string;
      dstTwinStatus?: components["schemas"]["TwinStatusV1"];
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description alias
       * @example start
       */
      alias?: string;
      allowComment?: boolean;
      allowAttachments?: boolean;
      allowLinks?: boolean;
    };
    /**
     * @description related statuses map
     * @example {twin map}
     */
    TwinV2: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * @description externalId
       * @example 934599502DFFAE
       */
      externalId?: string;
      /**
       * Format: uuid
       * @description headTwinId
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /**
       * Format: uuid
       * @description statusId
       */
      statusId?: string;
      /**
       * Format: uuid
       * @description class
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description current assigner
       */
      assignerUserId?: string;
      /**
       * Format: uuid
       * @description author
       */
      authorUserId?: string;
      status?: components["schemas"]["TwinStatusV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
      assignerUser?: components["schemas"]["UserV1"];
      authorUser?: components["schemas"]["UserV1"];
      headTwin?: components["schemas"]["TwinBaseV2"];
      /** @description aliases */
      aliases?: string[];
      /** @description Attachments */
      attachments?: components["schemas"]["AttachmentViewV1"][];
      attachmentsCount?: components["schemas"]["AttachmentsCountV1"];
      links?: components["schemas"]["TwinLinkListV1"];
      /** @description TransitionId list. Will be filled only in lazyRelations mode is false */
      transitionsIdList?: string[];
      /** @description Transition list. Will be filled only if lazyRelations mode is true */
      transitions?: components["schemas"]["TwinTransitionViewV1"][];
      /** @description MarkerId list. Will be filled only in lazyRelations mode is false */
      markerIdList?: string[];
      /** @description Marker list. Will be filled only if lazyRelations mode is true */
      markers?: components["schemas"]["DataListOptionV1"][];
      /** @description TagId list. Will be filled only in lazyRelations mode is false */
      tagIdList?: string[];
      /** @description Tag list. Will be filled only if lazyRelations mode is true */
      tags?: components["schemas"]["DataListOptionV1"][];
      /** @description Suitable actions list */
      actions?: ("EDIT" | "DELETE" | "MOVE" | "COMMENT" | "WATCH" | "TIME_TRACK" | "ATTACHMENT_ADD" | "HISTORY_VIEW")[];
      /** @description Twins of which classes are possible to create as children for given twin */
      creatableChildTwinClassIds?: string[];
      /** @description Twins of which classes are possible to create as children for given twin */
      creatableChildTwinClasses?: components["schemas"]["TwinClassV1"][];
      /** @description fields */
      fields?: {
        [key: string]: string;
      };
    };
    /** @description twinflow transition */
    TwinflowTransitionBaseV1: {
      /**
       * Format: uuid
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstTwinStatusId?: string;
      dstTwinStatus?: components["schemas"]["TwinStatusV1"];
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description alias
       * @example start
       */
      alias?: string;
      allowComment?: boolean;
      allowAttachments?: boolean;
      allowLinks?: boolean;
    };
    /**
     * @description related users group map
     * @example {user group map}
     */
    UserGroupV1: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: uuid
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
      /**
       * @description name
       * @example Manager
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * @description type
       * @example domainScopeDomainManage
       * @enum {string}
       */
      type?: "domainScopeDomainManage" | "domainScopeBusinessAccountManage" | "businessAccountScopeBusinessAccountManage" | "domainAndBusinessAccountScopeBusinessAccountManage";
    };
    /** @description created by user */
    UserV1: {
      /**
       * Format: uuid
       * @description id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      id?: string;
      /**
       * @description fullName
       * @example John Doe
       */
      fullName?: string;
      /**
       * @description email
       * @example some@email.com
       */
      email?: string;
      /**
       * @description avatar url
       * @example http://twins.org/a/avatar/carkikrefmkawfwfwg.png
       */
      avatar?: string;
    };
    /** @description [optional] should be filled on change extends twins class id */
    BasicUpdateOperationDTOv1: {
      /**
       * Format: uuid
       * @description new id. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      newId?: string;
      /**
       * @description what should be done with old values, if no replacement was given
       * @enum {string}
       */
      onUnreplacedStrategy?: "delete" | "restrict";
      /** @description map [old_id -> new_id] */
      replaceMap?: {
        [key: string]: string;
      };
    };
    TwinClassUpdateRqV1: {
      /**
       * @description unique key within the domain
       * @example TOOL
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: int32
       * @description [optional] an id of head hunter featurer. The field has a sense only if headTwinClassId filled
       */
      headHunterFeaturerId?: number;
      /** @description [optional] head hunter featurer params */
      headHunterParams?: {
        [key: string]: string;
      };
      /**
       * @description [optional] if true, then not twin of given class can be created. Abstract classes must be extended
       * @example false
       */
      abstractClass?: boolean;
      /**
       * @description [optional] url for class UI logo
       * @example https://twins.org/img/twin_class_default.png
       */
      logo?: string;
      /**
       * @description [optional] if true then twins of current class can have own permission_schema and this schema will cover children twins
       * @example false
       */
      permissionSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class can have own twinflow_schema and this schema will cover children twins
       * @example false
       */
      twinflowSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class can have own twin_class_schema and this schema will cover children twins
       * @example false
       */
      twinClassSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class must have own alias key and this key will be used to generate alias for children twins
       * @example false
       */
      aliasSpace?: boolean;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to view twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to create twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      createPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to edit twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      editPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to delete twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      deletePermissionId?: string;
      /**
       * @description [optional] owner typ of class
       * @enum {string}
       */
      ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
      markerDataListUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
      tagDataListUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
      extendsTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
      headTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
    };
    TwinClassRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
    };
    /** @description Attachments for adding */
    AttachmentAddV1: {
      /**
       * @description External storage link
       * @example https://test.filestorage.by/JFUjEFWksfqwf
       */
      storageLink?: string;
      /**
       * @description External id
       * @example JD999weqw9f
       */
      externalId?: string;
      /**
       * @description Title
       * @example cert.pdf
       */
      title?: string;
      /**
       * @description Description
       * @example cert.pdf
       */
      description?: string;
      /**
       * Format: int64
       * @description File size in bytes
       */
      size?: number;
      /**
       * Format: uuid
       * @description link to the field to which attachment was added (if any)
       */
      twinClassFieldId?: string;
      /**
       * Format: uuid
       * @description link to the comment to which attachment was added (if any)
       */
      commentId?: string;
    };
    /** @description Attachments add/update/delete operations */
    AttachmentCudV1: {
      /** @description Attachments for adding */
      create?: components["schemas"]["AttachmentAddV1"][];
      /** @description Attachments for updating */
      update?: components["schemas"]["AttachmentUpdateV1"][];
      /** @description Attachments id list for deleting */
      delete?: string[];
    };
    /** @description Attachments for updating */
    AttachmentUpdateV1: {
      /**
       * @description External storage link
       * @example https://test.filestorage.by/JFUjEFWksfqwf
       */
      storageLink?: string;
      /**
       * @description External id
       * @example JD999weqw9f
       */
      externalId?: string;
      /**
       * @description Title
       * @example cert.pdf
       */
      title?: string;
      /**
       * @description Description
       * @example cert.pdf
       */
      description?: string;
      /**
       * Format: int64
       * @description File size in bytes
       */
      size?: number;
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
    };
    /** @description TwinLinks for adding */
    TwinLinkAddV1: {
      /**
       * Format: uuid
       * @description Link id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      linkId?: string;
      /**
       * Format: uuid
       * @description Destination twin id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      dstTwinId?: string;
    };
    /** @description TwinLinks for updating */
    TwinLinkUpdateV1: {
      /**
       * Format: uuid
       * @description id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @description Destination twin id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      dstTwinId?: string;
    };
    /** @description TwinTags for updating */
    TwinTagManageV1: {
      /**
       * @description add already existing tags by their ids
       * @example [
       *   "11a4c3f8-c780-4421-9aee-9e7eec20c67d",
       *   "83050c4b-ef17-4d7d-8792-6e5a86557ab9"
       * ]
       */
      existingTags?: string[];
      /**
       * @description add new tags by name (in current locale). If tag with given name is already exist, it will be used
       * @example [
       *   "String 1",
       *   "String 2"
       * ]
       */
      newTags?: string[];
      /**
       * @description delete already existing tags by their ids
       * @example cf8b1aec-c07c-4131-b834-8024462cfc93
       */
      deleteTags?: string[];
    };
    TwinUpdateRqV1: {
      /**
       * Format: uuid
       * @description Head twin id, if selected class had to be linked to some head twin
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * Format: uuid
       * @description assigner user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      assignerUserId?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /** @description fields */
      fields?: {
        [key: string]: string;
      };
      attachments?: components["schemas"]["AttachmentCudV1"];
      /** @description TwinLinks for adding */
      twinLinksAdd?: components["schemas"]["TwinLinkAddV1"][];
      /** @description TwinLinks id list for deleting */
      twinLinksDelete?: string[];
      /** @description TwinLinks for updating */
      twinLinksUpdate?: components["schemas"]["TwinLinkUpdateV1"][];
      tagsUpdate?: components["schemas"]["TwinTagManageV1"];
      comment?: string;
    };
    TwinRsV2: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twin?: components["schemas"]["TwinV2"];
    };
    /** @description twin */
    TwinBaseV1: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * @description externalId
       * @example 934599502DFFAE
       */
      externalId?: string;
      /**
       * Format: uuid
       * @description headTwinId
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /**
       * Format: uuid
       * @description statusId
       */
      statusId?: string;
      /**
       * Format: uuid
       * @description class
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description current assigner
       */
      assignerUserId?: string;
      /**
       * Format: uuid
       * @description author
       */
      authorUserId?: string;
    };
    TwinTouchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      twinTouch?: components["schemas"]["TwinTouchV1"];
    };
    /** @description touche twins data */
    TwinTouchV1: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * Format: uuid
       * @description twinId
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      twinId?: string;
      /**
       * @description touchId
       * @example WATCHED
       * @enum {string}
       */
      touchId?: "WATCHED" | "STARRED" | "REVIEWED";
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      twin?: components["schemas"]["TwinBaseV1"];
    };
    LinkUpdateV1: {
      forwardNameI18n?: components["schemas"]["I18nV1"];
      backwardNameI18n?: components["schemas"]["I18nV1"];
      /**
       * @description Link type (Many-to-one, Many-to-many, One-to-one)
       * @enum {string}
       */
      type?: "ManyToOne" | "ManyToMany" | "OneToOne";
      /**
       * @description Link strength (MANDATORY, OPTIONAL, OPTIONAL_BUT_DELETE_CASCADE)
       * @enum {string}
       */
      linkStrength?: "MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE";
      /**
       * Format: int32
       * @description [optional] an id of linker featurer
       */
      linkerFeaturerId?: number;
      /** @description [optional] linker featurer params */
      linkerParams?: {
        [key: string]: string;
      };
      srcTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
      dstTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
    };
    LinkUpdateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      link?: components["schemas"]["LinkV3"];
    };
    /** @description result - link */
    LinkV3: {
      /**
       * Format: uuid
       * @description id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      dstTwinClassId?: string;
      dstTwinClass?: components["schemas"]["TwinClassV1"];
      /**
       * @description name
       * @example Serial number
       */
      name?: string;
      /**
       * @description Ling strength id
       * @example OPTIONAL
       * @enum {string}
       */
      linkStrengthId?: "MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE";
      /**
       * @description link type
       * @example ManyToOne
       * @enum {string}
       */
      type?: "ManyToOne" | "ManyToMany" | "OneToOne";
      /**
       * Format: uuid
       * @description Source twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      srcTwinClassId?: string;
      /**
       * @description Backward name
       * @example dst -> src
       */
      backwardName?: string;
      /**
       * Format: uuid
       * @description Creator user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      createdByUserId?: string;
      /**
       * Format: date-time
       * @description Creation timestamp
       */
      createdAt?: string;
      srcTwinClass?: components["schemas"]["TwinClassBaseV1"];
      createdByUser?: components["schemas"]["UserV1"];
    };
    FactoryBranchUpdateRqv1: {
      /**
       * Format: uuid
       * @description factory condition set id
       * @example 69856a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryConditionSetId?: string;
      /**
       * @description factory condition set invert
       * @example true
       */
      factoryConditionSetInvert?: boolean;
      /**
       * @description factory condition set invert
       * @example true
       */
      active?: boolean;
      /**
       * Format: uuid
       * @description next factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      nextFactoryId?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
    };
    FactoryBranchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      factoryBranch?: components["schemas"]["FactoryBranchV2"];
    };
    /** @description results - branch */
    FactoryBranchV2: {
      /**
       * Format: uuid
       * @description id
       * @example 99956a15-6858-40ba-b0aa-b123c54e250d
       */
      id?: string;
      /**
       * Format: uuid
       * @description factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryId?: string;
      /**
       * Format: uuid
       * @description factory condition set id
       * @example 69856a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryConditionSetId?: string;
      /**
       * @description factory condition set invert
       * @example true
       */
      factoryConditionSetInvert?: boolean;
      /**
       * @description active
       * @example true
       */
      active?: boolean;
      /**
       * Format: uuid
       * @description next factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      nextFactoryId?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      factory?: components["schemas"]["FactoryV1"];
      factoryConditionSet?: components["schemas"]["FactoryConditionSetV1"];
      nextFactory?: components["schemas"]["FactoryV1"];
    };
    /** @description factory condition set */
    FactoryConditionSetV1: {
      /**
       * Format: uuid
       * @description id
       * @example 69856a15-6858-40ba-b0aa-b123c54e250d
       */
      id?: string;
      /**
       * @description name
       * @example Some name
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: int32
       * @description count in factory pipeline usages
       * @example 3
       */
      inFactoryPipelineUsagesCount?: number;
      /**
       * Format: int32
       * @description count in factory pipeline step usages
       * @example 3
       */
      inFactoryPipelineStepUsagesCount?: number;
      /**
       * Format: int32
       * @description count in factory multiplier filter usages
       * @example 3
       */
      inFactoryMultiplierFilterUsagesCount?: number;
      /**
       * Format: int32
       * @description count in factory branch usages
       * @example 3
       */
      inFactoryBranchUsagesCount?: number;
      /**
       * Format: int32
       * @description count in factory eraser usages
       * @example 3
       */
      inFactoryEraserUsagesCount?: number;
    };
    FactoryUpdateRqV1: {
      /**
       * @description key
       * @example taskReassign
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
    };
    FactoryRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      factory?: components["schemas"]["FactoryV2"];
    };
    /** @description result - factory */
    FactoryV2: {
      /**
       * Format: uuid
       * @description id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      id?: string;
      /**
       * @description key
       * @example taskReassign
       */
      key?: string;
      /**
       * @description name
       * @example Some name
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description created by user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      createdByUserId?: string;
      /**
       * Format: int32
       * @description factory usages count
       * @example 3
       */
      factoryUsagesCount?: number;
      /**
       * Format: int32
       * @description factory pipelines count
       * @example 3
       */
      factoryPipelinesCount?: number;
      /**
       * Format: int32
       * @description factory multipliers count
       * @example 3
       */
      factoryMultipliersCount?: number;
      /**
       * Format: int32
       * @description factory branches count
       * @example 3
       */
      factoryBranchesCount?: number;
      /**
       * Format: int32
       * @description factory erasers count
       * @example 3
       */
      factoryErasersCount?: number;
      createdByUser?: components["schemas"]["UserV1"];
    };
    DraftRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      draft?: components["schemas"]["DraftV1"];
    };
    /** @description draft */
    DraftV1: {
      /**
       * Format: uuid
       * @description draft id
       */
      id?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description created by user
       */
      createdByrUserId?: string;
      /**
       * Format: int32
       * @description count of new twins
       */
      twinCreateCount?: number;
      /**
       * Format: int32
       * @description count of updated twins
       */
      twinUpdateCount?: number;
      /**
       * Format: int32
       * @description count of deleted twins
       */
      twinDeleteCount?: number;
      /**
       * Format: int32
       * @description count of deleted 'by status change' twins
       */
      twinDeletedByStatusCount?: number;
      /**
       * Format: int32
       * @description count of irrevocable deleted twins
       */
      twinDeletedIrrevocableCount?: number;
      /**
       * Format: int32
       * @description markers added count
       */
      twinMarkerCreateCount?: number;
      /**
       * Format: int32
       * @description markers deleted count
       */
      twinMarkerDeleteCount?: number;
      /**
       * Format: int32
       * @description tags added count
       */
      twinTagCreateCount?: number;
      /**
       * Format: int32
       * @description tags deleted count
       */
      twinTagDeleteCount?: number;
      /**
       * Format: int32
       * @description links created count
       */
      twinLinkCreateCount?: number;
      /**
       * Format: int32
       * @description links updated count
       */
      twinLinkUpdateCount?: number;
      /**
       * Format: int32
       * @description links deleted count
       */
      twinLinkDeleteCount?: number;
      /**
       * Format: int32
       * @description attachment created count
       */
      twinAttachmentCreateCount?: number;
      /**
       * Format: int32
       * @description attachment updated count
       */
      twinAttachmentUpdateCount?: number;
      /**
       * Format: int32
       * @description attachment deleted count
       */
      twinAttachmentDeleteCount?: number;
      /**
       * Format: int32
       * @description simple field created count
       */
      twinFieldSimpleCreateCount?: number;
      /**
       * Format: int32
       * @description simple field updated count
       */
      twinFieldSimpleUpdateCount?: number;
      /**
       * Format: int32
       * @description simple field deleted count
       */
      twinFieldSimpleDeleteCount?: number;
      /**
       * Format: int32
       * @description user field created count
       */
      twinFieldUserCreateCount?: number;
      /**
       * Format: int32
       * @description user field updated count
       */
      twinFieldUserUpdateCount?: number;
      /**
       * Format: int32
       * @description user field deleted count
       */
      twinFieldUserDeleteCount?: number;
      /**
       * Format: int32
       * @description data_list field created count
       */
      twinFieldDataListCreateCount?: number;
      /**
       * Format: int32
       * @description data_list field updated count
       */
      twinFieldDataListUpdateCount?: number;
      /**
       * Format: int32
       * @description data_list field deleted count
       */
      twinFieldDataListDeleteCount?: number;
      /**
       * @description draft status
       * @enum {string}
       */
      status?: "UNDER_CONSTRUCTION" | "CONSTRUCTION_EXCEPTION" | "ERASE_SCOPE_COLLECT_PLANNED" | "ERASE_SCOPE_COLLECT_NEED_START" | "ERASE_SCOPE_COLLECT_IN_PROGRESS" | "ERASE_SCOPE_COLLECT_EXCEPTION" | "NORMALIZE_EXCEPTION" | "CHECK_CONFLICTS_EXCEPTION" | "UNCOMMITED" | "COMMIT_NEED_START" | "COMMIT_IN_PROGRESS" | "COMMIT_EXCEPTION" | "LOCKED" | "OUT_OF_DATE" | "COMMITED";
      createdByUser?: components["schemas"]["UserV1"];
    };
    DataListOptionUpdateRqV1: {
      /** @description icon */
      icon?: string;
      optionI18n?: components["schemas"]["I18nV1"];
      /** @description attributes map */
      attributesMap?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description data list id
       * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
       */
      dataListId?: string;
      /**
       * @description status
       * @example active
       * @enum {string}
       */
      status?: "active" | "disabled" | "hidden";
    };
    DataListOptionRsV3: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      option?: components["schemas"]["DataListOptionV3"];
    };
    /** @description data lists option */
    DataListOptionV3: {
      /**
       * Format: uuid
       * @description id
       * @example 7de977d4-df6d-4250-9cb2-088363d139a1
       */
      id?: string;
      /**
       * @description name
       * @example Bharat
       */
      name?: string;
      /**
       * @description icon
       * @example Icon path
       */
      icon?: string;
      /**
       * @description status
       * @example active
       * @enum {string}
       */
      status?: "active" | "disabled" | "hidden";
      /** @description map attributes (key : value) */
      attributes?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description id
       * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
       */
      dataListId?: string;
      /**
       * Format: uuid
       * @description business account id
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
      dataList?: components["schemas"]["DataListV1"];
      businessAccount?: components["schemas"]["BusinessAccountV1"];
    };
    /** @description attribute4 */
    DataListAttributeSaveV1: {
      /**
       * @description key
       * @example color
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
    };
    DataListUpdateRqV1: {
      /**
       * @description key
       * @example country
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      attribute1?: components["schemas"]["DataListAttributeSaveV1"];
      attribute2?: components["schemas"]["DataListAttributeSaveV1"];
      attribute3?: components["schemas"]["DataListAttributeSaveV1"];
      attribute4?: components["schemas"]["DataListAttributeSaveV1"];
    };
    DataListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      dataList?: components["schemas"]["DataListV2"];
    };
    /** @description results - data lists list */
    DataListV2: {
      /**
       * Format: uuid
       * @description id
       * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
       */
      id?: string;
      /**
       * @description name
       * @example Country list
       */
      name?: string;
      /**
       * @description description
       * @example Supported country list
       */
      description?: string;
      /**
       * @description key
       * @example country
       */
      key?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description updated at
       */
      updatedAt?: string;
      attribute1?: components["schemas"]["DataListAttributeV1"];
      attribute2?: components["schemas"]["DataListAttributeV1"];
      attribute3?: components["schemas"]["DataListAttributeV1"];
      attribute4?: components["schemas"]["DataListAttributeV1"];
      attribute5?: components["schemas"]["DataListAttributeV1"];
      /** @description list of option ids */
      optionIdList?: string[];
      /** @description list options */
      options?: {
        [key: string]: components["schemas"]["DataListOptionV1"];
      };
    };
    CommentUpdateRqV1: {
      text?: string;
      attachments?: components["schemas"]["AttachmentCudV1"];
    };
    CommentViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      comment?: components["schemas"]["CommentViewV1"];
    };
    /** @description comment data */
    CommentViewV1: {
      text?: string;
      /**
       * Format: uuid
       * @description id
       * @example be44e826-ce24-4881-a227-f3f72d915a20
       */
      id?: string;
      /**
       * Format: uuid
       * @description author id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      authorUserId?: string;
      authorUser?: components["schemas"]["UserV1"];
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description changed at
       */
      changedAt?: string;
      /** @description attachments */
      attachments?: components["schemas"]["AttachmentViewV1"][];
      /** @description comment actions */
      commentActions?: ("EDIT" | "DELETE" | "PIN" | "UNPIN" | "VOTE" | "REACT" | "HIDE" | "UNHIDE")[];
    };
    BusinessAccountUpdateRqV1: {
      /**
       * @description name
       * @example BuildmeUp Const.
       */
      name?: string;
    };
    DataListOptionSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description data list id list */
      dataListIdList?: string[];
      /** @description data list id exclude list */
      dataListIdExcludeList?: string[];
      /** @description data list key list */
      dataListKeyList?: string[];
      /** @description data list key exclude list */
      dataListKeyExcludeList?: string[];
      /** @description option like list */
      optionLikeList?: string[];
      /** @description option not like list */
      optionNotLikeList?: string[];
      /** @description option i18n like list */
      optionI18nLikeList?: string[];
      /** @description option i18n not like list */
      optionI18nNotLikeList?: string[];
      /** @description business account id list */
      businessAccountIdList?: string[];
      /** @description business account id exclude list */
      businessAccountIdExcludeList?: string[];
      /** @description data list class subset id list */
      dataListSubsetIdList?: string[];
      /** @description data list class subset id exclude list */
      dataListSubsetIdExcludeList?: string[];
      /** @description data list class subset key list */
      dataListSubsetKeyList?: string[];
      /** @description data list class subset key exclude list */
      dataListSubsetKeyExcludeList?: string[];
      /** @description data list option status id list */
      statusIdList?: ("active" | "disabled" | "hidden")[];
      /** @description data list option status id exclude list */
      statusIdExcludeList?: ("active" | "disabled" | "hidden")[];
    };
    DataListOptionSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description data list */
      options?: components["schemas"]["DataListOptionV3"][];
    };
    /** @description pagination data */
    PaginationV1: {
      /**
       * Format: int32
       * @description record number from which data sampling begins
       * @example 25
       */
      offset?: number;
      /**
       * Format: int32
       * @description number of records in the query result
       * @example 10
       */
      limit?: number;
      /**
       * Format: int64
       * @description total results count
       * @example 100
       */
      total?: number;
    };
    DataListOptionMapRqV1: {
      /**
       * @description data list option id set
       * @example [
       *   "133b1c94-a8c0-4795-8076-10548ed772b3",
       *   "7de977d4-df6d-4250-9cb2-088363d139a1"
       * ]
       */
      dataListOptionIdSet?: string[];
    };
    DataListOptionMapRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description map { data list option id / data list option } */
      dataListOptionMap?: {
        [key: string]: components["schemas"]["DataListOptionV1"];
      };
    };
    /** @description data list option search */
    DataListOptionSearchV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description data list id list */
      dataListIdList?: string[];
      /** @description data list id exclude list */
      dataListIdExcludeList?: string[];
      /** @description data list key list */
      dataListKeyList?: string[];
      /** @description data list key exclude list */
      dataListKeyExcludeList?: string[];
      /** @description option like list */
      optionLikeList?: string[];
      /** @description option not like list */
      optionNotLikeList?: string[];
      /** @description option i18n like list */
      optionI18nLikeList?: string[];
      /** @description option i18n not like list */
      optionI18nNotLikeList?: string[];
      /** @description business account id list */
      businessAccountIdList?: string[];
      /** @description business account id exclude list */
      businessAccountIdExcludeList?: string[];
      /** @description data list class subset id list */
      dataListSubsetIdList?: string[];
      /** @description data list class subset id exclude list */
      dataListSubsetIdExcludeList?: string[];
      /** @description data list class subset key list */
      dataListSubsetKeyList?: string[];
      /** @description data list class subset key exclude list */
      dataListSubsetKeyExcludeList?: string[];
      /** @description data list option status id list */
      statusIdList?: ("active" | "disabled" | "hidden")[];
      /** @description data list option status id exclude list */
      statusIdExcludeList?: ("active" | "disabled" | "hidden")[];
    };
    DataListSearchRqV1: {
      /** @description datalist id list */
      idList?: string[];
      /** @description datalist id exclude list */
      idExcludeList?: string[];
      /** @description datalist name like list */
      nameLikeList?: string[];
      /** @description datalist name not like list */
      nameNotLikeList?: string[];
      /** @description datalist description like list */
      descriptionLikeList?: string[];
      /** @description datalist description not like list */
      descriptionNotLikeList?: string[];
      /** @description datalist class key like list */
      keyLikeList?: string[];
      /** @description datalist class key not like list */
      keyNotLikeList?: string[];
      optionSearch?: components["schemas"]["DataListOptionSearchV1"];
    };
    DataListSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      pagination?: components["schemas"]["PaginationV1"];
      /** @description data list */
      dataListList?: components["schemas"]["DataListV2"][];
    };
    UserGroupSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description name i18n like list */
      nameI18NLikeList?: string[];
      /** @description name i18n not like list */
      nameI18nNotLikeList?: string[];
      /** @description description i18n like list */
      descriptionI18NLikeList?: string[];
      /** @description description i18n not like list */
      descriptionI18NNotLikeList?: string[];
      /** @description type list */
      typeList?: ("domainScopeDomainManage" | "domainScopeBusinessAccountManage" | "businessAccountScopeBusinessAccountManage" | "domainAndBusinessAccountScopeBusinessAccountManage")[];
      /** @description type exclude list */
      typeExcludeList?: ("domainScopeDomainManage" | "domainScopeBusinessAccountManage" | "businessAccountScopeBusinessAccountManage" | "domainAndBusinessAccountScopeBusinessAccountManage")[];
    };
    UserGroupSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - user group list */
      userGroupList?: components["schemas"]["UserGroupV2"][];
    };
    /** @description results - user group list */
    UserGroupV2: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: uuid
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
      /**
       * @description name
       * @example Manager
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * @description type
       * @example domainScopeDomainManage
       * @enum {string}
       */
      type?: "domainScopeDomainManage" | "domainScopeBusinessAccountManage" | "businessAccountScopeBusinessAccountManage" | "domainAndBusinessAccountScopeBusinessAccountManage";
      businessAccount?: components["schemas"]["BusinessAccountV1"];
    };
    UserGroupMemberManageRqV1: {
      userGroupEnterList?: string[];
      userGroupExitList?: string[];
    };
    UserGroupListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description user group list */
      userGroupList?: components["schemas"]["UserGroupV1"][];
    };
    UserAddRqV1: {
      /**
       * Format: uuid
       * @description businessAccountId
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
      /**
       * Format: uuid
       * @description domainId
       * @example f67ad556-dd27-4871-9a00-16fb0e8a4102
       */
      domainId?: string;
      user?: components["schemas"]["UserV1"];
    };
    TwinflowSchemaSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description name like list */
      nameLikeList?: string[];
      /** @description name not like list */
      nameNotLikeList?: string[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description not like list */
      descriptionNotLikeList?: string[];
      /** @description business account id list */
      businessAccountIdList?: string[];
      /** @description business account id exclude list */
      businessAccountIdExcludeList?: string[];
      /** @description user id list */
      createdByUserIdList?: string[];
      /** @description user id exclude list */
      createdByUserIdExcludeList?: string[];
    };
    TwinflowSchemaSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - twinflow schema list */
      twinflowSchemas?: components["schemas"]["TwinflowSchemaV1"][];
    };
    /** @description results - twinflow schema list */
    TwinflowSchemaV1: {
      /**
       * Format: uuid
       * @description id
       * @example 2c618b09-e8dc-4712-a433-2e18915ee70d
       */
      id?: string;
      /**
       * Format: uuid
       * @description domain id
       * @example f67ad556-dd27-4871-9a00-16fb0e8a4102
       */
      domainId?: string;
      /**
       * Format: uuid
       * @description business account id
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
      /**
       * @description name
       * @example Some name
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: uuid
       * @description createdByUserId
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      createdByUserId?: string;
      businessAccount?: components["schemas"]["BusinessAccountV1"];
      createdByUser?: components["schemas"]["UserV1"];
    };
    TransitionCreateRqV1: {
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: uuid
       * @description [optional] src status id. if null - from any status transition
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      srcStatusId?: string;
      /**
       * Format: uuid
       * @description dst status is required
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstStatusId?: string;
      /**
       * @description [optional] name
       * @example To Do
       */
      name?: string;
      /**
       * @description [optional] uniq alias inside twinflow
       * @example start
       */
      alias?: string;
      /**
       * Format: uuid
       * @description [optional] some permission required to run transition
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      /**
       * Format: uuid
       * @description Inbuilt TwinFactory Id
       */
      inbuiltTwinFactoryId?: string;
      /**
       * Format: uuid
       * @description Drafting TwinFactory Id
       */
      draftingTwinFactoryId?: string;
    };
    TransitionCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      transition?: components["schemas"]["TwinflowTransitionBaseV2"];
    };
    /** @description twinflow */
    TwinflowBaseV2: {
      /**
       * Format: uuid
       * @example 34618b09-e8dc-4712-a433-2e18915ee70d
       */
      id?: string;
      /**
       * Format: uuid
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      /**
       * @description name
       * @example Project
       */
      name?: string;
      /**
       * @description description
       * @example Projects business objects
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
      /**
       * Format: uuid
       * @description initialStatusId
       */
      initialStatusId?: string;
      twinClass?: components["schemas"]["TwinClassBaseV1"];
      initialStatus?: components["schemas"]["TwinStatusV1"];
      createdByUser?: components["schemas"]["UserV1"];
    };
    /** @description results - transition list */
    TwinflowTransitionBaseV2: {
      /**
       * Format: uuid
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstTwinStatusId?: string;
      dstTwinStatus?: components["schemas"]["TwinStatusV1"];
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description alias
       * @example start
       */
      alias?: string;
      allowComment?: boolean;
      allowAttachments?: boolean;
      allowLinks?: boolean;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      srcTwinStatusId?: string;
      srcTwinStatus?: components["schemas"]["TwinStatusV1"];
      /**
       * Format: uuid
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      permission?: components["schemas"]["PermissionV1"];
      /**
       * Format: uuid
       * @description twinflow id
       * @example 34618b09-e8dc-4712-a433-2e18915ee70d
       */
      twinflowId?: string;
      twinflow?: components["schemas"]["TwinflowBaseV2"];
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      createdByUser?: components["schemas"]["UserV1"];
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
    };
    TwinflowListRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description twin class id list */
      twinClassIdList?: string[];
      /** @description twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description name i18n keyword list(AND) */
      nameI18nLikeList?: string[];
      /** @description name i18n keyword exclude list(OR) */
      nameI18nNotLikeList?: string[];
      /** @description description i18n keyword list(AND) */
      descriptionI18nLikeList?: string[];
      /** @description description i18n exclude keyword list(OR) */
      descriptionI18nNotLikeList?: string[];
      /** @description initial status id list */
      initialStatusIdList?: string[];
      /** @description initial status id exclude list */
      initialStatusIdExcludeList?: string[];
      /** @description user id list */
      createdByUserIdList?: string[];
      /** @description user id exclude list */
      createdByUserIdExcludeList?: string[];
      /** @description twinflow schema id list */
      twinflowSchemaIdList?: string[];
      /** @description twinflow schema id exclude list */
      twinflowSchemaIdExcludeList?: string[];
    };
    /** @description validators */
    TransitionValidatorRuleBaseV1: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /** @description active */
      active?: boolean;
      /**
       * Format: uuid
       * @description grouped set of twin validators id
       */
      twinValidatorSetId?: string;
      /** @description Twin validator list */
      twinValidators?: components["schemas"]["TwinValidatorBaseV1"][];
      twinValidatorSet?: components["schemas"]["TwinValidatorSetBaseV1"];
      /**
       * Format: uuid
       * @description twinflow transition id
       */
      twinflowTransitionId?: string;
    };
    /** @description triggers */
    TriggerV1: {
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /**
       * Format: int32
       * @description trigger featurer id
       */
      triggerFeaturerId?: number;
      /** @description featurer params */
      triggerParams?: {
        [key: string]: string;
      };
      /** @description active */
      active?: boolean;
      /**
       * Format: uuid
       * @description id
       * @example 9d956a15-6858-40ba-b0aa-b123c54e250d
       */
      id?: string;
      triggerFeaturer?: components["schemas"]["FeaturerV1"];
    };
    /** @description Twin validator list */
    TwinValidatorBaseV1: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: uuid
       * @description grouped set of twin validators id
       */
      twinValidatorSetId?: string;
      /**
       * Format: int32
       * @description validator featurer id
       */
      validatorFeaturerId?: number;
      /** @description featurer params */
      validatorParams?: {
        [key: string]: string;
      };
      /** @description invert */
      invert?: boolean;
      /** @description active */
      active?: boolean;
      /** @description description */
      description?: string;
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      twinValidatorSet?: components["schemas"]["TwinValidatorSetBaseV1"];
      validatorFeaturer?: components["schemas"]["FeaturerV1"];
    };
    /** @description grouping set of twin validator */
    TwinValidatorSetBaseV1: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: uuid
       * @description domain id
       */
      domainId?: string;
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
    };
    /** @description twinflow details */
    TwinflowBaseV3: {
      /**
       * Format: uuid
       * @example 34618b09-e8dc-4712-a433-2e18915ee70d
       */
      id?: string;
      /**
       * Format: uuid
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      /**
       * @description name
       * @example Project
       */
      name?: string;
      /**
       * @description description
       * @example Projects business objects
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
      /**
       * Format: uuid
       * @description initialStatusId
       */
      initialStatusId?: string;
      twinClass?: components["schemas"]["TwinClassBaseV1"];
      initialStatus?: components["schemas"]["TwinStatusV1"];
      createdByUser?: components["schemas"]["UserV1"];
      /** @description transitions map */
      transitions?: {
        [key: string]: components["schemas"]["TwinflowTransitionBaseV3"];
      };
    };
    TwinflowListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - twinflow list */
      twinflowList?: components["schemas"]["TwinflowBaseV3"][];
    };
    /** @description transition details */
    TwinflowTransitionBaseV3: {
      /**
       * Format: uuid
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstTwinStatusId?: string;
      dstTwinStatus?: components["schemas"]["TwinStatusV1"];
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description alias
       * @example start
       */
      alias?: string;
      allowComment?: boolean;
      allowAttachments?: boolean;
      allowLinks?: boolean;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      srcTwinStatusId?: string;
      srcTwinStatus?: components["schemas"]["TwinStatusV1"];
      /**
       * Format: uuid
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      permission?: components["schemas"]["PermissionV1"];
      /**
       * Format: uuid
       * @description twinflow id
       * @example 34618b09-e8dc-4712-a433-2e18915ee70d
       */
      twinflowId?: string;
      twinflow?: components["schemas"]["TwinflowBaseV2"];
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      createdByUser?: components["schemas"]["UserV1"];
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
      /** @description validators */
      validatorRules?: components["schemas"]["TransitionValidatorRuleBaseV1"][];
      /** @description triggers */
      triggers?: components["schemas"]["TriggerV1"][];
    };
    TwinStatusSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description twin class id list */
      twinClassIdList?: string[];
      /** @description twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description key like list */
      keyLikeList?: string[];
      /** @description key not like list */
      keyNotLikeList?: string[];
      /** @description name i18n like list */
      nameI18nLikeList?: string[];
      /** @description name i18n not like list */
      nameI18nNotLikeList?: string[];
      /** @description description i18n like list */
      descriptionI18nLikeList?: string[];
      /** @description description i18n not like list */
      descriptionI18nNotLikeList?: string[];
    };
    TwinStatusSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - status list */
      statuses?: components["schemas"]["TwinStatusV2"][];
    };
    /** @description results - status list */
    TwinStatusV2: {
      /**
       * Format: uuid
       * @description uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      id?: string;
      /** @description key within the domain */
      key?: string;
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description url for status UI logo
       * @example https://twins.org/img/twin_status_default.png
       */
      logo?: string;
      /**
       * @description background color hex
       * @example #ff00ff
       */
      backgroundColor?: string;
      /**
       * @description font color hex
       * @example #ff00ff
       */
      fontColor?: string;
      /**
       * Format: uuid
       * @description twin class
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      twinClass?: components["schemas"]["TwinClassBaseV1"];
    };
    TwinClassFieldSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description twin class id list */
      twinClassIdList?: string[];
      /** @description twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description key like list */
      keyLikeList?: string[];
      /** @description key not like list */
      keyNotLikeList?: string[];
      /** @description name i18n like list */
      nameI18nLikeList?: string[];
      /** @description name i18n not like list */
      nameI18nNotLikeList?: string[];
      /** @description description i18n like list */
      descriptionI18nLikeList?: string[];
      /** @description description i18n not like list */
      descriptionI18nNotLikeList?: string[];
      /** @description field typer id list */
      fieldTyperIdList?: number[];
      /** @description field typer id exclude list */
      fieldTyperIdExcludeList?: number[];
      /** @description view permission id list */
      viewPermissionIdList?: string[];
      /** @description view permission id exclude list */
      viewPermissionIdExcludeList?: string[];
      /** @description edit permission id list */
      editPermissionIdList?: string[];
      /** @description edit permission id exclude list */
      editPermissionIdExcludeList?: string[];
      /**
       * @description required
       * @example ANY
       * @enum {string}
       */
      required?: "ONLY" | "ONLY_NOT" | "ANY";
    };
    TwinClassFieldSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - twin class field list */
      fields?: components["schemas"]["TwinClassFieldV2"][];
    };
    TwinSearchSimpleV1: {
      /** @description Twin name like */
      nameLike?: string;
      /** @description Twin alias like */
      aliasLike?: string;
    };
    TwinSearchRsV2: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - transfers list */
      twinList?: components["schemas"]["TwinV2"][];
    };
    TwinflowCreateRqV1: {
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: uuid
       * @description initial status id
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      initialStatusId?: string;
    };
    TwinflowCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twinflow?: components["schemas"]["TwinflowBaseV2"];
    };
    TwinStatusCreateRqV1: {
      /**
       * @description [optional] key within the domain
       * @example toDo
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * @description [optional] url for status UI logo
       * @example https://twins.org/img/twin_status_default.png
       */
      logo?: string;
      /**
       * @description [optional] background color hex
       * @example #ff00ff
       */
      backgroundColor?: string;
      /**
       * @description [optional] font color hex
       * @example #ff00ff
       */
      fontColor?: string;
    };
    TwinStatusCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      twinStatus?: components["schemas"]["TwinStatusV1"];
    };
    TagSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description option like list */
      optionLikeList?: string[];
      /** @description option not like list */
      optionNotLikeList?: string[];
      /** @description option i18n like list */
      optionI18nLikeList?: string[];
      /** @description option i18n not like list */
      optionI18nNotLikeList?: string[];
    };
    TagSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - tag option list */
      options?: components["schemas"]["DataListOptionV3"][];
    };
    TwinClassFieldCreateRqV1: {
      /**
       * @description unique key within the class
       * @example serialNumber
       */
      key?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to view this field
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to edit this field
       */
      editPermissionId?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * @description Required field
       * @example true
       */
      required?: boolean;
      /**
       * Format: int32
       * @description Field typer featurer ID
       * @example 1
       */
      fieldTyperFeaturerId?: number;
      /**
       * @description Field typer parameters
       * @example {}
       */
      fieldTyperParams?: {
        [key: string]: string;
      };
    };
    TwinClassDuplicateRqV1: {
      /**
       * @description new class key
       * @example PROJECT
       */
      newKey?: string;
    };
    TwinClassCreateRqV1: {
      /**
       * @description unique key within the domain
       * @example TOOL
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: int32
       * @description [optional] an id of head hunter featurer. The field has a sense only if headTwinClassId filled
       */
      headHunterFeaturerId?: number;
      /** @description [optional] head hunter featurer params */
      headHunterParams?: {
        [key: string]: string;
      };
      /**
       * @description [optional] if true, then not twin of given class can be created. Abstract classes must be extended
       * @example false
       */
      abstractClass?: boolean;
      /**
       * @description [optional] url for class UI logo
       * @example https://twins.org/img/twin_class_default.png
       */
      logo?: string;
      /**
       * @description [optional] if true then twins of current class can have own permission_schema and this schema will cover children twins
       * @example false
       */
      permissionSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class can have own twinflow_schema and this schema will cover children twins
       * @example false
       */
      twinflowSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class can have own twin_class_schema and this schema will cover children twins
       * @example false
       */
      twinClassSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class must have own alias key and this key will be used to generate alias for children twins
       * @example false
       */
      aliasSpace?: boolean;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to view twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to create twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      createPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to edit twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      editPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to delete twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      deletePermissionId?: string;
      /**
       * @description [optional] owner typ of class
       * @enum {string}
       */
      ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
      /**
       * Format: uuid
       * @description [optional] link to extends class. All fields and links will be valid for current class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      extendsTwinClassId?: string;
      /**
       * Format: uuid
       * @description [optional] link to head (parent) class. It should be used in case, when twins of some class can not exist without some parent twin. Example: Task and Sub-task. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      headTwinClassId?: string;
      /**
       * Format: uuid
       * @description [optional] id of linked marker list. Markers in some cases similar to secondary statuses. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      markerDataListId?: string;
      /**
       * Format: uuid
       * @description [optional] id of linked tags cloud. Tags differ from markers in that new tags can be added to the cloud by the users themselves. And the list of markers is configured only by the domain manager. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      tagDataListId?: string;
      /** @description [optional] if true - permissions will be created and assign to class (if not specified another permission ids in this dto) */
      autoCreatePermissions?: boolean;
    };
    TwinClassCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
    };
    TwinClassListRqV1: {
      /** @description twin class id list */
      twinClassIdList?: string[];
      /** @description twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description twin class key list */
      twinClassKeyLikeList?: string[];
      /** @description name i18n keyword list(AND) */
      nameI18nLikeList?: string[];
      /** @description name i18n keyword exclude list(OR) */
      nameI18nNotLikeList?: string[];
      /** @description description i18n keyword list(AND) */
      descriptionI18nLikeList?: string[];
      /** @description description i18n exclude keyword list(OR) */
      descriptionI18nNotLikeList?: string[];
      /** @description head twin class id list */
      headTwinClassIdList?: string[];
      /** @description head twin class id exclude list */
      headTwinClassIdExcludeList?: string[];
      /** @description extends twin class id list */
      extendsTwinClassIdList?: string[];
      /** @description extends twin class id exclude list */
      extendsTwinClassIdExcludeList?: string[];
      /** @description owner type list */
      ownerTypeList?: ("SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER")[];
      /** @description owner type exclude list */
      ownerTypeExcludeList?: ("SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER")[];
      /** @description marker data list id list */
      markerDatalistIdList?: string[];
      /** @description marker data list id exclude list */
      markerDatalistIdExcludeList?: string[];
      /** @description tag data list id list */
      tagDatalistIdList?: string[];
      /** @description tag data list id exclude list */
      tagDatalistIdExcludeList?: string[];
      /**
       * @description twin class is abstract
       * @example ANY
       * @enum {string}
       */
      abstractt?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description twin class has twinflow schema space
       * @example ANY
       * @enum {string}
       */
      twinflowSchemaSpace?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description twin class has schema space
       * @example ANY
       * @enum {string}
       */
      twinClassSchemaSpace?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description twin class has permission schema space
       * @example ANY
       * @enum {string}
       */
      permissionSchemaSpace?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description twin class has alias space
       * @example ANY
       * @enum {string}
       */
      aliasSpace?: "ONLY" | "ONLY_NOT" | "ANY";
      /** @description permission id list */
      viewPermissionIdList?: string[];
      /** @description permission id exclude list */
      viewPermissionIdExcludeList?: string[];
      /** @description create permission id list */
      createPermissionIdList?: string[];
      /** @description create permission id exclude list */
      createPermissionIdExcludeList?: string[];
      /** @description edit permission id list */
      editPermissionIdList?: string[];
      /** @description edit permission id exclude list */
      editPermissionIdExcludeList?: string[];
      /** @description delete permission id list */
      deletePermissionIdList?: string[];
      /** @description delete permission id exclude list */
      deletePermissionIdExcludeList?: string[];
    };
    TwinClassListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - twin class list */
      twinClassList?: components["schemas"]["TwinClassV1"][];
    };
    PermissionCheckOverviewRqV1: {
      /**
       * Format: uuid
       * @description userId for whom we want to check permission (will be different from ApiUser)
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      userId?: string;
      /**
       * Format: uuid
       * @description if null, then use view_permission_id from twin or from twin_class
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
    };
    /** @description field data */
    TwinFieldV1: {
      value?: components["schemas"]["TwinFieldValueDTO"];
      twinClassField?: components["schemas"]["TwinClassFieldV1"];
    };
    TwinFieldValueColorHexV1: {
      valueType: "colorHexV1";
    } & Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
      valueType?: string;
      /**
       * @description Color hex code
       * @example #575584
       */
      hex?: string;
    };
    /** @description One of values */
    TwinFieldValueDTO: {
      valueType: string;
    } & (components["schemas"]["TwinFieldValueTextV1"] | components["schemas"]["TwinFieldValueColorHexV1"] | components["schemas"]["TwinFieldValueDateV1"] | components["schemas"]["TwinFieldValueDataListOptionsV1"]);
    TwinFieldValueDataListOptionsV1: {
      valueType: "listOptionsV1";
    } & Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
      valueType?: string;
      /** @description Selected option */
      selectedOptions?: components["schemas"]["DataListOptionV1"][];
    };
    TwinFieldValueDateV1: {
      valueType: "dateV1";
    } & Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
      valueType?: string;
      /** @description Date */
      date?: string;
    };
    TwinFieldValueTextV1: {
      valueType: "textV1";
    } & Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
      valueType?: string;
      /**
       * @description Some simple text
       * @example Hello world
       */
      text?: string;
    };
    TwinSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - transfers list */
      twinList?: components["schemas"]["TwinV1"][];
    };
    /** @description twin */
    TwinV1: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * @description externalId
       * @example 934599502DFFAE
       */
      externalId?: string;
      /**
       * Format: uuid
       * @description headTwinId
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /**
       * Format: uuid
       * @description statusId
       */
      statusId?: string;
      /**
       * Format: uuid
       * @description class
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description current assigner
       */
      assignerUserId?: string;
      /**
       * Format: uuid
       * @description author
       */
      authorUserId?: string;
      status?: components["schemas"]["TwinStatusV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
      assignerUser?: components["schemas"]["UserV1"];
      authorUser?: components["schemas"]["UserV1"];
      headTwin?: components["schemas"]["TwinBaseV2"];
      /** @description aliases */
      aliases?: string[];
      /** @description Attachments */
      attachments?: components["schemas"]["AttachmentViewV1"][];
      attachmentsCount?: components["schemas"]["AttachmentsCountV1"];
      links?: components["schemas"]["TwinLinkListV1"];
      /** @description TransitionId list. Will be filled only in lazyRelations mode is false */
      transitionsIdList?: string[];
      /** @description Transition list. Will be filled only if lazyRelations mode is true */
      transitions?: components["schemas"]["TwinTransitionViewV1"][];
      /** @description MarkerId list. Will be filled only in lazyRelations mode is false */
      markerIdList?: string[];
      /** @description Marker list. Will be filled only if lazyRelations mode is true */
      markers?: components["schemas"]["DataListOptionV1"][];
      /** @description TagId list. Will be filled only in lazyRelations mode is false */
      tagIdList?: string[];
      /** @description Tag list. Will be filled only if lazyRelations mode is true */
      tags?: components["schemas"]["DataListOptionV1"][];
      /** @description Suitable actions list */
      actions?: ("EDIT" | "DELETE" | "MOVE" | "COMMENT" | "WATCH" | "TIME_TRACK" | "ATTACHMENT_ADD" | "HISTORY_VIEW")[];
      /** @description Twins of which classes are possible to create as children for given twin */
      creatableChildTwinClassIds?: string[];
      /** @description Twins of which classes are possible to create as children for given twin */
      creatableChildTwinClasses?: components["schemas"]["TwinClassV1"][];
      /** @description fields */
      fields?: components["schemas"]["TwinFieldV1"][];
    };
    TwinLinkAddRqV1: {
      /** @description Links list */
      links?: components["schemas"]["TwinLinkAddV1"][];
    };
    TwinLinkAddRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description id */
      twinLinkIdList?: string[];
    };
    TwinFieldListUpdateRqV1: {
      /** @description fields */
      fields?: {
        [key: string]: string;
      };
    };
    TwinFieldRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /**
       * Format: uuid
       * @description twinId
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      twinId?: string;
      field?: components["schemas"]["TwinFieldV1"];
    };
    TwinFieldUpdateRqV1: {
      value?: components["schemas"]["TwinFieldValueColorHexV1"] | components["schemas"]["TwinFieldValueDataListOptionsV1"] | components["schemas"]["TwinFieldValueDateV1"] | components["schemas"]["TwinFieldValueTextV1"];
    };
    AttachmentAddRqV1: {
      /** @description Attachments list */
      attachments?: components["schemas"]["AttachmentAddV1"][];
    };
    AttachmentAddRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description id */
      attachmentIdList?: string[];
    };
    TwinCreateRqV2: {
      /**
       * Format: uuid
       * @description Class Id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      classId?: string;
      /**
       * Format: uuid
       * @description Head twin id, if selected class had to be linked to some head twin
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * Format: uuid
       * @description assigner user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      assignerUserId?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /** @description fields */
      fields?: {
        [key: string]: string;
      };
      /** @description Attachments */
      attachments?: components["schemas"]["AttachmentAddV1"][];
      /** @description Links list */
      links?: components["schemas"]["TwinLinkAddV1"][];
      tags?: components["schemas"]["TwinTagAddV1"];
    };
    /** @description Tags list */
    TwinTagAddV1: {
      /**
       * @description add already existing tags by their ids
       * @example [
       *   "11a4c3f8-c780-4421-9aee-9e7eec20c67d",
       *   "83050c4b-ef17-4d7d-8792-6e5a86557ab9"
       * ]
       */
      existingTags?: string[];
      /**
       * @description add new tags by name (in current locale). If tag with given name is already exist, it will be used
       * @example [
       *   "String 1",
       *   "String 2"
       * ]
       */
      newTags?: string[];
    };
    TwinCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /**
       * Format: uuid
       * @description new twin id
       */
      twinId?: string;
      /** @description twin alias list */
      twinAliasList?: string[];
    };
    TwinCreateRqV1: {
      /**
       * Format: uuid
       * @description Class Id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      classId?: string;
      /**
       * Format: uuid
       * @description Head twin id, if selected class had to be linked to some head twin
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * Format: uuid
       * @description assigner user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      assignerUserId?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /** @description fields */
      fields?: {
        [key: string]: components["schemas"]["TwinFieldValueColorHexV1"] | components["schemas"]["TwinFieldValueDataListOptionsV1"] | components["schemas"]["TwinFieldValueDateV1"] | components["schemas"]["TwinFieldValueTextV1"];
      };
      /** @description Attachments */
      attachments?: components["schemas"]["AttachmentAddV1"][];
      /** @description Links list */
      links?: components["schemas"]["TwinLinkAddV1"][];
    };
    TwinListTouchAddRqV1: {
      /** @description twin id list */
      twinIdList?: string[];
    };
    TwinTouchListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description touche twins data */
      touchTwins?: components["schemas"]["TwinTouchV1"][];
    };
    /** @description One of values */
    TwinFieldSearchDTOv1: {
      type: string;
    } & (components["schemas"]["TwinFieldSearchTextV1"] | components["schemas"]["TwinFieldSearchNumberV1"] | components["schemas"]["TwinFieldSearchDateV1"] | components["schemas"]["TwinFieldSearchDataListOptionsV1"]);
    TwinFieldSearchDataListOptionsV1: {
      type: "searchListOptionsV1";
    } & Omit<components["schemas"]["TwinFieldSearchDTOv1"], "type"> & {
      type?: string;
      /** @description Include options with given ids. AND join */
      optionsAllOfList?: string[];
      /** @description Include options with given ids. OR join */
      optionsAnyOfList?: string[];
      /** @description Exclude options with given ids. AND join */
      optionsNoAllOfList?: string[];
      /** @description Exclude options with given ids. OR join */
      optionsNoAnyOfList?: string[];
    };
    /** @description (less & more connected with AND) and after connected to equals with OR and to emty with OR */
    TwinFieldSearchDateV1: {
      type: "searchDateValueV1";
    } & Omit<components["schemas"]["TwinFieldSearchDTOv1"], "type"> & {
      type?: string;
      /**
       * Format: date-time
       * @description Twin field date less then given date
       */
      lessThen?: string;
      /**
       * Format: date-time
       * @description Twin field date greater then given date
       */
      moreThen?: string;
      /**
       * Format: date-time
       * @description Twin field date equals to given date
       */
      equals?: string;
      /** @description include entities with empty or null values to result */
      empty?: boolean;
    };
    /** @description (less & more connected with AND) and after connected to equals with OR */
    TwinFieldSearchNumberV1: {
      type: "searchNumberValueV1";
    } & Omit<components["schemas"]["TwinFieldSearchDTOv1"], "type"> & {
      type?: string;
      /** @description Twin field numeric value less then given */
      lessThen?: string;
      /** @description Twin field numeric value greater then given */
      moreThen?: string;
      /** @description Twin field numeric value equals to given */
      equals?: string;
    };
    TwinFieldSearchTextV1: {
      type: "searchTextValueV1";
    } & Omit<components["schemas"]["TwinFieldSearchDTOv1"], "type"> & {
      type?: string;
      /** @description Include like given strings. AND join. Add % symbols manual to use LIKE features. */
      valueLikeAllOfList?: string[];
      /** @description Include like given strings. OR join. Add % symbols manual to use LIKE features. */
      valueLikeAnyOfList?: string[];
      /** @description Exclude like given strings. AND join. Add % symbols manual to use LIKE features. */
      valueLikeNoAllOfList?: string[];
      /** @description Exclude like given strings. OR join. Add % symbols manual to use LIKE features. */
      valueLikeNoAnyOfList?: string[];
    };
    TwinSearchByAliasRqV1: {
      /** @description Search named params values */
      params?: {
        [key: string]: string;
      };
      narrow?: components["schemas"]["TwinSearchExtendedV1"];
    };
    /** @description Exclude dst twins with given links. AND join */
    TwinSearchByLinkV1: {
      /**
       * Format: uuid
       * @description Twin-link class id
       */
      linkId?: string;
      /** @description Twin dest ids for in(ex)clude from search */
      dstTwinIdList?: string[];
    };
    /** @description search narrowing */
    TwinSearchExtendedV1: {
      /** @description Twin class id list */
      twinClassIdList?: string[];
      /** @description Twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description Twin name like list */
      twinNameLikeList?: string[];
      /** @description Twin name not like list */
      twinNameNotLikeList?: string[];
      /** @description Twin description like list */
      descriptionLikeList?: string[];
      /** @description Twin description not like list */
      descriptionNotLikeList?: string[];
      /** @description Head twin id list */
      headTwinIdList?: string[];
      /** @description Twin id list */
      twinIdList?: string[];
      /** @description Twin id exclude list */
      twinIdExcludeList?: string[];
      /** @description Status id list */
      statusIdList?: string[];
      /** @description Assigner id list */
      assignerUserIdList?: string[];
      /** @description Assigner id exclude list */
      assignerUserIdExcludeList?: string[];
      /** @description Reporter id list */
      createdByUserIdList?: string[];
      /** @description Reporter id exclude list */
      createdByUserIdExcludeList?: string[];
      /** @description Include dst twins with given links. OR join */
      linksAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Exclude dst twins with given links. OR join */
      linksNoAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Include dst twins with given links. AND join */
      linksAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Exclude dst twins with given links. AND join */
      linksNoAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Hierarchy ids filter */
      hierarchyTreeContainsIdList?: string[];
      /** @description Twin status exclude list */
      statusIdExcludeList?: string[];
      /** @description Twin tag list(data list options ids) */
      tagDataListOptionIdList?: string[];
      /** @description Twin tag exclude list(data list options ids) */
      tagDataListOptionIdExcludeList?: string[];
      /** @description Twin marker list(data list options ids) */
      markerDataListOptionIdList?: string[];
      /** @description Twin marker exclude list(data list options ids) */
      markerDataListOptionIdExcludeList?: string[];
      /** @description Twin extends by twin class list ids */
      extendsTwinClassIdList?: string[];
      /** @description Head twin class list ids */
      headTwinClassIdList?: string[];
      /** @description Twin touch list ids */
      touchList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      /** @description Twin touch exclude list ids */
      touchExcludeList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      /** @description Twin Field Search. Key TwinClassField id. */
      fields?: {
        [key: string]: components["schemas"]["TwinFieldSearchDataListOptionsV1"] | components["schemas"]["TwinFieldSearchDateV1"] | components["schemas"]["TwinFieldSearchNumberV1"] | components["schemas"]["TwinFieldSearchTextV1"];
      };
      headSearch?: components["schemas"]["TwinSearchV1"];
      childrenSearch?: components["schemas"]["TwinSearchV1"];
    };
    /** @description Children twin sub-search */
    TwinSearchV1: {
      /** @description Twin class id list */
      twinClassIdList?: string[];
      /** @description Twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description Twin name like list */
      twinNameLikeList?: string[];
      /** @description Twin name not like list */
      twinNameNotLikeList?: string[];
      /** @description Twin description like list */
      descriptionLikeList?: string[];
      /** @description Twin description not like list */
      descriptionNotLikeList?: string[];
      /** @description Head twin id list */
      headTwinIdList?: string[];
      /** @description Twin id list */
      twinIdList?: string[];
      /** @description Twin id exclude list */
      twinIdExcludeList?: string[];
      /** @description Status id list */
      statusIdList?: string[];
      /** @description Assigner id list */
      assignerUserIdList?: string[];
      /** @description Assigner id exclude list */
      assignerUserIdExcludeList?: string[];
      /** @description Reporter id list */
      createdByUserIdList?: string[];
      /** @description Reporter id exclude list */
      createdByUserIdExcludeList?: string[];
      /** @description Include dst twins with given links. OR join */
      linksAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Exclude dst twins with given links. OR join */
      linksNoAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Include dst twins with given links. AND join */
      linksAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Exclude dst twins with given links. AND join */
      linksNoAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Hierarchy ids filter */
      hierarchyTreeContainsIdList?: string[];
      /** @description Twin status exclude list */
      statusIdExcludeList?: string[];
      /** @description Twin tag list(data list options ids) */
      tagDataListOptionIdList?: string[];
      /** @description Twin tag exclude list(data list options ids) */
      tagDataListOptionIdExcludeList?: string[];
      /** @description Twin marker list(data list options ids) */
      markerDataListOptionIdList?: string[];
      /** @description Twin marker exclude list(data list options ids) */
      markerDataListOptionIdExcludeList?: string[];
      /** @description Twin extends by twin class list ids */
      extendsTwinClassIdList?: string[];
      /** @description Head twin class list ids */
      headTwinClassIdList?: string[];
      /** @description Twin touch list ids */
      touchList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      /** @description Twin touch exclude list ids */
      touchExcludeList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      /** @description Twin Field Search. Key TwinClassField id. */
      fields?: {
        [key: string]: components["schemas"]["TwinFieldSearchDataListOptionsV1"] | components["schemas"]["TwinFieldSearchDateV1"] | components["schemas"]["TwinFieldSearchNumberV1"] | components["schemas"]["TwinFieldSearchTextV1"];
      };
    };
    TwinSearchByAliasBatchRqV1: {
      /** @description Search alias ref alias request body(TwinSearchByAliasRqV1) */
      searchMap?: {
        [key: string]: components["schemas"]["TwinSearchByAliasRqV1"];
      };
    };
    TwinSearchBatchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description Map { frontendId / count } */
      response?: {
        [key: string]: number;
      };
    };
    TwinSearchRqV1: {
      /** @description Twin class id list */
      twinClassIdList?: string[];
      /** @description Twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description Twin name like list */
      twinNameLikeList?: string[];
      /** @description Twin name not like list */
      twinNameNotLikeList?: string[];
      /** @description Twin description like list */
      descriptionLikeList?: string[];
      /** @description Twin description not like list */
      descriptionNotLikeList?: string[];
      /** @description Head twin id list */
      headTwinIdList?: string[];
      /** @description Twin id list */
      twinIdList?: string[];
      /** @description Twin id exclude list */
      twinIdExcludeList?: string[];
      /** @description Status id list */
      statusIdList?: string[];
      /** @description Assigner id list */
      assignerUserIdList?: string[];
      /** @description Assigner id exclude list */
      assignerUserIdExcludeList?: string[];
      /** @description Reporter id list */
      createdByUserIdList?: string[];
      /** @description Reporter id exclude list */
      createdByUserIdExcludeList?: string[];
      /** @description Include dst twins with given links. OR join */
      linksAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Exclude dst twins with given links. OR join */
      linksNoAnyOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Include dst twins with given links. AND join */
      linksAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Exclude dst twins with given links. AND join */
      linksNoAllOfList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Hierarchy ids filter */
      hierarchyTreeContainsIdList?: string[];
      /** @description Twin status exclude list */
      statusIdExcludeList?: string[];
      /** @description Twin tag list(data list options ids) */
      tagDataListOptionIdList?: string[];
      /** @description Twin tag exclude list(data list options ids) */
      tagDataListOptionIdExcludeList?: string[];
      /** @description Twin marker list(data list options ids) */
      markerDataListOptionIdList?: string[];
      /** @description Twin marker exclude list(data list options ids) */
      markerDataListOptionIdExcludeList?: string[];
      /** @description Twin extends by twin class list ids */
      extendsTwinClassIdList?: string[];
      /** @description Head twin class list ids */
      headTwinClassIdList?: string[];
      /** @description Twin touch list ids */
      touchList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      /** @description Twin touch exclude list ids */
      touchExcludeList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      /** @description Twin Field Search. Key TwinClassField id. */
      fields?: {
        [key: string]: components["schemas"]["TwinFieldSearchDataListOptionsV1"] | components["schemas"]["TwinFieldSearchDateV1"] | components["schemas"]["TwinFieldSearchNumberV1"] | components["schemas"]["TwinFieldSearchTextV1"];
      };
      headSearch?: components["schemas"]["TwinSearchV1"];
      childrenSearch?: components["schemas"]["TwinSearchV1"];
    };
    TwinSearchBatchRqV1: {
      /**
       * @description Map of { frontendId / TwinSearchRqV1 }
       * @example {
       *   "id1": {
       *     "twinClassIdList": [
       *       "ab750e98-70dd-404e-8164-4e0daa187164"
       *     ]
       *   },
       *   "id2": {
       *     "twinClassIdList": [
       *       "ab750e98-70dd-404e-8164-4e0daa187164"
       *     ]
       *   }
       * }
       */
      searchMap?: {
        [key: string]: components["schemas"]["TwinSearchRqV1"];
      };
    };
    /** @description create at */
    DataTimeRangeV1: {
      /**
       * Format: date-time
       * @description data time form
       */
      from?: string;
      /**
       * Format: date-time
       * @description data time to
       */
      to?: string;
    };
    HistorySearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description twin id list */
      twinIdList?: string[];
      /** @description twin id exclude list */
      twinIdExcludeList?: string[];
      /**
       * @description need include direct children
       * @example true
       */
      includeDirectChildren?: boolean;
      /** @description actor user id list */
      actorUseridList?: string[];
      /** @description actor user id exclude list */
      actorUserIdExcludeList?: string[];
      /** @description type list */
      typeList?: ("twinCreated" | "headChanged" | "statusChanged" | "nameChanged" | "descriptionChanged" | "createdByChanged" | "assigneeChanged" | "fieldCreated" | "fieldChanged" | "fieldDeleted" | "markerChanged" | "tagChanged" | "attachmentCreate" | "attachmentDelete" | "attachmentUpdate" | "linkCreated" | "linkUpdated" | "linkDeleted" | "twinDeleted" | "unknown")[];
      /** @description type exclude list */
      typeExcludeList?: ("twinCreated" | "headChanged" | "statusChanged" | "nameChanged" | "descriptionChanged" | "createdByChanged" | "assigneeChanged" | "fieldCreated" | "fieldChanged" | "fieldDeleted" | "markerChanged" | "tagChanged" | "attachmentCreate" | "attachmentDelete" | "attachmentUpdate" | "linkCreated" | "linkUpdated" | "linkDeleted" | "twinDeleted" | "unknown")[];
      createdAt?: components["schemas"]["DataTimeRangeV1"];
    };
    HistorySearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description history list */
      histories?: components["schemas"]["HistoryV1"][];
    };
    /** @description history */
    HistoryV1: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * Format: uuid
       * @description twinId
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      twinId?: string;
      /**
       * Format: uuid
       * @description changes batch id
       */
      batchId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description history actor id
       */
      actorUserId?: string;
      /** @enum {string} */
      type?: "twinCreated" | "headChanged" | "statusChanged" | "nameChanged" | "descriptionChanged" | "createdByChanged" | "assigneeChanged" | "fieldCreated" | "fieldChanged" | "fieldDeleted" | "markerChanged" | "tagChanged" | "attachmentCreate" | "attachmentDelete" | "attachmentUpdate" | "linkCreated" | "linkUpdated" | "linkDeleted" | "twinDeleted" | "unknown";
      /** @description Filled only if type = fieldChanged */
      fieldName?: string;
      twin?: components["schemas"]["TwinBaseV2"];
      actorUser?: components["schemas"]["UserV1"];
      /** @description Detailed description for history item. Contains markdown */
      changeDescription?: string;
      pagination?: components["schemas"]["PaginationV1"];
    };
    TwinDeleteRqV1: {
      /** @description twin set id list */
      twinIds?: string[];
    };
    /** @description list of basic twin fields */
    TwinBasicFieldsV1: {
      /**
       * Format: uuid
       * @description assignee user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      assigneeUserId?: string;
      /**
       * Format: uuid
       * @description created by user_id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      createdByUserId?: string;
      name?: string;
      description?: string;
    };
    /** @description TwinLinks for create/update/delete */
    TwinLinkCudV1: {
      /** @description TwinLinks for adding */
      create?: components["schemas"]["TwinLinkAddV1"][];
      /** @description TwinLinks for updating */
      update?: components["schemas"]["TwinLinkUpdateV1"][];
      /** @description TwinLinks id list for deleting */
      delete?: string[];
    };
    /** @description some extra data to perform transition */
    TwinTransitionContextV1: {
      /** @description fields */
      fields?: {
        [key: string]: string;
      };
      attachments?: components["schemas"]["AttachmentCudV1"];
      twinLinks?: components["schemas"]["TwinLinkCudV1"];
      /** @description list of twins, that must be created during transition */
      newTwins?: components["schemas"]["TwinCreateRqV2"][];
      basics?: components["schemas"]["TwinBasicFieldsV1"];
    };
    TwinTransitionPerformRqV1: {
      /**
       * Format: uuid
       * @description Target twin id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      twinId?: string;
      comment?: string;
      context?: components["schemas"]["TwinTransitionContextV1"];
    };
    /** @description On of values */
    TwinTransitionPerformResultDTO: {
      /** @description discriminator */
      resultType: string;
      changeType: string;
    } & (components["schemas"]["TwinTransitionPerformResultMinorRsV1"] | components["schemas"]["TwinTransitionPerformResultMajorRsV1"]);
    TwinTransitionPerformResultMajorRsV1: WithRequired<{
      resultType: "multiUserV1";
    } & Omit<components["schemas"]["TwinTransitionPerformResultDTO"], "resultType"> & {
      draft?: components["schemas"]["DraftV1"];
    }, "resultType">;
    TwinTransitionPerformResultMinorRsV1: WithRequired<{
      resultType: "userV1";
    } & Omit<components["schemas"]["TwinTransitionPerformResultDTO"], "resultType"> & {
      /** @description list of twins from input */
      transitionedTwinList?: components["schemas"]["TwinV2"][];
      /** @description list of twins processed by transition (some new can be created or updated). Key is twinClassId */
      processedTwinList?: {
        [key: string]: components["schemas"]["TwinV2"][];
      };
    }, "resultType">;
    TwinTransitionPerformRsV2: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      result?: components["schemas"]["TwinTransitionPerformResultDTO"];
    };
    TwinTransitionPerformRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      /** @description list of twins from input */
      transitionedTwinList?: components["schemas"]["TwinV2"][];
      /** @description list of twins processed by transition (some new can be created or updated). Key is twinClassId */
      processedTwinList?: {
        [key: string]: components["schemas"]["TwinV2"][];
      };
    };
    TwinTransitionPerformBatchRqV1: {
      twinIdList?: string[];
      batchComment?: string;
      batchContext?: components["schemas"]["TwinTransitionContextV1"];
    };
    TwinTransitionDraftRqV1: {
      /**
       * Format: uuid
       * @description Target twin id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      twinId?: string;
      comment?: string;
      context?: components["schemas"]["TwinTransitionContextV1"];
    };
    TwinTransitionDraftRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      transitionDraft?: components["schemas"]["DraftV1"];
    };
    TwinTransitionDraftBatchRqV1: {
      twinIdList?: string[];
      batchComment?: string;
      batchContext?: components["schemas"]["TwinTransitionContextV1"];
    };
    TransitionUpdateRqV1: {
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: uuid
       * @description [optional] src status id. if null - from any status transition
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      srcStatusId?: string;
      /**
       * Format: uuid
       * @description dst status is required
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstStatusId?: string;
      /**
       * @description [optional] name
       * @example To Do
       */
      name?: string;
      /**
       * @description [optional] uniq alias inside twinflow
       * @example start
       */
      alias?: string;
      /**
       * Format: uuid
       * @description [optional] some permission required to run transition
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      /**
       * Format: uuid
       * @description Inbuilt TwinFactory Id
       */
      inbuiltTwinFactoryId?: string;
      /**
       * Format: uuid
       * @description Drafting TwinFactory Id
       */
      draftingTwinFactoryId?: string;
      validatorRules?: components["schemas"]["ValidatorCudV1"];
      triggers?: components["schemas"]["TriggerCudV1"];
    };
    /** @description triggers create list */
    TriggerCreateV1: {
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /**
       * Format: int32
       * @description trigger featurer id
       */
      triggerFeaturerId?: number;
      /** @description featurer params */
      triggerParams?: {
        [key: string]: string;
      };
      /** @description active */
      active?: boolean;
    };
    /** @description triggers cud operations */
    TriggerCudV1: {
      /** @description triggers create list */
      create?: components["schemas"]["TriggerCreateV1"][];
      /** @description triggers update list */
      update?: components["schemas"]["TriggerUpdateV1"][];
      /** @description triggers ids list to deletes */
      delete?: string[];
    };
    /** @description triggers update list */
    TriggerUpdateV1: {
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /**
       * Format: int32
       * @description trigger featurer id
       */
      triggerFeaturerId?: number;
      /** @description featurer params */
      triggerParams?: {
        [key: string]: string;
      };
      /** @description active */
      active?: boolean;
      /**
       * Format: uuid
       * @description id
       * @example 9d956a15-6858-40ba-b0aa-b123c54e250d
       */
      id?: string;
      triggerFeaturer?: components["schemas"]["FeaturerV1"];
    };
    /** @description validators create list */
    ValidatorCreateV1: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /** @description active */
      active?: boolean;
      /**
       * Format: uuid
       * @description grouped set of twin validators id
       */
      twinValidatorSetId?: string;
      /** @description Twin validator list */
      twinValidators?: components["schemas"]["TwinValidatorBaseV1"][];
      twinValidatorSet?: components["schemas"]["TwinValidatorSetBaseV1"];
      /**
       * Format: uuid
       * @description twinflow transition id
       */
      twinflowTransitionId?: string;
    };
    /** @description validator rules cud operations */
    ValidatorCudV1: {
      /** @description validators create list */
      create?: components["schemas"]["ValidatorCreateV1"][];
      /** @description validators update list */
      update?: components["schemas"]["ValidatorUpdateV1"][];
      /** @description validators ids list to deletes */
      delete?: string[];
    };
    /** @description validators update list */
    ValidatorUpdateV1: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /** @description active */
      active?: boolean;
      /**
       * Format: uuid
       * @description grouped set of twin validators id
       */
      twinValidatorSetId?: string;
      /** @description Twin validator list */
      twinValidators?: components["schemas"]["TwinValidatorBaseV1"][];
      twinValidatorSet?: components["schemas"]["TwinValidatorSetBaseV1"];
      /**
       * Format: uuid
       * @description twinflow transition id
       */
      twinflowTransitionId?: string;
    };
    TwinflowTransitionUpdateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      transition?: components["schemas"]["TwinflowTransitionBaseV2"];
    };
    TransitionSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description twin class id list */
      twinClassIdList?: string[];
      /** @description twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description twinflow id list */
      twinflowIdList?: string[];
      /** @description twinflow id exclude list */
      twinflowIdExcludeList?: string[];
      /** @description source status id list */
      srcStatusIdList?: string[];
      /** @description source status id exclude list */
      srcStatusIdExcludeList?: string[];
      /** @description destination status id list */
      dstStatusIdList?: string[];
      /** @description destination status id exclude list */
      dstStatusIdExcludeList?: string[];
      /** @description alias like list */
      aliasLikeList?: string[];
      /** @description permission id list */
      permissionIdList?: string[];
      /** @description permission id exclude list */
      permissionIdExcludeList?: string[];
      /** @description inbuilt twin factory id list */
      inbuiltTwinFactoryIdList?: string[];
      /** @description inbuilt twin factory id exclude list */
      inbuiltTwinFactoryIdExcludeList?: string[];
      /** @description drafting twin factory id list */
      draftingTwinFactoryIdList?: string[];
      /** @description drafting twin factory id exclude list */
      draftingTwinFactoryIdExcludeList?: string[];
    };
    TransitionSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - transition list */
      transition?: components["schemas"]["TwinflowTransitionBaseV2"][];
    };
    UserRefSpaceRoleSearchV1: {
      /**
       * @description Filter by user name, case ignore
       * @example st Us
       */
      userNameLike?: string;
      /**
       * @description Filter by specific roles(uuids)
       * @example [
       *   "793e3120-e14a-4a22-ab09-060b9fedee35"
       * ]
       */
      spaceRolesIdList?: string[];
      /**
       * @description Filter users from specific group
       * @example [
       *   "e155e05b-f353-49ff-9869-da1e62aab179"
       * ]
       */
      userGroupIdList?: string[];
    };
    /** @description space role */
    SpaceRoleV2: {
      /**
       * Format: uuid
       * @description space role user id
       * @example 275bf3c4-951a-4d26-bb82-5e18361d301c
       */
      id?: string;
      /**
       * @description key
       * @example Member
       */
      key?: string;
      /**
       * @description name
       * @example Some name
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: uuid
       * @description twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description business account id
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
      twinClass?: components["schemas"]["TwinClassV1"];
      businessAccount?: components["schemas"]["BusinessAccountV1"];
    };
    UserWithinSpaceRolesListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description space role list */
      usersRefSpaceRolesList?: components["schemas"]["UserWithinSpaceRolesRsV1"][];
    };
    /** @description space role list */
    UserWithinSpaceRolesRsV1: {
      /**
       * Format: uuid
       * @description user id
       */
      userId?: string;
      user?: components["schemas"]["UserV1"];
      /** @description space role list */
      spaceRoleList?: components["schemas"]["SpaceRoleV2"][];
      /** @description spaceRoleIds list. Will be filled only in lazyRelations mode is false */
      spaceRoleIdsList?: string[];
    };
    SpaceRoleUserOverrideRqV1: {
      /** @description space role user list */
      spaceRoleUserList?: string[];
    };
    UserListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description user list */
      userList?: components["schemas"]["UserV1"][];
    };
    SpaceRoleUserRqV1: {
      spaceRoleUserEnterList?: string[];
      spaceRoleUserExitList?: string[];
    };
    PermissionSchemaSearchRqV1: {
      /** @description id List */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description name like list */
      nameLikeList?: string[];
      /** @description name not like list */
      nameNotLikeList?: string[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description not like list */
      descriptionNotLikeList?: string[];
      /** @description business account id list */
      businessAccountIdList?: string[];
      /** @description business account id exclude list */
      businessAccountIdExcludeList?: string[];
      /** @description created by user id list */
      createdByUserIdList?: string[];
      /** @description created by user id exclude list */
      createdByUserIdExcludeList?: string[];
    };
    PermissionSchemaSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description permission schema list */
      permissionSchemas?: components["schemas"]["PermissionSchemaV2"][];
    };
    PermissionGroupSearchRqV1: {
      /**
       * @description id list
       * @example 7efd9df0-cae7-455f-a721-eaec455105a4
       */
      idList?: string[];
      /**
       * @description id exclude list
       * @example 7efd9df0-cae7-455f-a721-eaec455105a4
       */
      idExcludeList?: string[];
      /**
       * @description twin class id exclude list
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassIdList?: string[];
      /**
       * @description twin class id exclude list
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassIdExcludeList?: string[];
      /**
       * @description key like list
       * @example LOCAL_PERMISSION
       */
      keyLikeList?: string[];
      /**
       * @description key not like list
       * @example LOCAL_PERMISSION
       */
      keyNotLikeList?: string[];
      /**
       * @description name like list
       * @example Some name
       */
      nameLikeList?: string[];
      /**
       * @description name not like list
       * @example Some name
       */
      nameNotLikeList?: string[];
      /**
       * @description description like list
       * @example Some description
       */
      descriptionLikeList?: string[];
      /**
       * @description description not like list
       * @example Some description
       */
      descriptionNotLikeList?: string[];
      /**
       * @description show system group
       * @example true
       */
      showSystemGroups?: boolean;
    };
    PermissionGroupSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description permission group list */
      permissionGroups?: components["schemas"]["PermissionGroupV1"][];
    };
    PermissionGrantUserGroupSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description permission schema id list */
      permissionSchemaIdList?: string[];
      /** @description permission schema id exclude list */
      permissionSchemaIdExcludeList?: string[];
      /** @description permission id list */
      permissionIdList?: string[];
      /** @description permission id exclude list */
      permissionIdExcludeList?: string[];
      /** @description user group id list */
      userGroupIdList?: string[];
      /** @description user group id exclude list */
      userGroupIdExcludeList?: string[];
      /** @description granted by user id list */
      grantedByUserIdList?: string[];
      /** @description granted by user id exclude list */
      grantedByUserIdExcludeList?: string[];
    };
    PermissionGrantUserGroupSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - permission grant user-group list */
      permissionGrantUserGroups?: components["schemas"]["PermissionGrantUserGroupV2"][];
    };
    /** @description result - permission grant user-group */
    PermissionGrantUserGroupV2: {
      /**
       * Format: uuid
       * @description id
       * @example 12fd2df0-cae7-455f-a721-eaec415105a4
       */
      id?: string;
      /**
       * Format: uuid
       * @description permission schema id
       * @example af143656-9899-4e1f-8683-48795cdefeac
       */
      permissionSchemaId?: string;
      /**
       * Format: uuid
       * @description permission id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      /**
       * Format: uuid
       * @description user group id
       */
      userGroupId?: string;
      /**
       * Format: uuid
       * @description granted by user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      grantedByUserId?: string;
      permissionSchema?: components["schemas"]["PermissionSchemaV1"];
      permission?: components["schemas"]["PermissionV2"];
      userGroup?: components["schemas"]["UserGroupV1"];
      grantedByUser?: components["schemas"]["UserV1"];
    };
    /** @description permission schema */
    PermissionSchemaV1: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: uuid
       * @description domainId
       */
      domainId?: string;
      /**
       * Format: uuid
       * @description businessAccountId
       */
      businessAccountId?: string;
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
    };
    /** @description permission */
    PermissionV2: {
      /**
       * Format: uuid
       * @description id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      id?: string;
      /** @description key */
      key?: string;
      /**
       * @description name
       * @example Manager
       */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * Format: uuid
       * @description group id
       * @example 7efd9df0-cae7-455f-a721-eaec455105a4
       */
      groupId?: string;
      group?: components["schemas"]["PermissionGroupV1"];
    };
    /** @description permission grant user list */
    PermissionGrantUserV2: {
      /**
       * Format: uuid
       * @description id
       * @example 9e8641f2-dda1-4a43-9a23-8786124cdb6b
       */
      id?: string;
      /**
       * Format: uuid
       * @description permission schema id
       * @example af143656-9899-4e1f-8683-48795cdefeac
       */
      permissionSchemaId?: string;
      /**
       * Format: uuid
       * @description permission id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      /**
       * Format: uuid
       * @description user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      userId?: string;
      /**
       * Format: uuid
       * @description granted by user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      grantedByUserId?: string;
      permission?: components["schemas"]["PermissionV2"];
      permissionSchema?: components["schemas"]["PermissionSchemaV1"];
      user?: components["schemas"]["UserV1"];
      grantedByUser?: components["schemas"]["UserV1"];
    };
    PermissionGrantUserViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      permissionGrantUser?: components["schemas"]["PermissionGrantUserV2"];
    };
    PermissionGrantUserSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description permission id list */
      permissionIdList?: string[];
      /** @description permission id exclude list */
      permissionIdExcludeList?: string[];
      /** @description permission schema id list */
      permissionSchemaIdList?: string[];
      /** @description permission schema id exclude list */
      permissionSchemaIdExcludeList?: string[];
      /** @description user id list */
      userIdList?: string[];
      /** @description user id exclude list */
      userIdExcludeList?: string[];
      /** @description granted by user id list */
      grantedByUserIdList?: string[];
      /** @description granted by user id exclude list */
      grantedByUserIdExcludeList?: string[];
    };
    PermissionGrantUserSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description permission grant user list */
      permissionGrantUsers?: components["schemas"]["PermissionGrantUserV2"][];
    };
    PermissionGrantTwinRoleSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description permission schema id list */
      permissionSchemaIdList?: string[];
      /** @description permission schema id exclude list */
      permissionSchemaIdExcludeList?: string[];
      /** @description permission id list */
      permissionIdList?: string[];
      /** @description permission id exclude list */
      permissionIdExcludeList?: string[];
      /** @description twin class id list */
      twinClassIdList?: string[];
      /** @description twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description twin role list */
      twinRoleList?: ("assignee" | "creator" | "watcher" | "space_assignee" | "space_creator")[];
      /** @description twin role exclude list */
      twinRoleExcludeList?: ("assignee" | "creator" | "watcher" | "space_assignee" | "space_creator")[];
      /** @description granted by user id list */
      grantedByUserIdList?: string[];
      /** @description granted by user id exclude list */
      grantedByUserIdExcludeList?: string[];
    };
    PermissionGrantTwinRoleSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - permission grant twin role list */
      permissionGrantTwinRoles?: components["schemas"]["PermissionGrantTwinRoleV1"][];
    };
    /** @description result - permission grant twin role */
    PermissionGrantTwinRoleV1: {
      /**
       * Format: uuid
       * @description id
       * @example 22fd2df0-cae7-455f-a721-eaec415105a4
       */
      id?: string;
      /**
       * Format: uuid
       * @description permission schema id
       * @example af143656-9899-4e1f-8683-48795cdefeac
       */
      permissionSchemaId?: string;
      /**
       * Format: uuid
       * @description permission id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      /**
       * Format: uuid
       * @description twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description granted by user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      grantedByUserId?: string;
      /**
       * @description twin role
       * @enum {string}
       */
      twinRole?: "assignee" | "creator" | "watcher" | "space_assignee" | "space_creator";
      /**
       * Format: date-time
       * @description granted at
       */
      grantedAt?: string;
      permission?: components["schemas"]["PermissionV1"];
      permissionSchema?: components["schemas"]["PermissionSchemaV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
      grantedByUser?: components["schemas"]["UserV1"];
    };
    PermissionGrantSpaceRoleSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description permission schema id list */
      permissionSchemaIdList?: string[];
      /** @description permission schema id exclude list */
      permissionSchemaIdExcludeList?: string[];
      /** @description permission id list */
      permissionIdList?: string[];
      /** @description permission id exclude list */
      permissionIdExcludeList?: string[];
      /** @description space role id list */
      spaceRoleIdList?: string[];
      /** @description space role id exclude list */
      spaceRoleIdExcludeList?: string[];
      /** @description granted by user id list */
      grantedByUserIdList?: string[];
      /** @description granted by user id exclude list */
      grantedByUserIdExcludeList?: string[];
    };
    PermissionGrantSpaceRoleSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - permission grant space role list */
      permissionGrantSpaceRoles?: components["schemas"]["PermissionGrantSpaceRoleV2"][];
    };
    /** @description result - permission grant space role */
    PermissionGrantSpaceRoleV2: {
      /**
       * Format: uuid
       * @description id
       * @example 9e8641f2-dda1-4a43-9a23-8786124cdb6b
       */
      id?: string;
      /**
       * Format: uuid
       * @description permission schema id
       * @example af143656-9899-4e1f-8683-48795cdefeac
       */
      permissionSchemaId?: string;
      /**
       * Format: uuid
       * @description permission id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      /**
       * Format: uuid
       * @description space role id
       */
      spaceRoleId?: string;
      /**
       * Format: uuid
       * @description granted by user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      grantedByUserId?: string;
      /**
       * Format: date-time
       * @description granted at
       */
      grantedAt?: string;
      permissionSchema?: components["schemas"]["PermissionSchemaV1"];
      permission?: components["schemas"]["PermissionV1"];
      spaceRole?: components["schemas"]["SpaceRoleV2"];
      grantedByUser?: components["schemas"]["UserV1"];
    };
    PermissionGrantAssigneePropagationSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description permission schema id list */
      permissionSchemaIdList?: string[];
      /** @description permission schema id exclude list */
      permissionSchemaIdExcludeList?: string[];
      /** @description permission id list */
      permissionIdList?: string[];
      /** @description permission id exclude list */
      permissionIdExcludeList?: string[];
      /** @description propagation twin class id list */
      propagationTwinClassIdList?: string[];
      /** @description propagation twin class id exclude list */
      propagationTwinClassIdExcludeList?: string[];
      /** @description propagation twin status id list */
      propagationTwinStatusIdList?: string[];
      /** @description propagation twin status id exclude list */
      propagationTwinStatusIdExcludeList?: string[];
      /** @description granted by user id list */
      grantedByUserIdList?: string[];
      /** @description granted by user id exclude list */
      grantedByUserIdExcludeList?: string[];
    };
    PermissionGrantAssigneePropagationSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - permission assignee propagation list */
      permissionGrantAssigneePropagations?: components["schemas"]["PermissionGrantAssigneePropagationV2"][];
    };
    /** @description result - permission assignee propagation */
    PermissionGrantAssigneePropagationV2: {
      /**
       * Format: uuid
       * @description id
       * @example 9e8641f2-dda1-4a43-9a23-8786124cdb6b
       */
      id?: string;
      /**
       * Format: uuid
       * @description permission schema id
       * @example af143656-9899-4e1f-8683-48795cdefeac
       */
      permissionSchemaId?: string;
      /**
       * Format: uuid
       * @description permission id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      /**
       * Format: uuid
       * @description propagation twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      propagationTwinClassId?: string;
      /**
       * Format: uuid
       * @description twin status id
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      propagationTwinStatusId?: string;
      /**
       * Format: uuid
       * @description granted by user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      grantedByUserId?: string;
      /**
       * Format: date-time
       * @description granted at
       */
      grantedAt?: string;
      permissionSchema?: components["schemas"]["PermissionSchemaV1"];
      permission?: components["schemas"]["PermissionV1"];
      propagationTwinClass?: components["schemas"]["TwinClassV1"];
      propagationTwinStatus?: components["schemas"]["TwinStatusV1"];
      grantedByUser?: components["schemas"]["UserV1"];
    };
    PermissionUpdateRqV1: {
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * @description key
       * @example DENY_ALL
       */
      key?: string;
      /**
       * Format: uuid
       * @description group id
       * @example 7efd9df0-cae7-455f-a721-eaec455105a4
       */
      groupId?: string;
    };
    PermissionUpdateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      permission?: components["schemas"]["PermissionV1"];
    };
    PermissionCreateRqV1: {
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * @description key
       * @example DENY_ALL
       */
      key?: string;
      /**
       * Format: uuid
       * @description group id
       * @example 7efd9df0-cae7-455f-a721-eaec455105a4
       */
      groupId?: string;
    };
    PermissionCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      permission?: components["schemas"]["PermissionV1"];
    };
    PermissionSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description key like list */
      keyLikeList?: string[];
      /** @description ley not like list */
      keyNotLikeList?: string[];
      /** @description name like list */
      nameLikeList?: string[];
      /** @description name not like list */
      nameNotLikeList?: string[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description not like list */
      descriptionNotLikeList?: string[];
      /** @description group id list */
      groupIdList?: string[];
      /** @description group id exclude list */
      groupIdExcludeList?: string[];
    };
    PermissionSearchRsV2: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description permission list */
      permissions?: components["schemas"]["PermissionV2"][];
    };
    LinkCreateV1: {
      forwardNameI18n?: components["schemas"]["I18nV1"];
      backwardNameI18n?: components["schemas"]["I18nV1"];
      /**
       * @description Link type (Many-to-one, Many-to-many, One-to-one)
       * @enum {string}
       */
      type?: "ManyToOne" | "ManyToMany" | "OneToOne";
      /**
       * @description Link strength (MANDATORY, OPTIONAL, OPTIONAL_BUT_DELETE_CASCADE)
       * @enum {string}
       */
      linkStrength?: "MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE";
      /**
       * Format: int32
       * @description [optional] an id of linker featurer
       */
      linkerFeaturerId?: number;
      /** @description [optional] linker featurer params */
      linkerParams?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description Source twin class id
       */
      srcTwinClassId?: string;
      /**
       * Format: uuid
       * @description Destination twin class id
       */
      dstTwinClassId?: string;
    };
    LinkCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      link?: components["schemas"]["LinkV3"];
    };
    LinkSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description src twin class id list */
      srcTwinClassIdList?: string[];
      /** @description src twin class id exclude list */
      srcTwinClassIdExcludeList?: string[];
      /** @description dst twin class id list */
      dstTwinClassIdList?: string[];
      /** @description dst twin class id exclude list */
      dstTwinClassIdExcludeList?: string[];
      /** @description src or dst twin class id list */
      srcOrDstTwinClassIdList?: string[];
      /** @description src or dst twin class id exclude list */
      srcOrDstTwinClassIdExcludeList?: string[];
      /** @description forward name like list */
      forwardNameLikeList?: string[];
      /** @description forward name not like list */
      forwardNameNotLikeList?: string[];
      /** @description backward name like list */
      backwardNameLikeList?: string[];
      /** @description backward name not like list */
      backwardNameNotLikeList?: string[];
      /** @description type like list */
      typeLikeList?: ("ManyToOne" | "ManyToMany" | "OneToOne")[];
      /** @description type not like list */
      typeNotLikeList?: ("ManyToOne" | "ManyToMany" | "OneToOne")[];
      /** @description strength like list */
      strengthLikeList?: ("MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE")[];
      /** @description strength not like list */
      strengthNotLikeList?: ("MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE")[];
    };
    LinkSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - link list */
      links?: components["schemas"]["LinkV3"][];
    };
    FeaturerSearchRqV1: {
      /** @description ids list */
      idList?: number[];
      /** @description type ids list */
      typeIdList?: number[];
      /** @description names list */
      nameLikeList?: string[];
    };
    FeaturerSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description featurer list */
      featurerList?: components["schemas"]["FeaturerV1"][];
    };
    FactoryPipelineStepSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description factory id list */
      factoryIdList?: string[];
      /** @description factory id exclude list */
      factoryIdExcludeList?: string[];
      /** @description factory pipeline id list */
      factoryPipelineIdList?: string[];
      /** @description factory pipeline id exclude list */
      factoryPipelineIdExcludeList?: string[];
      /** @description factory condition set id list */
      factoryConditionSetIdList?: string[];
      /** @description factory condition set id exclude list */
      factoryConditionSetIdExcludeList?: string[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description not like list */
      descriptionNotLikeList?: string[];
      /** @description filler featurer id list */
      fillerFeaturerIdList?: number[];
      /** @description filler featurer id exclude list */
      fillerFeaturerIdExcludeList?: number[];
      /**
       * @description condition invert
       * @example ANY
       * @enum {string}
       */
      conditionInvert?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description active
       * @example ANY
       * @enum {string}
       */
      active?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description optional
       * @example ANY
       * @enum {string}
       */
      optional?: "ONLY" | "ONLY_NOT" | "ANY";
    };
    FactoryPipelineStepSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - factory pipeline step list */
      steps?: components["schemas"]["FactoryPipelineStepV2"][];
    };
    /** @description result - factory pipeline step */
    FactoryPipelineStepV2: {
      /**
       * Format: uuid
       * @description id
       * @example 99856a15-6858-40ba-b0aa-b123c54e250d
       */
      id?: string;
      /**
       * Format: uuid
       * @description factory pipeline id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryPipelineId?: string;
      /**
       * Format: int32
       * @description order
       * @example 1
       */
      order?: number;
      /**
       * Format: uuid
       * @description factory condition set id
       * @example 69856a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryConditionSetId?: string;
      /**
       * @description factory condition invert
       * @example true
       */
      factoryConditionInvert?: boolean;
      /**
       * @description is active
       * @example true
       */
      active?: boolean;
      /**
       * @description is optional
       * @example true
       */
      optional?: boolean;
      /**
       * Format: int32
       * @description filler featurer id
       * @example 22
       */
      fillerFeaturerId?: number;
      /**
       * @description filler params
       * @example {"outputTwinClassId"=>"da69c441-9c8f-4e73-a07e-b5648f8f4396",
       * "copyHead"=>"true"}
       */
      fillerParams?: {
        [key: string]: string;
      };
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      factoryPipeline?: components["schemas"]["FactoryPipelineV2"];
      factoryConditionSet?: components["schemas"]["FactoryConditionSetV1"];
      fillerFeaturer?: components["schemas"]["FeaturerV1"];
    };
    /** @description result - factory pipeline */
    FactoryPipelineV2: {
      /**
       * Format: uuid
       * @description id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      id?: string;
      /**
       * Format: uuid
       * @description factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryId?: string;
      /**
       * Format: uuid
       * @description input twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      inputTwinClassId?: string;
      /**
       * Format: uuid
       * @description factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryConditionSetId?: string;
      /**
       * @description factory condition set invert
       * @example true
       */
      factoryConditionSetInvert?: boolean;
      /**
       * @description is active
       * @example true
       */
      active?: boolean;
      /**
       * Format: uuid
       * @description output twin status id
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      outputTwinStatusId?: string;
      /**
       * Format: uuid
       * @description next factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      nextFactoryId?: string;
      /**
       * @description next factory limit scope
       * @example true
       */
      nextFactoryLimitScope?: boolean;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: int32
       * @description count pipeline steps
       * @example 3
       */
      pipelineStepsCount?: number;
      factory?: components["schemas"]["FactoryV1"];
      inputTwinClass?: components["schemas"]["TwinClassBaseV1"];
      factoryConditionSet?: components["schemas"]["FactoryConditionSetV1"];
      outputTwinStatus?: components["schemas"]["TwinStatusV1"];
      nextFactory?: components["schemas"]["FactoryV1"];
    };
    FactoryPipelineSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description factory id list */
      factoryIdList?: string[];
      /** @description factory id exclude list */
      factoryIdExcludeList?: string[];
      /** @description input twin class id list */
      inputTwinClassIdList?: string[];
      /** @description input twin class id exclude list */
      inputTwinClassIdExcludeList?: string[];
      /** @description factory condition set id list */
      factoryConditionSetIdList?: string[];
      /** @description factory condition set id exclude list */
      factoryConditionSetIdExcludeList?: string[];
      /** @description output twin status id list */
      outputTwinStatusIdList?: string[];
      /** @description output twin status id exclude list */
      outputTwinStatusIdExcludeList?: string[];
      /** @description next factory id list */
      nextFactoryIdList?: string[];
      /** @description next factory id exclude list */
      nextFactoryIdExcludeList?: string[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description not like list */
      descriptionNotLikeList?: string[];
      /**
       * @description is active
       * @example ANY
       * @enum {string}
       */
      active?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description next factory limit scope
       * @example ANY
       * @enum {string}
       */
      nextFactoryLimitScope?: "ONLY" | "ONLY_NOT" | "ANY";
    };
    FactoryPipelineSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - factory pipeline list */
      pipelines?: components["schemas"]["FactoryPipelineV2"][];
    };
    FactoryMultiplierFilterSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description factory id list */
      factoryIdList?: string[];
      /** @description factory id exclude list */
      factoryIdExcludeList?: string[];
      /** @description factory multiplier id list */
      factoryMultiplierIdList?: string[];
      /** @description factory multiplier id exclude list */
      factoryMultiplierIdExcludeList?: string[];
      /** @description input twin class id list */
      inputTwinClassIdList?: string[];
      /** @description input twin class id exclude list */
      inputTwinClassIdExcludeList?: string[];
      /** @description factory condition set id list */
      factoryConditionSetIdList?: string[];
      /** @description factory condition set id exclude list */
      factoryConditionSetIdExcludeList?: string[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description not like list */
      descriptionNotLikeList?: string[];
      /**
       * @description active
       * @example ANY
       * @enum {string}
       */
      active?: "ONLY" | "ONLY_NOT" | "ANY";
    };
    FactoryMultiplierFilterSearchRsDTOv1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - condition list */
      multiplierFilters?: components["schemas"]["FactoryV2"][];
    };
    /** @description result - factory multiplier */
    FactoryMultiplierV2: {
      /**
       * Format: uuid
       * @description id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      id?: string;
      /**
       * Format: uuid
       * @description factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryId?: string;
      /**
       * Format: uuid
       * @description input twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      inputTwinClassId?: string;
      /**
       * Format: int32
       * @description count pipeline steps
       * @example 3
       */
      pipelineStepsCount?: number;
      /**
       * @description multiplier params
       * @example {"outputTwinClassId"=>"da69c441-9c8f-4e73-a07e-b5648f8f4396",
       * "copyHead"=>"true"}
       */
      multiplierParams?: {
        [key: string]: string;
      };
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: int32
       * @description count factory multiplier filters
       * @example 3
       */
      factoryMultiplierFiltersCount?: number;
      /**
       * @description is active
       * @example false
       */
      active?: boolean;
      factory?: components["schemas"]["FactoryV1"];
      inputTwinClass?: components["schemas"]["TwinClassBaseV1"];
    };
    FactoryMultiplierSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description factory id list */
      factoryIdList?: string[];
      /** @description factory id exclude list */
      factoryIdExcludeList?: string[];
      /** @description input twin class id list */
      inputTwinClassIdList?: string[];
      /** @description input twin class id exclude list */
      inputTwinClassIdExcludeList?: string[];
      /** @description multiplier featurer id list */
      multiplierFeaturerIdList?: number[];
      /** @description multiplier featurer id list */
      multiplierFeaturerIdExcludeList?: number[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description not like list */
      descriptionNotLikeList?: string[];
      /**
       * @description is active
       * @example ANY
       * @enum {string}
       */
      active?: "ONLY" | "ONLY_NOT" | "ANY";
    };
    FactoryMultiplierSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - factory multiplier list */
      multipliers?: components["schemas"]["FactoryMultiplierV2"][];
    };
    FactoryEraserSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description factory id list */
      factoryIdList?: string[];
      /** @description factory id exclude list */
      factoryIdExcludeList?: string[];
      /** @description input twin class id list */
      inputTwinClassIdList?: string[];
      /** @description input twin class id exclude list */
      inputTwinClassIdExcludeList?: string[];
      /** @description factory condition set id list */
      factoryConditionSetIdList?: string[];
      /** @description factory condition set id exclude list */
      factoryConditionSetIdExcludeList?: string[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description not like list */
      descriptionNotLikeList?: string[];
      /** @description erase action like list */
      eraseActionLikeList?: ("NOT_SPECIFIED" | "RESTRICT" | "ERASE_IRREVOCABLE" | "ERASE_CANDIDATE")[];
      /** @description erase action not like list */
      eraseActionNotLikeList?: ("NOT_SPECIFIED" | "RESTRICT" | "ERASE_IRREVOCABLE" | "ERASE_CANDIDATE")[];
      /**
       * @description active
       * @example ANY
       * @enum {string}
       */
      active?: "ONLY" | "ONLY_NOT" | "ANY";
    };
    FactoryEraserSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - eraser list */
      erasers?: components["schemas"]["FactoryEraserV2"][];
    };
    /** @description result - eraser */
    FactoryEraserV2: {
      /**
       * Format: uuid
       * @description id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      id?: string;
      /**
       * Format: uuid
       * @description factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryId?: string;
      /**
       * Format: uuid
       * @description input twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      inputTwinClassId?: string;
      /**
       * Format: uuid
       * @description factory condition set id
       * @example 69856a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryConditionSetId?: string;
      /**
       * @description factory condition set invert
       * @example true
       */
      factoryConditionSetInvert?: boolean;
      /**
       * @description active
       * @example true
       */
      active?: boolean;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * @description action
       * @example NOT_SPECIFIED
       * @enum {string}
       */
      action?: "NOT_SPECIFIED" | "RESTRICT" | "ERASE_IRREVOCABLE" | "ERASE_CANDIDATE";
      factory?: components["schemas"]["FactoryV1"];
      factoryConditionSet?: components["schemas"]["FactoryConditionSetV1"];
      inputTwinClass?: components["schemas"]["TwinClassBaseV1"];
    };
    FactoryConditionSetSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description name like list */
      nameLikeList?: string[];
      /** @description name like exclude list */
      nameNotLikeList?: string[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description like exclude list */
      descriptionNotLikeList?: string[];
    };
    FactoryConditionSetSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - condition list */
      conditionSets?: components["schemas"]["FactoryConditionSetV1"][];
    };
    FactoryBranchSearchRqV1: {
      /** @description id list */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description factory id list */
      factoryIdList?: string[];
      /** @description factory id exclude list */
      factoryIdExcludeList?: string[];
      /** @description factory condition set id list */
      factoryConditionSetIdList?: string[];
      /** @description factory condition set id exclude list */
      factoryConditionSetIdExcludeList?: string[];
      /** @description next factory id list */
      nextFactoryIdList?: string[];
      /** @description next factory id exclude list */
      nextFactoryIdExcludeList?: string[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description not like list */
      descriptionNotLikeList?: string[];
      /**
       * @description condition invert
       * @example ANY
       * @enum {string}
       */
      conditionInvert?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description active
       * @example ANY
       * @enum {string}
       */
      active?: "ONLY" | "ONLY_NOT" | "ANY";
    };
    FactoryBranchSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - condition list */
      branches?: components["schemas"]["FactoryBranchV2"][];
    };
    FactoryBranchCreateRqV1: {
      /**
       * Format: uuid
       * @description factory condition set id
       * @example 69856a15-6858-40ba-b0aa-b123c54e250d
       */
      factoryConditionSetId?: string;
      /**
       * @description factory condition set invert
       * @example true
       */
      factoryConditionSetInvert?: boolean;
      /**
       * @description factory condition set invert
       * @example true
       */
      active?: boolean;
      /**
       * Format: uuid
       * @description next factory id
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      nextFactoryId?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
    };
    FactoryCreateRqV1: {
      /**
       * @description key
       * @example taskReassign
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
    };
    FactorySearchRqV1: {
      /** @description id List */
      idList?: string[];
      /** @description id exclude list */
      idExcludeList?: string[];
      /** @description key like list */
      keyLikeList?: string[];
      /** @description key not like list */
      keyNotLikeList?: string[];
      /** @description name like list */
      nameLikeList?: string[];
      /** @description name not like list */
      nameNotLikeList?: string[];
      /** @description description like list */
      descriptionLikeList?: string[];
      /** @description description not like list */
      descriptionNotLikeList?: string[];
    };
    FactorySearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - factory list */
      factories?: components["schemas"]["FactoryV2"][];
    };
    DomainUserAddV1: {
      /**
       * Format: uuid
       * @description id
       * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
       */
      userId?: string;
    };
    DomainBusinessAccountUpdateV1: {
      /**
       * Format: uuid
       * @description permissionSchemaId
       * @example af143656-9899-4e1f-8683-48795cdefeac
       */
      permissionSchemaId?: string;
      /**
       * Format: uuid
       * @description twinClassSchemaId
       * @example 8b9ea6ad-2b9b-4a4a-8ea9-1b17da4d603b
       */
      twinClassSchemaId?: string;
      /**
       * Format: uuid
       * @description twinFlowSchemaId
       * @example 2c618b09-e8dc-4712-a433-2e18915ee70d
       */
      twinFlowSchemaId?: string;
      /**
       * Format: uuid
       * @description Tier id.
       */
      tierId?: string;
      /** @description Name */
      name?: string;
    };
    DomainBusinessAccountAddV1: {
      /**
       * Format: uuid
       * @description id
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
      /**
       * Format: uuid
       * @description Tier id. Optional. If it’s not set then default_tier of domain will be used for new domain BA
       */
      tierId?: string;
      /** @description Name */
      name?: string;
    };
    /** @description request json */
    DomainCreateRqDTOv1: {
      /**
       * @description will be used for url generation and for twins aliases
       * @example alcosi
       */
      key?: string;
      /**
       * @description domain description
       * @example some domain
       */
      description?: string;
      /**
       * @description type [basic/b2b]
       * @example basic
       * @enum {string}
       */
      type?: "basic" | "b2b";
      /**
       * @description default locale for domain [en/de/by]
       * @example en
       */
      defaultLocale?: string;
      /**
       * Format: uuid
       * @description Resource storage type
       * @example 00000000-0000-0000-0007-000000000001
       */
      resourceStorageId?: string;
      /**
       * Format: uuid
       * @description Attachment storage type
       * @example 00000000-0000-0000-0007-000000000001
       */
      attachmentStorageId?: string;
    };
    /** @description domain list */
    DomainViewRsv1: {
      /**
       * Format: uuid
       * @description domain id
       */
      id?: string;
      /**
       * @description key
       * @example alcosi
       */
      key?: string;
      /**
       * @description domain description
       * @example alcosi
       */
      description?: string;
      /**
       * @description type [basic/b2b]
       * @enum {string}
       */
      type?: "basic" | "b2b";
      /**
       * Format: uuid
       * @description permission schema id
       */
      permissionSchemaId?: string;
      /**
       * Format: uuid
       * @description twinflow schema id
       */
      twinflowSchemaId?: string;
      /**
       * Format: uuid
       * @description twinclass schema id
       */
      twinClassSchemaId?: string;
      /**
       * Format: uuid
       * @description business account template twin id
       */
      businessAccountTemplateTwinId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /** @description default locale */
      defaultLocale?: string;
      /** @description Icon dark uri. Might be relative */
      iconDark?: string;
      /** @description Icon light uri. Might be relative */
      iconLight?: string;
    };
    DomainUserSearchRqV1: {
      /** @description user id list */
      userIdList?: string[];
      /** @description user id exclude list */
      userIdExcludeList?: string[];
      /** @description name like list */
      nameLikeList?: string[];
      /** @description name not like list */
      nameNotLikeList?: string[];
      /** @description email like list */
      emailLikeList?: string[];
      /** @description email not like list */
      emailNotLikeList?: string[];
      /** @description status id list */
      statusIdList?: ("ACTIVE" | "DELETED" | "BLOCKED")[];
      /** @description status id exclude list */
      statusIdExcludeList?: ("ACTIVE" | "DELETED" | "BLOCKED")[];
      /** @description business account id list */
      businessAccountIdList?: string[];
      /** @description business account id exclude list */
      businessAccountIdExcludeList?: string[];
    };
    /** @description Business account users. Will be filled only if lazyRelations mode is true */
    BusinessAccountUserV2: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: uuid
       * @description user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      userId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description business account id
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
      user?: components["schemas"]["UserV1"];
      businessAccount?: components["schemas"]["BusinessAccountV1"];
    };
    DomainUserSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description user list */
      users?: components["schemas"]["DomainUserV2"][];
    };
    /** @description user */
    DomainUserV2: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * Format: uuid
       * @description user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      userId?: string;
      /**
       * @description locale
       * @example en
       */
      currentLocale?: {
        language?: string;
        displayName?: string;
        country?: string;
        variant?: string;
        script?: string;
        unicodeLocaleAttributes?: string[];
        unicodeLocaleKeys?: string[];
        displayLanguage?: string;
        displayScript?: string;
        displayCountry?: string;
        displayVariant?: string;
        extensionKeys?: string[];
        iso3Language?: string;
        iso3Country?: string;
      };
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /** @description Business account id list. Will be filled only in lazyRelations mode is false */
      businessAccountUserIdList?: string[];
      user?: components["schemas"]["UserV1"];
      /** @description Business account users. Will be filled only if lazyRelations mode is true */
      businessAccountUsers?: components["schemas"]["BusinessAccountUserV2"][];
    };
    DomainBusinessAccountSearchRqV1: {
      /** @description business account id list */
      businessAccountIdList?: string[];
      /** @description business account id exclude list */
      businessAccountIdExcludeList?: string[];
      /** @description business account name like keyword list(AND) */
      businessAccountNameLikeList?: string[];
      /** @description business account name exclude like keyword list(OR) */
      businessAccountNameNotLikeList?: string[];
      /** @description business account permission schema id list */
      permissionSchemaIdList?: string[];
      /** @description business account permission schema id exclude list */
      permissionSchemaIdExcludeList?: string[];
      /** @description business account twinflow schema id list */
      twinflowSchemaIdList?: string[];
      /** @description business account twinflows chema id exclude list */
      twinflowSchemaIdExcludeList?: string[];
      /** @description business account twin class schema id list */
      twinClassSchemaIdList?: string[];
      /** @description business account twin class schema id exclude list */
      twinClassSchemaIdExcludeList?: string[];
    };
    DomainBusinessAccountSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - domain business account list */
      businessAccounts?: components["schemas"]["DomainBusinessAccountV1"][];
    };
    /** @description result - domain business account */
    DomainBusinessAccountV1: {
      /**
       * Format: uuid
       * @description domain business account id
       */
      id?: string;
      /**
       * Format: uuid
       * @description business account id
       */
      businessAccountid?: string;
      /**
       * Format: uuid
       * @example af143656-9899-4e1f-8683-48795cdefeac
       */
      permissionSchemaId?: string;
      /**
       * Format: uuid
       * @example 2c618b09-e8dc-4712-a433-2e18915ee70d
       */
      twinflowSchemaId?: string;
      /**
       * Format: uuid
       * @example 8b9ea6ad-2b9b-4a4a-8ea9-1b17da4d603b
       */
      twinClassSchemaId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      businessAccount?: components["schemas"]["BusinessAccountV1"];
    };
    DataListOptionCreateRqDV1: {
      /** @description icon */
      icon?: string;
      optionI18n?: components["schemas"]["I18nV1"];
      /** @description attributes map */
      attributesMap?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description data list id
       * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
       */
      dataListId?: string;
    };
    DataListCreateRqV1: {
      /**
       * @description key
       * @example country
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      attribute1?: components["schemas"]["DataListAttributeSaveV1"];
      attribute2?: components["schemas"]["DataListAttributeSaveV1"];
      attribute3?: components["schemas"]["DataListAttributeSaveV1"];
      attribute4?: components["schemas"]["DataListAttributeSaveV1"];
    };
    CommentCreateRqV1: {
      text?: string;
      attachments?: components["schemas"]["AttachmentAddV1"][];
    };
    CommentCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /**
       * Format: uuid
       * @description New comment id
       */
      commentId?: string;
      /** @description attachment list id */
      attachmentListId?: string[];
    };
    CommentSearchRqDTOv1: {
      /** @description List of ids to select */
      idList?: string[];
      /** @description List of ids to exclude */
      idExcludeList?: string[];
      /** @description List of twin ids to select */
      twinIdList?: string[];
      /** @description List of twin ids to exclude */
      twinIdExcludeList?: string[];
      /** @description List of created by user Id's to select */
      createdByUserIdList?: string[];
      /** @description List of created by user Id's to exclude */
      createdByUserIdExcludeList?: string[];
      /** @description Full text search list to select */
      textLikeList?: string[];
      /** @description Full text search list to exclude */
      textNotLikeList?: string[];
      createdAt?: components["schemas"]["DataTimeRangeV1"];
      updatedAt?: components["schemas"]["DataTimeRangeV1"];
    };
    CommentSearchRsDTOv1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - comment list */
      comments?: components["schemas"]["CommentViewV1"][];
    };
    BusinessAccountUserAddRqV1: {
      /**
       * Format: uuid
       * @description id
       * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
       */
      userId?: string;
    };
    AttachmentCUDValidateRqV1: {
      /**
       * Format: uuid
       * @description Twin id
       */
      twinId?: string;
      attachments?: components["schemas"]["AttachmentCudV1"];
    };
    /** @description Twin attachment problems */
    AttachmentCUDProblemsDTOv1: {
      /** @description create problems */
      createProblems?: components["schemas"]["AttachmentFileCreateProblemsDTOv1"][];
      /** @description update problems */
      updateProblems?: components["schemas"]["AttachmentFileUpdateProblemsDTOv1"][];
      /** @description delete problems */
      deleteProblems?: components["schemas"]["AttachmentFileDeleteProblemsDTOv1"][];
      /** @description field attachment problems */
      fieldAttachmentProblems?: components["schemas"]["TwinFieldAttachmentProblemsV1"][];
      /** @description comment attachment problems */
      commentAttachmentProblems?: components["schemas"]["TwinCommentAttachmentProblemsV1"][];
    };
    AttachmentCUDValidateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      cudProblems?: components["schemas"]["AttachmentCUDProblemsDTOv1"];
      /** @description Attachment entities for update and delete operations */
      attachmentsForUD?: components["schemas"]["AttachmentViewV2"][];
    };
    /** @description create problems */
    AttachmentFileCreateProblemsDTOv1: {
      /** @description Problem message */
      message?: string;
      /** @description external id */
      externalId?: string;
      /**
       * @description attachment file problems
       * @enum {string}
       */
      problem?: "INVALID_NAME" | "INVALID_TYPE" | "INVALID_SIZE";
    };
    /** @description delete problems */
    AttachmentFileDeleteProblemsDTOv1: {
      /** @description Problem message */
      message?: string;
      /** @description external id */
      externalId?: string;
      /**
       * @description attachment file delete problems
       * @enum {string}
       */
      problem?: "LOCKED" | "NOT_ALLOWED";
    };
    /** @description update problems */
    AttachmentFileUpdateProblemsDTOv1: {
      /** @description Problem message */
      message?: string;
      /** @description external id */
      externalId?: string;
      /**
       * @description attachment file problems
       * @enum {string}
       */
      problem?: "INVALID_NAME" | "INVALID_TYPE" | "INVALID_SIZE";
    };
    /** @description attachment details */
    AttachmentViewV2: {
      /**
       * @description External storage link
       * @example https://test.filestorage.by/JFUjEFWksfqwf
       */
      storageLink?: string;
      /**
       * @description External id
       * @example JD999weqw9f
       */
      externalId?: string;
      /**
       * @description Title
       * @example cert.pdf
       */
      title?: string;
      /**
       * @description Description
       * @example cert.pdf
       */
      description?: string;
      /**
       * Format: int64
       * @description File size in bytes
       */
      size?: number;
      /**
       * Format: uuid
       * @description link to the field to which attachment was added (if any)
       */
      twinClassFieldId?: string;
      /**
       * Format: uuid
       * @description link to the comment to which attachment was added (if any)
       */
      commentId?: string;
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description author id
       */
      authorUserId?: string;
      authorUser?: components["schemas"]["UserV1"];
      /**
       * Format: uuid
       * @description twinflow transition id
       */
      twinflowTransitionId?: string;
      twinflowTransition?: components["schemas"]["TwinflowTransitionBaseV1"];
      comment?: components["schemas"]["CommentBaseDTOv2"];
      twinClassField?: components["schemas"]["TwinClassFieldV1"];
      /** @description attachment action list */
      attachmentActions?: ("VIEW" | "EDIT" | "DELETE")[];
    };
    /** @description comment attachment problems */
    TwinCommentAttachmentProblemsV1: {
      /** @description Problem message */
      message?: string;
      /**
       * Format: uuid
       * @description Comment id
       */
      commentId?: string;
      /**
       * @description Twin comment attachment problem
       * @enum {string}
       */
      problem?: "NOT_ALLOWED" | "INAVLID_FILES_SIZE" | "INAVLID_FILES_COUNT";
    };
    /** @description field attachment problems */
    TwinFieldAttachmentProblemsV1: {
      /** @description Problem message */
      message?: string;
      /**
       * Format: uuid
       * @description Twin field id
       */
      twinFieldId?: string;
      /**
       * @description Twin field attachment problem
       * @enum {string}
       */
      problem?: "NOT_ALLOWED" | "INAVLID_FILES_SIZE" | "INAVLID_FILES_COUNT";
    };
    /** @description locales in domain */
    LocaleV1: {
      /** @description id */
      id?: string;
      /** @description name */
      name?: string;
      /** @description nativeName */
      nativeName?: string;
      /** @description icon */
      icon?: string;
    };
    LocaleViewV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description locales in domain */
      localeList?: components["schemas"]["LocaleV1"][];
    };
    DataListOptionRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      /**
       * Format: uuid
       * @description id
       * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
       */
      dataListId?: string;
      option?: components["schemas"]["DataListOptionV1"];
    };
    /** @description permission groups list */
    PermissionGroupV2: {
      /**
       * Format: uuid
       * @description id
       * @example 7efd9df0-cae7-455f-a721-eaec455105a4
       */
      id?: string;
      /**
       * @description key
       * @example LOCAL_PERMISSION
       */
      key?: string;
      /**
       * @description name
       * @example Some name
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
      /**
       * Format: uuid
       * @description twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      twinClass?: components["schemas"]["TwinClassV1"];
      /** @description permission list */
      permissions?: components["schemas"]["PermissionV1"][];
    };
    PermissionGroupedListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description permission groups list */
      permissionGroups?: components["schemas"]["PermissionGroupV2"][];
    };
    PermissionListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      /** @description permission list */
      permissions?: components["schemas"]["PermissionV2"][];
    };
    LocaleRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description locale */
      locale?: string;
    };
    TwinflowViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twinflow?: components["schemas"]["TwinflowBaseV3"];
    };
    TwinStatusRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      twinStatus?: components["schemas"]["TwinStatusV1"];
    };
    WidgetListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description results - valid widget list */
      widgetList?: components["schemas"]["WidgetV1"][];
    };
    /** @description widget */
    WidgetV1: {
      /**
       * Format: uuid
       * @description id
       * @example 4245e338-3c09-4390-8a03-435d1da4e311
       */
      id?: string;
      /**
       * @description key
       * @example details
       */
      key?: string;
      /**
       * @description name
       * @example Details
       */
      name?: string;
    };
    TwinClassLinkListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      forwardLinkMap?: {
        [key: string]: components["schemas"]["LinkV1"];
      };
      backwardLinkMap?: {
        [key: string]: components["schemas"]["LinkV1"];
      };
    };
    TwinClassFieldListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      /** @description results - twin class fields list */
      twinClassFieldList?: components["schemas"]["TwinClassFieldV2"][];
    };
    CardListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description results - card list */
      cardList?: components["schemas"]["CardV1"][];
    };
    /** @description results - card list */
    CardV1: {
      /**
       * Format: uuid
       * @description id
       * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
       */
      id?: string;
      /**
       * @description key
       * @example details
       */
      key?: string;
      /**
       * @description name
       * @example Details
       */
      name?: string;
      /**
       * @description logo
       * @example http://twins.org/t/card/main.png
       */
      logo?: string;
      /**
       * @description layout
       * @example OneColumn
       */
      layoutKey?: string;
      /** @description Class fields list */
      widgets?: components["schemas"]["CardWidgetV1"][];
    };
    /** @description Class fields list */
    CardWidgetV1: {
      /**
       * Format: uuid
       * @description id
       * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
       */
      id?: string;
      /**
       * @description layoutPosition
       * @example FirstColumn
       */
      layoutPositionKey?: string;
      /**
       * Format: int32
       * @description in layout position order
       * @example 1
       */
      inPositionOrder?: number;
      /**
       * @description name
       * @example Details
       */
      name?: string;
      /**
       * @description color
       * @example red
       */
      color?: string;
      /**
       * Format: uuid
       * @description widgetId
       * @example 4245e338-3c09-4390-8a03-435d1da4e311
       */
      widgetId?: string;
      widget?: components["schemas"]["WidgetV1"];
    };
    TwinRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twin?: components["schemas"]["TwinV1"];
    };
    HistoryListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description history list */
      historyList?: components["schemas"]["HistoryV1"][];
    };
    HistoryViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      history?: components["schemas"]["HistoryV1"];
    };
    TransitionViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      transition?: components["schemas"]["TwinflowTransitionBaseV3"];
    };
    CommandRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description Command for run script */
      command?: string;
    };
    AppInfoRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description Info attributes key/value */
      attributes?: {
        [key: string]: string;
      };
    };
    UserWithinSpaceRolesViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      userRefSpaceRoles?: components["schemas"]["UserWithinSpaceRolesRsV1"];
    };
    PermissionSchemaViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      permissionSchema?: components["schemas"]["PermissionSchemaV2"];
    };
    PermissionGroupViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      permissionGroup?: components["schemas"]["PermissionGroupV1"];
    };
    PermissionGrantUserGroupViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      permissionGrantUserGroup?: components["schemas"]["PermissionGrantUserGroupV2"];
    };
    PermissionGrantTwinRoleViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      permissionGrantTwin?: components["schemas"]["PermissionGrantTwinRoleV1"];
    };
    PermissionGrantSpaceRoleViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      permissionGrantSpaceRole?: components["schemas"]["PermissionGrantSpaceRoleV2"];
    };
    PermissionGrantAssigneePropagationViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      permissionGrantAssigneePropagation?: components["schemas"]["PermissionGrantAssigneePropagationV2"];
    };
    PermissionViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      permission?: components["schemas"]["PermissionV2"];
    };
    LinkViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      link?: components["schemas"]["LinkV3"];
    };
    FactoryPipelineStepViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      step?: components["schemas"]["FactoryPipelineStepV2"];
    };
    FactoryPipelineViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pipeline?: components["schemas"]["FactoryPipelineV2"];
    };
    FactoryMultiplierFilterViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      multiplierFilter?: components["schemas"]["FactoryV2"];
    };
    FactoryMultiplierViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      multiplier?: components["schemas"]["FactoryMultiplierV2"];
    };
    FactoryEraserViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      eraser?: components["schemas"]["FactoryEraserV2"];
    };
    FactoryConditionSetViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      conditionSet?: components["schemas"]["FactoryConditionSetV1"];
    };
    FactoryBranchViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      branch?: components["schemas"]["FactoryBranchV2"];
    };
    FactoryViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      factory?: components["schemas"]["FactoryV2"];
    };
    DomainUserViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      user?: components["schemas"]["DomainUserV2"];
    };
    DomainListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      pagination?: components["schemas"]["PaginationV1"];
      /** @description domain list */
      domainList?: components["schemas"]["DomainViewRsv1"][];
    };
    DomainClassOwnerTypeListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description results - twin class owner types */
      twinClassOwnerTypes?: components["schemas"]["TwinClassOwnerTypeV1"][];
    };
    /** @description results - twin class owner types */
    TwinClassOwnerTypeV1: {
      /**
       * @description owner type
       * @example SYSTEM
       * @enum {string}
       */
      id?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
      /**
       * @description name
       * @example Some name
       */
      name?: string;
      /**
       * @description description
       * @example Some description
       */
      description?: string;
    };
    DomainBusinessAccountViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      businessAccount?: components["schemas"]["DomainBusinessAccountV1"];
    };
    CommentListRsv1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description comment data */
      comments?: components["schemas"]["CommentViewV1"][];
    };
    AttachmentViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      attachment?: components["schemas"]["AttachmentViewV2"];
    };
    /** @description attachment quotas details */
    AttachmentQuotasBaseV1: {
      /**
       * Format: int64
       * @description Quota count
       */
      quotaCount?: number;
      /**
       * Format: int64
       * @description Quota size
       */
      quotaSize?: number;
      /**
       * Format: int64
       * @description Used count
       */
      usedCount?: number;
      /**
       * Format: int64
       * @description Used size
       */
      usedSize?: number;
    };
    AttachmentQuotasRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      quotas?: components["schemas"]["AttachmentQuotasBaseV1"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Update user */
  userUpdateV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateRqV1"];
      };
    };
    responses: {
      /** @description User was updated */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete user */
  userDeleteV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update user locale */
  userLocaleUpdateV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example en */
        localeName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twinflow details */
  twinflowViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTrigger2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinValidator2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinValidator2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflow2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowTransition2TwinflowTransitionValidatorRuleMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowTransitionValidatorRule2TwinValidatorMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowTransitionValidatorRule2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
        twinflowId: string;
      };
    };
    responses: {
      /** @description Twinflow details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinflowViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update twinflow by id */
  twinflowUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
        twinflowId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinflowUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twinflow prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinflowBaseV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return twin status data by id */
  twinStatusViewV1: {
    parameters: {
      query?: {
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinStatus2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5 */
        twinStatusId: string;
      };
    };
    responses: {
      /** @description Twin status data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinStatusRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update twin status */
  twinStatusUpdateV1: {
    parameters: {
      query?: {
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5 */
        twinStatusId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinStatusUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin status data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinStatusUpdateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class field list */
  twinClassFieldViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassField2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassField2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassField2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d */
        twinClassFieldId: string;
      };
    };
    responses: {
      /** @description Twin class field information */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update twin class field */
  twinClassFieldUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassField2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassField2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassField2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d */
        twinClassFieldId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassFieldUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class by id */
  twinClassViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description Twin class prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update twin class by id */
  twinClassUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin class prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /**
   * Returns twin data by id
   * @deprecated
   */
  twinViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update twin */
  twinUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete twin by id */
  twinDeleteV1: {
    parameters: {
      query?: {
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Unmark twin as touched for user */
  twinUntouchV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example WATCHED */
        touchId: "WATCHED" | "STARRED" | "REVIEWED";
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Mark twin as touched for user */
  twinTouchAddV1: {
    parameters: {
      query?: {
        showTouch2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTouchMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example WATCHED */
        touchId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTouchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Link view */
  linkViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showLinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showLinkSrc2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        linkId: string;
      };
    };
    responses: {
      /** @description Link data */
      200: {
        content: {
          "application/json": components["schemas"]["LinkViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update link by id */
  linkUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showLinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showLinkSrc2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        linkId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkUpdateV1"];
      };
    };
    responses: {
      /** @description Updated link */
      200: {
        content: {
          "application/json": components["schemas"]["LinkUpdateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory branch by id */
  factoryBranchViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranch2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranch2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 99956a15-6858-40ba-b0aa-b123c54e250d */
        factoryBranchId: string;
      };
    };
    responses: {
      /** @description Factory branch data */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryBranchViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory branch update */
  factoryBranchUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranch2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranch2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 99956a15-6858-40ba-b0aa-b123c54e250d */
        factoryBranchId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryBranchUpdateRqv1"];
      };
    };
    responses: {
      /** @description Factory data branch update */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryBranchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory data */
  factoryViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFactory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        factoryId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory update */
  factoryUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFactory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        factoryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryUpdateRqV1"];
      };
    };
    responses: {
      /** @description Factory data update */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Commit draft by id */
  draftCommitV1: {
    parameters: {
      query?: {
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
        draftId: string;
      };
    };
    responses: {
      /** @description Twinflow prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DraftRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns list data */
  dataListOptionViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListOption2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOption2DataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 7de977d4-df6d-4250-9cb2-088363d139a1 */
        dataListOptionId: string;
      };
    };
    responses: {
      /** @description List details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionRsV3"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Data list option for update */
  dataListOptionUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListOption2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOption2DataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 7de977d4-df6d-4250-9cb2-088363d139a1 */
        dataListOptionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListOptionUpdateRqV1"];
      };
    };
    responses: {
      /** @description Updated data list option data */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionRsV3"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns list data */
  dataListViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example e844a4e5-1c09-474e-816f-05cdb1f093ed */
        dataListId: string;
      };
    };
    responses: {
      /** @description List details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Data list update */
  dataListUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example e844a4e5-1c09-474e-816f-05cdb1f093ed */
        dataListId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListUpdateRqV1"];
      };
    };
    responses: {
      /** @description Data list update */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns comment by comment id */
  twinCommentV1: {
    parameters: {
      query?: {
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinCommentActionMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
        commentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CommentViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update comment and it's attachments */
  twinCommentUpdateV1: {
    parameters: {
      query?: {
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinCommentActionMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
        commentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentUpdateRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CommentViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete comment with attachments */
  twinCommentDeleteV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
        commentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update businessAccount */
  businessAccountUpdateV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessAccountUpdateRqV1"];
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete businessAccount */
  businessAccountDeleteV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of all public data list options */
  dataListOptionSearchPublicListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListOption2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOption2DataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListOptionSearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns map option id ref list data option */
  dataListOptionsMapViewPublicV1: {
    parameters: {
      query?: {
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListOptionMapRqV1"];
      };
    };
    responses: {
      /** @description Map {option id/list data option} prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionMapRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns public details lists */
  dataListPublicSearchV1: {
    parameters: {
      query?: {
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListSearchRqV1"];
      };
    };
    responses: {
      /** @description Public list details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of all user groups for the current domain */
  userGroupSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showUserGroup2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserGroupSearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Assign or discharge some group to user */
  userGroupMemberManageV1: {
    parameters: {
      query?: {
        showUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserGroupMemberManageRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Smart endpoint for adding new user. It will also add user to domain and businessAccount if specified. If given businessAccount is not registered in domain, it will register it */
  userAddV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserAddRqV1"];
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twinflow schema search result */
  twinflowSchemaSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showTwinflowSchema2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowSchema2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinflowSchemaSearchRqV1"];
      };
    };
    responses: {
      /** @description Twinflow schema list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinflowSchemaSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new transition */
  transitionCreateV1: {
    parameters: {
      query?: {
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
        twinflowId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransitionCreateRqV1"];
      };
    };
    responses: {
      /** @description Transition data */
      200: {
        content: {
          "application/json": components["schemas"]["TransitionCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twinflow search result */
  twinflowSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTrigger2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinValidator2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinValidator2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflow2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowTransition2TwinflowTransitionValidatorRuleMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowTransitionValidatorRule2TwinValidatorMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowTransitionValidatorRule2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinflowListRqV1"];
      };
    };
    responses: {
      /** @description Twinflow list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinflowListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin status search result in current domain */
  twinStatusSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinStatus2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinStatusSearchRqV1"];
      };
    };
    responses: {
      /** @description Twin status list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinStatusSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of all twin class field for the current domain */
  twinClassFieldSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassField2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassField2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassField2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassFieldSearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassFieldSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Get valid heads of given class */
  validHeadV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchSimpleV1"];
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twinflow */
  twinflowCreateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinflowCreateRqV1"];
      };
    };
    responses: {
      /** @description Twinflow data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinflowCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twin status */
  twinStatusCreateV1: {
    parameters: {
      query?: {
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinStatusCreateRqV1"];
      };
    };
    responses: {
      /** @description Twin status data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinStatusCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Tag search */
  tagSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagSearchRqV1"];
      };
    };
    responses: {
      /** @description Tag data result */
      200: {
        content: {
          "application/json": components["schemas"]["TagSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Get valid twins list for link of new (not created) twin */
  validLinkedTwinV1: {
    parameters: {
      query?: {
        headTwinId?: string;
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        linkId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchSimpleV1"];
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twin class field */
  twinClassFieldCreateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassField2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassField2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassField2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassFieldCreateRqV1"];
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Duplicates twin class by id */
  twinClassDuplicateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassDuplicateRqV1"];
      };
    };
    responses: {
      /** @description Twin class copy result */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twin class */
  twinClassCreateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassCreateRqV1"];
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class search result */
  twinClassSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassListRqV1"];
      };
    };
    responses: {
      /** @description Twin class list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Get valid twins list for link of existed twin */
  validLinkedTwinsV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchSimpleV1"];
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Permisson check overview by twinId & userId */
  permissonCheckOverviewV1: {
    parameters: {
      query?: {
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showSpaceRoleUser2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRoleUserGroup2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRoleUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRoleUserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionCheckOverviewRqV1"];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Get valid twins list for link of new (not created) twin */
  validLinkedTwinsV1_1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        linkId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchSimpleV1"];
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add link to twin */
  twinLinkAddV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinLinkAddRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinLinkAddRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Updates twin fields data by keys */
  twinFieldListUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinFieldListUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Creates or updates twin field data by key. */
  twinFieldByKeySaveV2: {
    parameters: {
      query: {
        /** @example alcosi */
        fieldValue: string;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example brand */
        fieldKey: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin field data by key */
  twinFieldByKeyViewV1: {
    parameters: {
      query?: {
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example brand */
        fieldKey: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Creates or updates twin field data by key. */
  twinFieldByKeySaveV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example brand */
        fieldKey: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinFieldUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add attachment to twin */
  attachmentAddV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttachmentAddRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentAddRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twin */
  twinCreateV2: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinCreateRqV2"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twin */
  twinCreateV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinCreateRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Mark twin list as touched for user */
  "twinTouchAddListV1 ": {
    parameters: {
      query?: {
        showTouch2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTouchMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example WATCHED */
        touchId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinListTouchAddRqV1"];
      };
    };
    responses: {
      /** @description Twin touch data list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTouchListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Twins search by alias */
  twinSearchByAliasV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example tools */
        searchAlias: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchByAliasRqV1"];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Count twins by search aliases */
  twinSearchByAliasCountV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchByAliasBatchRqV1"];
      };
    };
    responses: {
      /** @description Map { alias / count } */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchBatchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Twins search by search_id */
  twinSearchByIdV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 8c580967-c050-47cf-ac27-4096c6dda2d1 */
        searchId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchByAliasRqV1"];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Twins basic search for several queries connected by OR operator */
  twinSearchV3: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchRqV1"][];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Twins basic search */
  twinSearchV2: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchRqV1"];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Twins basic search */
  twinSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchRqV1"];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Count twins by frontendId */
  twinSearchCountV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchBatchRqV1"];
      };
    };
    responses: {
      /** @description Map { frontendId / count } */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchBatchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of all histories */
  historySearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showHistory2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showHistory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistorySearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["HistorySearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete twins by self id */
  twinDeleteBatchV1: {
    parameters: {
      query?: {
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinDeleteRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Perform twin transition by alias. An alias can be useful for performing transitions for twin from different statuses. For incoming twin, the appropriate transition will be selected based on its current status. */
  twinTransitionByAliasPerformV2: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example start */
        transitionAlias: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /**
   * Perform twin transition by alias. An alias can be useful for performing transitions for twin from different statuses. For incoming twin, the appropriate transition will be selected based on its current status.
   * @deprecated
   */
  twinTransitionByAliasPerformV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example start */
        transitionAlias: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Perform transition for batch of twins by alias. An alias can be useful for performing transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status. */
  twinTransitionByAliasPerformBatchV2: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example start */
        transitionAlias: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformBatchRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /**
   * Perform transition for batch of twins by alias. An alias can be useful for performing transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status.
   * @deprecated
   */
  twinTransitionByAliasPerformBatchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example start */
        transitionAlias: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformBatchRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Draft twin transition by alias. Result will not be commited to db, and can be browsed by draftId */
  twinTransitionByAliasDraftV1: {
    parameters: {
      query?: {
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example start */
        transitionAlias: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionDraftRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionDraftRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Draft transition for batch of twins by alias. An alias can be useful for Drafting transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status. */
  twinTransitionByAliasDraftBatchV1: {
    parameters: {
      query?: {
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example start */
        transitionAlias: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionDraftBatchRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionDraftRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns transition details */
  transitionViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTrigger2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinValidator2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinValidator2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowTransition2TwinflowTransitionValidatorRuleMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowTransitionValidatorRule2TwinValidatorMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowTransitionValidatorRule2TwinValidatorSetMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    responses: {
      /** @description Transition details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TransitionViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update transition by id */
  transitionUpdateV1: {
    parameters: {
      query?: {
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransitionUpdateRqV1"];
      };
    };
    responses: {
      /** @description Transition prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinflowTransitionUpdateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Perform twin transition by transition id. Transition will be performed only if current twin status is correct for given transition */
  twinTransitionPerformV2: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /**
   * Perform twin transition by transition id. Transition will be performed only if current twin status is correct for given transition
   * @deprecated
   */
  twinTransitionPerformV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Perform transition for batch of twins by transition id. Transition will be performed only if current twin status is correct for given transition */
  twinTransitionPerformBatchV2: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformBatchRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /**
   * Perform transition for batch of twins by transition id. Transition will be performed only if current twin status is correct for given transition
   * @deprecated
   */
  twinTransitionPerformBatchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformBatchRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Draft twin transition by transition id. Result will not be commited to db, and can be browsed by draftId */
  twinTransitionDraftV1: {
    parameters: {
      query?: {
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionDraftRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionDraftRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Draft transition for batch of twins by transition id */
  twinTransitionDraftBatchV1: {
    parameters: {
      query?: {
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionDraftBatchRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionDraftRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns transition search result */
  transitionSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2TwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransitionSearchRqV1"];
      };
    };
    responses: {
      /** @description Transition data */
      200: {
        content: {
          "application/json": components["schemas"]["TransitionSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Search users within their roles of specific space */
  spaceRoleWithinUsersMapV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showSpace2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        spaceId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRefSpaceRoleSearchV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithinSpaceRolesListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add/Remove user list by role and twin */
  spaceRoleUserOverrideV1: {
    parameters: {
      query?: {
        showUserMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        spaceId: string;
        /** @example 793e3120-e14a-4a22-ab09-060b9fedee35 */
        roleId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpaceRoleUserOverrideRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Adding/removing a user to the space by role */
  spaceRoleUserManageV1: {
    parameters: {
      query?: {
        showUserMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        spaceId: string;
        /** @example 793e3120-e14a-4a22-ab09-060b9fedee35 */
        roleId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpaceRoleUserRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of all permission schemas for the current domain */
  permissionSchemaSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showPermissionSchema2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionSchema2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionSchemaSearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionSchemaSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of all permission groups for the current domain */
  permissionGroupSearchListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionGroupSearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGroupSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Permission grant user-group search */
  permissionGrantUserGroupSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroup2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroup2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroup2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionGrantUserGroupSearchRqV1"];
      };
    };
    responses: {
      /** @description Permission grant user group list */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrantUserGroupSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return the permission grant users for the current domain */
  permissionGrantUserViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUser2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUser2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 9e8641f2-dda1-4a43-9a23-8786124cdb6b */
        grantId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrantUserViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of all permission grant users for the current domain */
  permissionGrantUserSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUser2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUser2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionGrantUserSearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrantUserSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Permission grant twin role search */
  permissionGrantTwinRoleSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGrantTwinRole2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantTwinRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantTwinRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGrantTwinRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantTwinRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionGrantTwinRoleSearchRqV1"];
      };
    };
    responses: {
      /** @description Permission grant twin role list */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrantTwinRoleSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Permission grant space role search */
  permissionGrantSpaceRoleSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantSpaceRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantSpaceRole2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantSpaceRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionGrantSpaceRoleSearchRqV1"];
      };
    };
    responses: {
      /** @description Permission grant space role list */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrantSpaceRoleSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Permission grant assignee propagation search */
  permissionGrantAssigneePropagationSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantAssigneePropagation2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantAssigneePropagation2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantAssigneePropagation2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGrantAssigneePropagation2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantAssigneePropagationMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPropagationTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionGrantAssigneePropagationSearchRqV1"];
      };
    };
    responses: {
      /** @description Permission grant assignee propagation list */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrantAssigneePropagationSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return the permission for the current domain */
  permissionViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example abdeef68-7d6d-4385-9906-e3b701d2c503 */
        permissionId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update permission */
  permissionUpdateV1: {
    parameters: {
      query?: {
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example abdeef68-7d6d-4385-9906-e3b701d2c503 */
        permissionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionUpdateRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionUpdateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create permission */
  permissionCreateV1: {
    parameters: {
      query?: {
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionCreateRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of all permissions for the current domain */
  permissionSearchListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionSearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new link */
  linkCreateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showLinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showLinkSrc2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkCreateV1"];
      };
    };
    responses: {
      /** @description Created link */
      200: {
        content: {
          "application/json": components["schemas"]["LinkCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Link search */
  linkSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showLinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showLinkSrc2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkSearchRqV1"];
      };
    };
    responses: {
      /** @description Link data list */
      200: {
        content: {
          "application/json": components["schemas"]["LinkSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Featurer search */
  featurerSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeaturerSearchRqV1"];
      };
    };
    responses: {
      /** @description Featurer data result */
      200: {
        content: {
          "application/json": components["schemas"]["FeaturerSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory pipeline step search */
  factoryPipelineStepSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineStep2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineStep2FactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineStep2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineStepMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryPipelineStepSearchRqV1"];
      };
    };
    responses: {
      /** @description Factory pipeline step list */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryPipelineStepSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory pipeline search */
  factoryPipelineSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryPipelineSearchRqV1"];
      };
    };
    responses: {
      /** @description Factory pipeline list */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryPipelineSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory multiplier filter search */
  factoryMultiplierFilterSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultiplier2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultiplier2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showFactoryMultiplierFilter2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultiplierFilter2FactoryMultiplierMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultiplierFilterMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultiplierFiltersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryMultiplierFilterSearchRqV1"];
      };
    };
    responses: {
      /** @description Factory multiplier filter list */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryMultiplierFilterSearchRsDTOv1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory multiplier search */
  factoryMultiplierSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultiplier2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultiplier2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showFactoryMultiplierFiltersCountMode?: "HIDE" | "SHOW";
        showFactoryMultiplierMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryMultiplierSearchRqV1"];
      };
    };
    responses: {
      /** @description Factory multiplier list */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryMultiplierSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory eraser search */
  factoryEraserSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryEraser2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryEraser2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryEraser2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showFactoryEraserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryEraserSearchRqV1"];
      };
    };
    responses: {
      /** @description Factory eraser data list */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryEraserSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Condition set search */
  factoryConditionSetSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryConditionSetSearchRqV1"];
      };
    };
    responses: {
      /** @description Condition set list */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryConditionSetSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory branch search */
  factoryBranchSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranch2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranch2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryBranchSearchRqV1"];
      };
    };
    responses: {
      /** @description Factory branch list */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryBranchSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory branch add */
  factoryBranchCreateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranch2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranch2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        factoryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryBranchCreateRqV1"];
      };
    };
    responses: {
      /** @description Factory branch add */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryBranchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory add */
  factoryCreateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFactory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactoryCreateRqV1"];
      };
    };
    responses: {
      /** @description Factory data add */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of all factories for the current domain */
  factorySearchListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFactory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FactorySearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FactorySearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add user to domainIf user is not exist it will be created. */
  domainUserAddV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        domainId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainUserAddV1"];
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update settings for businessAccount in domain */
  domainBusinessAccountUpdateV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        domainId: string;
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainBusinessAccountUpdateV1"];
      };
    };
    responses: {
      /** @description BusinessAccount was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add businessAccount to domain. If business account is not exist it will be created. Domain must be already present. */
  domainBusinessAccountAddV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        domainId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainBusinessAccountAddV1"];
      };
    };
    responses: {
      /** @description BusinessAccount was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add new domain with icons */
  domainAddV2: {
    parameters: {
      header: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          request: components["schemas"]["DomainCreateRqDTOv1"];
          /**
           * Format: binary
           * @description Dark icon
           */
          iconDark: string;
          /**
           * Format: binary
           * @description Light icon
           */
          iconLight: string;
        };
      };
    };
    responses: {
      /** @description Domain was added */
      200: {
        content: {
          "application/json": components["schemas"]["DomainViewRsv1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add new domain. */
  domainAddV1: {
    parameters: {
      header: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainCreateRqDTOv1"];
      };
    };
    responses: {
      /** @description Domain was added */
      200: {
        content: {
          "application/json": components["schemas"]["DomainViewRsv1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of users by current domain */
  domainUserSearchListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showBusinessAccountUser2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showBusinessAccountUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showBusinessAccountUserCollectionMode?: "HIDE" | "SHOW";
        showDomainUser2BusinessAccountUserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDomainUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDomainUserMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainUserSearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DomainUserSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns domain business account search result */
  domainBusinessAccountSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDomainBusinessAccount2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showDomainBusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainBusinessAccountSearchRqV1"];
      };
    };
    responses: {
      /** @description Domain business account list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DomainBusinessAccountSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create data list option data */
  dataListOptionCreateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListOption2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOption2DataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListOptionCreateRqDV1"];
      };
    };
    responses: {
      /** @description The data list option was created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionRsV3"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of all data list option for the current domain */
  dataListOptionSearchListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListOption2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOption2DataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListOptionSearchRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns map option id ref list data option */
  dataListOptionsMapViewV1: {
    parameters: {
      query?: {
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListOptionMapRqV1"];
      };
    };
    responses: {
      /** @description Map {option id/list data option} prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionMapRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Data list add */
  dataListCreateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListCreateRqV1"];
      };
    };
    responses: {
      /** @description Data list add */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns lists details */
  dataListSearchV1: {
    parameters: {
      query?: {
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListSearchRqV1"];
      };
    };
    responses: {
      /** @description List details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns comment list by twin id */
  twinCommentListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinCommentActionMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CommentListRsv1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add comment and it's attachments by twin */
  twinCommentAddV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentCreateRqV1"];
      };
    };
    responses: {
      /** @description Twin comment */
      200: {
        content: {
          "application/json": components["schemas"]["CommentCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns comment search result in current domain */
  commentSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinCommentActionMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentSearchRqDTOv1"];
      };
    };
    responses: {
      /** @description Comment status list */
      200: {
        content: {
          "application/json": components["schemas"]["CommentSearchRsDTOv1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add user to business account. If business account is not exist it will be created. If user is not exist it will be created */
  businessAccountUserAddV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessAccountUserAddRqV1"];
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Validate attachment CUD operations */
  attachmentValidateV1: {
    parameters: {
      query?: {
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCUDValidate2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showAttachmentValidateProblemsMode?: "HIDE" | "SHOW";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttachmentCUDValidateRqV1"];
      };
    };
    responses: {
      /** @description Attachment validation result */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentCUDValidateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** File in attachment */
  getResourceFile: {
    parameters: {
      path: {
        /**
         * @description Resource Id
         * @example 09cd9a50-dcbe-4c73-b39e-65d2000a8e85
         */
        id: string;
      };
    };
    responses: {
      /** @description File */
      200: {
        content: {
          "application/octet-stream": unknown;
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
      /** @description File is not exist */
      404: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return list of locales */
  localeListPublicViewV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description Public list details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["LocaleViewV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns public list data */
  dataListOptionPublicViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
      path: {
        /** @example 7de977d4-df6d-4250-9cb2-088363d139a1 */
        dataListOptionId: string;
      };
    };
    responses: {
      /** @description Public list details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns public data list */
  dataListPublicByKeyViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
      path: {
        /** @example country */
        dataListKey: string;
      };
    };
    responses: {
      /** @description Public list details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns public data list */
  dataListPublicViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
      path: {
        /** @example e844a4e5-1c09-474e-816f-05cdb1f093ed */
        dataListId: string;
      };
    };
    responses: {
      /** @description Public list details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns user group list for selected user */
  userGroupForUserListV1: {
    parameters: {
      query?: {
        showUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns grouped permission list for selected user */
  userPermissionGroupedListV1: {
    parameters: {
      query?: {
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGroupedListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns permission list for selected user */
  userPermissionListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** View user locale in domain */
  userLocaleViewV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LocaleRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class field options shared in head (free for select) */
  twinClassFieldDataListSharedInHeadV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d */
        twinClassFieldId: string;
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        headTwinId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class by key */
  twinClassViewByKeyV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example TOOL */
        twinClassKey: string;
      };
    };
    responses: {
      /** @description Twin class prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class field list */
  twinClassFieldViewByKeyV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example TOOL */
        classKey: string;
        /** @example brand */
        fieldKey: string;
      };
    };
    responses: {
      /** @description Twin class field information */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns widget list */
  twinClassWidgetListV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description Widget list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["WidgetListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /**
   * Returns twin class link list
   * @deprecated
   */
  twinClassLinkListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showLinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassLinkListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class field list */
  twinClassFieldListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassField2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassField2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassField2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description Twin class field list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassFieldListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns card list */
  twinClassCardListV1: {
    parameters: {
      query?: {
        showCard2WidgetMode?: "HIDE" | "SHORT" | "DETAILED";
        showCardMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description Twin card list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["CardListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class list */
  twinClassListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description Twin class list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin data by alias */
  twinViewByAliasV2: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinAlias: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin data by alias */
  twinViewByAliasV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinAlias: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin data by id */
  twinViewV2: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
        showTwinAttachmentCountMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinCreatableChild2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin history by id */
  historyListV1: {
    parameters: {
      query?: {
        childDepth?: number;
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showHistory2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showHistory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return history by id */
  historyViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showHistory2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showHistory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        historyId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Make config file for log substitutions */
  makeConfigForSubstitutions: {
    parameters: {
      query?: {
        filename?: string;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description Run command */
      200: {
        content: {
          "application/json": components["schemas"]["CommandRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns application info: versions, etc... */
  "Application info": {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description Application info */
      200: {
        content: {
          "application/json": components["schemas"]["AppInfoRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Get user within his roles of specific space */
  spaceRoleUserViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showSpace2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        spaceId: string;
        /** @example abdeef68-7d6d-4385-9906-e3b701d2c503 */
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithinSpaceRolesViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return all users within roles of specific space */
  spaceRoleWithinAllUsersMapV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showSpace2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        spaceId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithinSpaceRolesListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns user list by selected space and role */
  spaceRoleByUserListV1: {
    parameters: {
      query?: {
        showUserMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        spaceId: string;
        /** @example 793e3120-e14a-4a22-ab09-060b9fedee35 */
        roleId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return the permission schema for the current domain */
  permissionSchemaViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showPermissionSchema2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionSchema2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example af143656-9899-4e1f-8683-48795cdefeac */
        schemaId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionSchemaViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return the permission group by key */
  permissionGroupViewByKeyV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example LOCAL_PERMISSION */
        groupKey: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGroupViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return the permission group by id */
  permissionGroupViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 7efd9df0-cae7-455f-a721-eaec455105a4 */
        groupId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGroupViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Permission grant user-group view */
  permissionGrantUserGroupViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroup2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroup2UserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroup2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 12fd2df0-cae7-455f-a721-eaec415105a4 */
        grantId: string;
      };
    };
    responses: {
      /** @description Permission grant user group */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrantUserGroupViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Permission grant twin role view */
  permissionGrantTwinRoleViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGrantTwinRole2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantTwinRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantTwinRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGrantTwinRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantTwinRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 22fd2df0-cae7-455f-a721-eaec415105a4 */
        grantId: string;
      };
    };
    responses: {
      /** @description Permission grant twin role */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrantTwinRoleViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Permission grant space role view */
  permissionGrantSpaceRoleViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantSpaceRole2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantSpaceRole2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantSpaceRole2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantUserGroup2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showSpaceRole2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRole2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 275bf3c4-951a-4d26-bb82-5e18361d301c */
        grantId: string;
      };
    };
    responses: {
      /** @description Permission grant space role */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrantSpaceRoleViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Permission grant assignee propagation view */
  permissionGrantAssigneePropagationViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantAssigneePropagation2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantAssigneePropagation2PermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantAssigneePropagation2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionGrantAssigneePropagation2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGrantAssigneePropagationMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPropagationTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example a7485d77-16bc-440e-a88e-1a576954a839 */
        grantId: string;
      };
    };
    responses: {
      /** @description Permission grant assignee propagation */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrantAssigneePropagationViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return the permission for the current domain by key */
  permissionViewByKeyV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerParamMode?: "HIDE" | "SHOW";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermission2PermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionGroup2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "D" | "C" | "B" | "S" | "T" | "K" | "ALL";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE" | "MAGENTA" | "PINK" | "LAVENDER";
        showTwinClass2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClass2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example DENY_ALL */
        permissionKey: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory pipeline step */
  factoryPipelineStepViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineStep2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineStep2FactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineStep2FeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineStepMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
        showFeaturerParamMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 99856a15-6858-40ba-b0aa-b123c54e250d */
        stepId: string;
      };
    };
    responses: {
      /** @description Factory pipeline step */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryPipelineStepViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory pipeline view */
  factoryPipelineViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipeline2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipeline2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipeline2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineNextTwinFactory2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryPipelineOutputTwinStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        pipelineId: string;
      };
    };
    responses: {
      /** @description Factory pipeline data */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryPipelineViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory multiplier filter search */
  factoryMultiplierFilterViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultiplier2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultiplier2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showFactoryMultiplierFilter2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultiplierFilter2FactoryMultiplierMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultiplierFilterMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultiplierFiltersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 66956a15-6858-40ba-b0aa-b123c54e250d */
        multiplierId: string;
      };
    };
    responses: {
      /** @description Factory multiplier filter data */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryMultiplierFilterViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory multiplier view */
  factoryMultiplierViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultiplier2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultiplier2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showFactoryMultiplierFiltersCountMode?: "HIDE" | "SHOW";
        showFactoryMultiplierMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 66956a15-6858-40ba-b0aa-b123c54e250d */
        multiplierId: string;
      };
    };
    responses: {
      /** @description Factory multiplier */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryMultiplierViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Factory eraser view by id */
  factoryEraserViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryBranchesCountMode?: "HIDE" | "SHOW";
        showFactoryEraser2FactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryEraser2FactoryMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryEraser2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showFactoryEraserMode?: "HIDE" | "SHORT" | "DETAILED";
        showFactoryErasersCountMode?: "HIDE" | "SHOW";
        showFactoryMultipliersCountMode?: "HIDE" | "SHOW";
        showFactoryPipelineCountMode?: "HIDE" | "SHOW";
        showFactoryUsagesCountMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 47991b35-e9fb-454e-a9b1-d715b2e6c71e */
        eraserId: string;
      };
    };
    responses: {
      /** @description Factory eraser data */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryEraserViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Condition set view by id */
  factoryConditionSetViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showConditionSetInFactoryBranchUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryEraserUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryMultiplierFilterUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineStepUsagesCountMode?: "HIDE" | "SHOW";
        showConditionSetInFactoryPipelineUsagesCountMode?: "HIDE" | "SHOW";
        showFactoryConditionSetMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 69856a15-6858-40ba-b0aa-b123c54e250d */
        factoryConditionSetId: string;
      };
    };
    responses: {
      /** @description Condition set */
      200: {
        content: {
          "application/json": components["schemas"]["FactoryConditionSetViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return the user by id */
  domainUserViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showBusinessAccountUser2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showBusinessAccountUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showBusinessAccountUserCollectionMode?: "HIDE" | "SHOW";
        showDomainUser2BusinessAccountUserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDomainUser2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDomainUserMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DomainUserViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of domains for current user */
  domainListV1: {
    parameters: {
      query?: {
        showDomainMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DomainListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns the owner type of the domain class */
  twinClassOwnerTypeListV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DomainClassOwnerTypeListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns domain business account result */
  domainBusinessAccountViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDomainBusinessAccount2BusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
        showDomainBusinessAccountMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
      };
    };
    responses: {
      /** @description Domain business account prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DomainBusinessAccountViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns list data */
  dataListByKeyViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example country */
        dataListKey: string;
      };
    };
    responses: {
      /** @description List details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** View attachment by id */
  attachmentViewV1: {
    parameters: {
      query?: {
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showAttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAttachmentActionMode?: "HIDE" | "SHOW";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 553ef9bc-3b48-430d-90d3-bdee516c3d87 */
        attachmentId: string;
      };
    };
    responses: {
      /** @description Attachment data */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete attachment by id */
  attachmentDeleteV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 553ef9bc-3b48-430d-90d3-bdee516c3d87 */
        attachmentId: string;
      };
    };
    responses: {
      /** @description Deletion result */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Get info about storage quotas(count files/disk space usage) for BA */
  attachmentDomainBusinessAccountQuotasV1: {
    parameters: {
      query?: {
        showAttachmentQuotasMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description Attachment quotas data */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentQuotasRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Get info about storage quotas(count files/disk space usage) for Domain */
  attachmentDomainQuotasV1: {
    parameters: {
      query?: {
        showAttachmentQuotasMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description Attachment quotas data */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentQuotasRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete twin by id */
  twinDeleteDraftedV1: {
    parameters: {
      query?: {
        showDraft2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showDraftMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["DraftRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete user from domain */
  domainUserDeleteV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        domainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete businessAccount from domain */
  domainBusinessAccountDeleteV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description BusinessAccount was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete user from businessAccount */
  businessAccountUserDeleteV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
}
