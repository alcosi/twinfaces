/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/private/user/{userId}/v1": {
    /** Update user */
    put: operations["userUpdateV1"];
    /** Delete user */
    delete: operations["userDeleteV1"];
  };
  "/private/user/locale/{localeName}/v1": {
    /** Update user locale */
    put: operations["userLocaleUpdateV1"];
  };
  "/private/twinflow/{twinflowId}/v1": {
    /** Returns twinflow details */
    get: operations["twinflowViewV1"];
    /** Update twinflow by id */
    put: operations["twinflowUpdateV1"];
  };
  "/private/twin_status/{twinStatusId}/v1": {
    /** Update twin status */
    put: operations["twinStatusUpdateV1"];
  };
  "/private/twin_class_field/{twinClassFieldId}/v1": {
    /** Returns twin class field list */
    get: operations["twinClassFieldViewV1"];
    /** Update twin class field */
    put: operations["twinClassFieldUpdateV1"];
  };
  "/private/twin_class/{twinClassId}/v1": {
    /** Returns twin class by id */
    get: operations["twinClassViewV1"];
    /** Update twin class by id */
    put: operations["twinClassUpdateV1"];
  };
  "/private/twin/{twinId}/v1": {
    /**
     * Returns twin data by id
     * @deprecated
     */
    get: operations["twinViewV1"];
    /** Update twin */
    put: operations["twinUpdateV1"];
    /** Delete twin by id */
    delete: operations["twinDeleteV1"];
  };
  "/private/twin/{twinId}/untouch/{touchId}/v1": {
    /** Unmark twin as touched for user */
    put: operations["twinUntouchV1"];
  };
  "/private/twin/{twinId}/touch/{touchId}/v1": {
    /** Mark twin as touched for user */
    put: operations["twinTouchV1"];
  };
  "/private/comment/{commentId}/v1": {
    /** Returns comment by comment id */
    get: operations["twinCommentV1"];
    /** Update comment and it's attachments */
    put: operations["twinCommentUpdateV1"];
    /** Delete comment with attachments */
    delete: operations["twinCommentDeleteV1"];
  };
  "/private/business_account/{businessAccountId}/v1": {
    /** Update businessAccount */
    put: operations["businessAccountUpdateV1"];
    /** Delete businessAccount */
    delete: operations["businessAccountDeleteV1"];
  };
  "/public/data_list_option/map/v1": {
    /** Returns map option id ref list data option */
    post: operations["dataListOptionsMapViewPublicV1"];
  };
  "/public/data_list/search/v1": {
    /** Returns public details lists */
    post: operations["dataListPublicSearchV1"];
  };
  "/private/user/{userId}/user_group/manage/v1": {
    /** Assign or discharge some group to user */
    post: operations["userGroupMemberManageV1"];
  };
  "/private/user/v1": {
    /** Smart endpoint for adding new user. It will also add user to domain and businessAccount if specified. If given businessAccount is not registered in domain, it will register it */
    post: operations["userAddV1"];
  };
  "/private/twinflow/{twinflowId}/transition/v1": {
    /** Create new transition */
    post: operations["transitionCreateV1"];
  };
  "/private/twinflow/search/v1": {
    /** Returns twinflow search result */
    post: operations["twinflowSearchV1"];
  };
  "/private/twin_class/{twinClassId}/twinflow/v1": {
    /** Create new twinflow */
    post: operations["twinflowCreateV1"];
  };
  "/private/twin_class/{twinClassId}/twin_status/v1": {
    /** Create new twin status */
    post: operations["twinStatusCreateV1"];
  };
  "/private/twin_class/{twinClassId}/field/v1": {
    /** Create new twin class field */
    post: operations["twinClassFieldCreateV1"];
  };
  "/private/twin_class/{twinClassId}/duplicate/v1": {
    /** Duplicates twin class by id */
    post: operations["twinClassDuplicateV1"];
  };
  "/private/twin_class/v1": {
    /** Create new twin class */
    post: operations["twinClassCreateV1"];
  };
  "/private/twin_class/search/v1": {
    /** Returns twin class search result */
    post: operations["twinClassSearchV1"];
  };
  "/private/twin/{twinId}/permisson_check_overview/v1": {
    /** Permisson check overview by twinId & userId */
    post: operations["permissonCheckOverviewV1"];
  };
  "/private/twin/{twinId}/link/v1": {
    /** Add link to twin */
    post: operations["twinLinkAddV1"];
  };
  "/private/twin/{twinId}/field_list/v1": {
    /** Updates twin fields data by keys */
    post: operations["twinFieldListUpdateV1"];
  };
  "/private/twin/{twinId}/field/{fieldKey}/v2": {
    /** Creates or updates twin field data by key. */
    post: operations["twinFieldByKeySaveV2"];
  };
  "/private/twin/{twinId}/field/{fieldKey}/v1": {
    /** Returns twin field data by key */
    get: operations["twinFieldByKeyViewV1"];
    /** Creates or updates twin field data by key. */
    post: operations["twinFieldByKeySaveV1"];
  };
  "/private/twin/{twinId}/attachment/v1": {
    /** Add attachment to twin */
    post: operations["attachmentAddV1"];
  };
  "/private/twin/v2": {
    /** Create new twin */
    post: operations["twinCreateV2"];
  };
  "/private/twin/v1": {
    /** Create new twin */
    post: operations["twinCreateV1"];
  };
  "/private/twin/search_by_alias/{searchAlias}/v1": {
    /** Twins search by alias */
    post: operations["twinSearchByAliasV1"];
  };
  "/private/twin/search_by_alias/count/v1": {
    /** Count twins by search aliases */
    post: operations["twinSearchByAliasCountV1"];
  };
  "/private/twin/search/{searchId}/v1": {
    /** Twins search by search_id */
    post: operations["twinSearchByIdV1"];
  };
  "/private/twin/search/v3": {
    /** Twins basic search for several queries connected by OR operator */
    post: operations["twinSearchV3"];
  };
  "/private/twin/search/v2": {
    /** Twins basic search */
    post: operations["twinSearchV2"];
  };
  "/private/twin/search/v1": {
    /** Twins basic search */
    post: operations["twinSearchV1"];
  };
  "/private/twin/search/count/v1": {
    /** Count twins by frontendId */
    post: operations["twinSearchCountV1"];
  };
  "/private/transition_by_alias/{transitionAlias}/perform/v1": {
    /** Perform twin transition by alias. An alias can be useful for performing transitions for twin from different statuses. For incoming twin, the appropriate transition will be selected based on its current status. */
    post: operations["twinTransitionByAliasPerformV1"];
  };
  "/private/transition_by_alias/{transitionAlias}/perform/batch/v1": {
    /** Perform transition for batch of twins by alias. An alias can be useful for performing transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status. */
    post: operations["twinTransitionByAliasPerformBatchV1"];
  };
  "/private/transition/{transitionId}/v1": {
    /** Returns transition details */
    get: operations["transitionViewV1"];
    /** Update transition by id */
    post: operations["transitionUpdateV1"];
  };
  "/private/transition/{transitionId}/perform/v1": {
    /** Perform twin transition by transition id. Transition will be performed only if current twin status is correct for given transition */
    post: operations["twinTransitionPerformV1"];
  };
  "/private/transition/{transitionId}/perform/batch/v1": {
    /** Perform transition for batch of twins by transition id. Transition will be performed only if current twin status is correct for given transition */
    post: operations["twinTransitionPerformBatchV1"];
  };
  "/private/space/{spaceId}/users/search/v1": {
    /** Search users within their roles of specific space */
    post: operations["spaceRoleWithinUsersMapV1"];
  };
  "/private/space/{spaceId}/role/{roleId}/users/manage/v1": {
    /** Adding/removing a user to the space by role */
    post: operations["spaceRoleUserManageV1"];
  };
  "/private/featurer/v1": {
    /** Featurer search */
    post: operations["featurerListV1"];
  };
  "/private/domain/{domainId}/user/v1": {
    /** Add user to domainIf user is not exist it will be created. */
    post: operations["domainUserAddV1"];
  };
  "/private/domain/{domainId}/business_account/{businessAccountId}/v1": {
    /** Update settings for businessAccount in domain */
    post: operations["domainBusinessAccountUpdateV1"];
  };
  "/private/domain/{domainId}/business_account/v1": {
    /** Add businessAccount to domain. If business account is not exist it will be created. Domain must be already present. */
    post: operations["domainBusinessAccountAddV1"];
  };
  "/private/domain/v1": {
    /** Add new domain. */
    post: operations["domainAddV1"];
  };
  "/private/data_list_option/map/v1": {
    /** Returns map option id ref list data option */
    post: operations["dataListOptionsMapViewV1"];
  };
  "/private/data_list/search/v1": {
    /** Returns lists details */
    post: operations["dataListSearchV1"];
  };
  "/private/comment/twin/{twinId}/v1": {
    /** Returns comment list by twin id */
    get: operations["twinCommentListV1"];
    /** Add comment and it's attachments by twin */
    post: operations["twinCommentAddV1"];
  };
  "/private/business_account/{businessAccountId}/user/v1": {
    /** Add user to business account. If business account is not exist it will be created. If user is not exist it will be created */
    post: operations["businessAccountUserAddV1"];
  };
  "/public/locale/list/v1": {
    /** Return list of locales */
    get: operations["localeListPublicViewV1"];
  };
  "/public/data_list_option/{dataListOptionId}/v1": {
    /** Returns public list data */
    get: operations["dataListOptionPublicViewV1"];
  };
  "/public/data_list_by_key/{dataListKey}/v1": {
    /** Returns public data list */
    get: operations["dataListPublicByKeyViewV1"];
  };
  "/public/data_list/{dataListId}/v1": {
    /** Returns public data list */
    get: operations["dataListPublicViewV1"];
  };
  "/private/user/{userId}/user_group/v1": {
    /** Returns user group list for selected user */
    get: operations["userGroupForUserListV1"];
  };
  "/private/user/{userId}/permission_group/v1": {
    /** Returns grouped permission list for selected user */
    get: operations["userPermissionGroupedListV1"];
  };
  "/private/user/{userId}/permission/v1": {
    /** Returns permission list for selected user */
    get: operations["userPermissionListV1"];
  };
  "/private/user/locale/v1": {
    /** View user locale in domain */
    get: operations["userLocaleViewV1"];
  };
  "/private/twin_class_field/{twinClassFieldId}/data_list_shared_in_head/{headTwinId}/v1": {
    /** Returns twin class field options shared in head (free for select) */
    get: operations["twinClassFieldDataListSharedInHeadV1"];
  };
  "/private/twin_class_by_key/{twinClassKey}/v1": {
    /** Returns twin class by key */
    get: operations["twinClassViewByKeyV1"];
  };
  "/private/twin_class/{twinClassId}/widget/list/v1": {
    /** Returns widget list */
    get: operations["twinClassWidgetListV1"];
  };
  "/private/twin_class/{twinClassId}/valid_heads/v1": {
    /** Get valid heads of given class */
    get: operations["twinClassValidHeadV1"];
  };
  "/private/twin_class/{twinClassId}/link/v1": {
    /** Returns twin class link list */
    get: operations["twinClassLinkListV1"];
  };
  "/private/twin_class/{twinClassId}/field/list/v1": {
    /** Returns twin class field list */
    get: operations["twinClassFieldListV1"];
  };
  "/private/twin_class/{twinClassId}/card/list/v1": {
    /** Returns card list */
    get: operations["twinClassCardListV1"];
  };
  "/private/twin_class/list/v1": {
    /** Returns twin class list */
    get: operations["twinClassListV1"];
  };
  "/private/twin_by_alias/{twinAlias}/v2": {
    /** Returns twin data by alias */
    get: operations["twinViewByAliasV2"];
  };
  "/private/twin_by_alias/{twinAlias}/v1": {
    /** Returns twin data by alias */
    get: operations["twinViewByAliasV1"];
  };
  "/private/twin/{twinId}/v2": {
    /** Returns twin data by id */
    get: operations["twinViewV2"];
  };
  "/private/twin/{twinId}/history/list/v1": {
    /** Returns twin history by id */
    get: operations["historyListV1"];
  };
  "/private/system/log/substitutions_config/v1": {
    /** Make config file for log substitutions */
    get: operations["makeConfigForSubstitutions"];
  };
  "/private/system/info": {
    /** Returns application info: versions, etc... */
    get: operations["Application info"];
  };
  "/private/space/{spaceId}/users/list/v1": {
    /** Return all users within roles of specific space */
    get: operations["spaceRoleWithinAllUsersMapV1"];
  };
  "/private/space/{spaceId}/role/{roleId}/users/v1": {
    /** Returns user list by selected space and role */
    get: operations["spaceRoleByUserListV1"];
  };
  "/private/domain/list/v1": {
    /** Return a list of domains for current user */
    get: operations["domainListV1"];
  };
  "/private/data_list_option/{dataListOptionId}/v1": {
    /** Returns list data */
    get: operations["dataListOptionViewV1"];
  };
  "/private/data_list_by_key/{dataListKey}/v1": {
    /** Returns list data */
    get: operations["dataListByKeyViewV1"];
  };
  "/private/data_list/{dataListId}/v1": {
    /** Returns list data */
    get: operations["dataListViewV1"];
  };
  "/private/attachment/{attachmentId}/v1": {
    /** View attachment by id */
    get: operations["attachmentViewV1"];
    /** Delete attachment by id */
    delete: operations["attachmentDeleteV1"];
  };
  "/private/domain/{domainId}/user/{userId}/v1": {
    /** Delete user from domain */
    delete: operations["domainUserDeleteV1"];
  };
  "/private/domain/business_account/v1": {
    /** Delete businessAccount from domain */
    delete: operations["domainBusinessAccountDeleteV1"];
  };
  "/private/business_account/{businessAccountId}/user/{userId}/v1": {
    /** Delete user from businessAccount */
    delete: operations["businessAccountUserDeleteV1"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UserUpdateRqV1: {
      /**
       * @description fullName
       * @example John Doe
       */
      fullName?: string;
      /**
       * @description email
       * @example some@email.com
       */
      email?: string;
      /**
       * @description avatar url
       * @example http://twins.org/a/avatar/carkikrefmkawfwfwg.png
       */
      avatar?: string;
    };
    Response: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
    };
    /** @description I18n description */
    I18nV1: {
      /** @description translation in current locale */
      translationInCurrentLocale?: string;
      /** @description map (locale : translate) */
      translations?: {
        [key: string]: string;
      };
    };
    TwinflowUpdateRqV1: {
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: uuid
       * @description initial status id
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      initialStatusId?: string;
    };
    /** @description extends class */
    TwinClassBaseV1: {
      /**
       * Format: uuid
       * @description id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      id?: string;
      /**
       * @description key
       * @example PROJECT
       */
      key?: string;
      /**
       * @description name
       * @example Project
       */
      name?: string;
      /**
       * @description description
       * @example Projects business objects
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description logo
       * @example http://twins.org/t/class/project.png
       */
      logo?: string;
      /** @description if class is abstract no twin of it can be created. Some child class must be used */
      abstractClass?: boolean;
      /**
       * Format: uuid
       * @description head class id or empty if class is not linked to any head
       * @example c2854a55-1dfe-41cd-bb36-f71eeaf16f81
       */
      headClassId?: string;
      /**
       * Format: uuid
       * @description some markers for twins. Are domain level and not editable by user
       */
      markersDataListId?: string;
      /**
       * Format: uuid
       * @description some tags for twins. Can be business account level and editable by user
       */
      tagsDataListId?: string;
      /**
       * @description twin class owner type
       * @enum {string}
       */
      ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
      /**
       * Format: uuid
       * @description extends class id or empty if class is not linked to any classes
       */
      extendsClassId?: string;
      /** @description if true, take the twinflow scheme in space */
      twinflowSchemaSpace?: boolean;
      twinClassSchemaSpace?: boolean;
      /** @description if true, take the permission scheme in space */
      permissionSchemaSpace?: boolean;
      aliasSpace?: boolean;
      /**
       * Format: int32
       * @description head hunter featurer id
       */
      headHunterFeaturerId?: number;
      /** @description head hunter featurer params */
      headHunterParams?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description view permission id
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description uuid of name in I18n table
       */
      nameI18nId?: string;
      /**
       * Format: uuid
       * @description uuid of description in I18n table
       */
      descriptionI18nId?: string;
    };
    TwinflowBaseV1: {
      /**
       * Format: uuid
       * @example 34618b09-e8dc-4712-a433-2e18915ee70d
       */
      id?: string;
      /**
       * Format: uuid
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      /**
       * @description name
       * @example Project
       */
      name?: string;
      /**
       * @description description
       * @example Projects business objects
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
      /**
       * Format: uuid
       * @description initialStatusId
       */
      initialStatusId?: string;
      twinClass?: components["schemas"]["TwinClassBaseV1"];
    };
    TwinStatusUpdateRqV1: {
      /**
       * @description [optional] key within the domain
       * @example toDo
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * @description [optional] url for status UI logo
       * @example https://twins.org/img/twin_status_default.png
       */
      logo?: string;
      /**
       * @description [optional] color hex
       * @example #ff00ff
       */
      color?: string;
    };
    TwinStatusUpdateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      twinStatus?: components["schemas"]["TwinStatusV1"];
    };
    /** @description Map of statuses. Will be filled only if lazyRelations mode is true */
    TwinStatusV1: {
      /**
       * Format: uuid
       * @description uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      id?: string;
      /** @description key within the domain */
      key?: string;
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description url for status UI logo
       * @example https://twins.org/img/twin_status_default.png
       */
      logo?: string;
      /**
       * @description color hex
       * @example #ff00ff
       */
      color?: string;
    };
    TwinClassFieldUpdateRqV1: {
      /**
       * @description unique key within the class
       * @example serialNumber
       */
      key?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to view this field
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to edit this field
       */
      editPermissionId?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * @description Required field
       * @example true
       */
      required?: boolean;
      /**
       * Format: int32
       * @description Field typer featurer ID
       * @example 1
       */
      fieldTyperFeaturerId?: number;
      /**
       * @description Field typer parameters
       * @example {}
       */
      fieldTyperParams?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description twin class id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
    };
    /** @description Map of tags. Will be filled only if lazyRelations mode is true */
    DataListOptionV1: {
      /**
       * Format: uuid
       * @description id
       * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
       */
      id?: string;
      /**
       * @description name
       * @example Bharat
       */
      name?: string;
      /**
       * @description icon
       * @example Icon path
       */
      icon?: string;
      /**
       * @description description
       * @default false
       * @example false
       */
      disabled?: boolean;
      /** @description attributes */
      attributes?: {
        [key: string]: string;
      };
    };
    /** @description aliases */
    TwinAliasV1: {
      /**
       * Format: uuid
       * @description id
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      id?: string;
      /**
       * @description alias
       * @example TWIN-D41
       */
      alias?: string;
      /**
       * Format: uuid
       * @description twin id
       */
      twinId?: string;
      /**
       * Format: uuid
       * @description domain id
       */
      domainId?: string;
      /**
       * Format: uuid
       * @description business account id
       */
      businessAccountId?: string;
      /**
       * Format: uuid
       * @description user id
       */
      userId?: string;
    };
    /** @description Valid options */
    TwinBaseV2: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * @description externalId
       * @example 934599502DFFAE
       */
      externalId?: string;
      /**
       * Format: uuid
       * @description headTwinId
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /**
       * Format: uuid
       * @description statusId
       */
      statusId?: string;
      /**
       * Format: uuid
       * @description class
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description current assigner
       */
      assignerUserId?: string;
      /**
       * Format: uuid
       * @description author
       */
      authorUserId?: string;
      status?: components["schemas"]["TwinStatusV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
      assignerUser?: components["schemas"]["UserV1"];
      authorUser?: components["schemas"]["UserV1"];
      headTwin?: components["schemas"]["TwinBaseV2"];
      /** @description aliases */
      aliases?: components["schemas"]["TwinAliasV1"][];
    };
    TwinClassFieldDescriptorAttachmentV1: {
      fieldType: "attachmentFieldDescriptorV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * Format: int32
       * @description Min count of files to upload
       * @example 1
       */
      minCount?: number;
      /**
       * Format: int32
       * @description Max count of files to upload
       * @example 1
       */
      maxCount?: number;
      /**
       * @description Allowed extensions
       * @example [
       *   "jpg",
       *   "jpeg",
       *   "png"
       * ]
       */
      extensions?: string[];
      /**
       * @description Filename must match this regexp
       * @example .*
       */
      filenameRegExp?: string;
      /**
       * Format: int32
       * @description Filesize limit(per file)
       * @example 8
       */
      fileSizeMbLimit?: number;
    };
    TwinClassFieldDescriptorColorHexV1: {
      fieldType: "colorHexV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
    };
    /** @description On of values */
    TwinClassFieldDescriptorDTO: {
      fieldType: string;
    } & (components["schemas"]["TwinClassFieldDescriptorTextV1"] | components["schemas"]["TwinClassFieldDescriptorColorHexV1"] | components["schemas"]["TwinClassFieldDescriptorUrlV1"] | components["schemas"]["TwinClassFieldDescriptorDateScrollV1"] | components["schemas"]["TwinClassFieldDescriptorListV1"] | components["schemas"]["TwinClassFieldDescriptorListLongV1"] | components["schemas"]["TwinClassFieldDescriptorListSharedInHeadV1"] | components["schemas"]["TwinClassFieldDescriptorLinkV1"] | components["schemas"]["TwinClassFieldDescriptorLinkLongV1"] | components["schemas"]["TwinClassFieldDescriptorUserV1"] | components["schemas"]["TwinClassFieldDescriptorUserLongV1"] | components["schemas"]["TwinClassFieldDescriptorAttachmentV1"] | components["schemas"]["TwinClassFieldDescriptorNumericV1"]);
    TwinClassFieldDescriptorDateScrollV1: {
      fieldType: "dateScrollV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /** @description Date pattern */
      pattern?: string;
    };
    TwinClassFieldDescriptorLinkLongV1: {
      fieldType: "selectLinkLongV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /**
       * Format: uuid
       * @description Link id for grabbing valid dst twins
       */
      linkId?: string;
    };
    TwinClassFieldDescriptorLinkV1: {
      fieldType: "selectLinkV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /** @description Valid options */
      dstTwins?: components["schemas"]["TwinBaseV2"][];
    };
    TwinClassFieldDescriptorListLongV1: {
      fieldType: "selectLongV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Can custom option be entered
       * @example false
       */
      supportCustom?: boolean;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /**
       * Format: uuid
       * @description Data list id for grabbing valid options
       */
      dataListId?: string;
    };
    TwinClassFieldDescriptorListSharedInHeadV1: {
      fieldType: "selectSharedInHeadV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
    };
    TwinClassFieldDescriptorListV1: {
      fieldType: "selectListV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Can custom option be entered
       * @example false
       */
      supportCustom?: boolean;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /** @description Valid options */
      options?: components["schemas"]["DataListOptionV1"][];
    };
    TwinClassFieldDescriptorNumericV1: {
      fieldType: "numericFieldDescriptorV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * Format: double
       * @description Min possible value
       * @example 1
       */
      min?: number;
      /**
       * Format: double
       * @description Max possible value
       * @example 10
       */
      max?: number;
      /**
       * Format: double
       * @description Step of value change
       * @example 1
       */
      step?: number;
      /**
       * @description Thousand separator. Must not be equal to decimal separator.
       * @example ,
       */
      thousandSeparator?: string;
      /**
       * @description Decimal separator. Must not be equal to thousand separator.
       * @example .
       */
      decimalSeparator?: string;
      /**
       * Format: int32
       * @description Number of decimal places.
       * @example 0
       */
      decimalPlaces?: number;
    };
    TwinClassFieldDescriptorTextV1: {
      fieldType: "textV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Some validation regexp
       * @example .*
       */
      regExp?: string;
    };
    TwinClassFieldDescriptorUrlV1: {
      fieldType: "urlV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
    };
    TwinClassFieldDescriptorUserLongV1: {
      fieldType: "selectUserLongV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /**
       * Format: uuid
       * @description User filter list id for grabbing valid users
       */
      userFilterId?: string;
    };
    TwinClassFieldDescriptorUserV1: {
      fieldType: "selectUserV1";
    } & Omit<components["schemas"]["TwinClassFieldDescriptorDTO"], "fieldType"> & {
      fieldType?: string;
      /**
       * @description Multiple choice support
       * @example true
       */
      multiple?: boolean;
      /** @description Valid users */
      users?: components["schemas"]["UserV1"][];
      /** @description Valid users id list */
      userIdList?: string[];
    };
    TwinClassFieldRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      field?: components["schemas"]["TwinClassFieldV1"];
    };
    /** @description field */
    TwinClassFieldV1: {
      /**
       * Format: uuid
       * @description id
       * @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d
       */
      id?: string;
      /**
       * @description key
       * @example serialNumber
       */
      key?: string;
      /**
       * @description name
       * @example Serial number
       */
      name?: string;
      /**
       * @description required
       * @example true
       */
      required?: boolean;
      /** @description description */
      description?: string;
      descriptor?: components["schemas"]["TwinClassFieldDescriptorDTO"];
      /**
       * Format: uuid
       * @description twin class id
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description name i18n id
       */
      nameI18nId?: string;
      /**
       * Format: uuid
       * @description description i18n id
       */
      descriptionI18nId?: string;
      /**
       * Format: int32
       * @description field typer featurer id
       */
      fieldTyperFeaturerId?: number;
      /** @description field typer params */
      fieldTyperParams?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description view permission id
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description edit permission id
       */
      editPermissionId?: string;
    };
    TwinClassLinkV1: {
      /**
       * Format: uuid
       * @description id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      dstTwinClassId?: string;
      dstTwinClass?: components["schemas"]["TwinClassBaseV1"];
      /**
       * @description name
       * @example Serial number
       */
      name?: string;
      /**
       * @description Ling strength id
       * @example OPTIONAL
       * @enum {string}
       */
      linkStrengthId?: "MANDATORY" | "OPTIONAL" | "OPTIONAL_BUT_DELETE_CASCADE";
      /**
       * @description link type
       * @example ManyToOne
       * @enum {string}
       */
      type?: "ManyToOne" | "ManyToMany" | "OneToOne";
    };
    /** @description class */
    TwinClassV1: {
      /**
       * Format: uuid
       * @description id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      id?: string;
      /**
       * @description key
       * @example PROJECT
       */
      key?: string;
      /**
       * @description name
       * @example Project
       */
      name?: string;
      /**
       * @description description
       * @example Projects business objects
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description logo
       * @example http://twins.org/t/class/project.png
       */
      logo?: string;
      /** @description if class is abstract no twin of it can be created. Some child class must be used */
      abstractClass?: boolean;
      /**
       * Format: uuid
       * @description head class id or empty if class is not linked to any head
       * @example c2854a55-1dfe-41cd-bb36-f71eeaf16f81
       */
      headClassId?: string;
      /**
       * Format: uuid
       * @description some markers for twins. Are domain level and not editable by user
       */
      markersDataListId?: string;
      /**
       * Format: uuid
       * @description some tags for twins. Can be business account level and editable by user
       */
      tagsDataListId?: string;
      /**
       * @description twin class owner type
       * @enum {string}
       */
      ownerType?: "SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER";
      /**
       * Format: uuid
       * @description extends class id or empty if class is not linked to any classes
       */
      extendsClassId?: string;
      /** @description if true, take the twinflow scheme in space */
      twinflowSchemaSpace?: boolean;
      twinClassSchemaSpace?: boolean;
      /** @description if true, take the permission scheme in space */
      permissionSchemaSpace?: boolean;
      aliasSpace?: boolean;
      /**
       * Format: int32
       * @description head hunter featurer id
       */
      headHunterFeaturerId?: number;
      /** @description head hunter featurer params */
      headHunterParams?: {
        [key: string]: string;
      };
      /**
       * Format: uuid
       * @description view permission id
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description uuid of name in I18n table
       */
      nameI18nId?: string;
      /**
       * Format: uuid
       * @description uuid of description in I18n table
       */
      descriptionI18nId?: string;
      /** @description Class fields list */
      fields?: components["schemas"]["TwinClassFieldV1"][];
      /** @description Class fields id list */
      fieldIds?: string[];
      /** @description List of status id. Will be filled only in lazyRelations mode is false */
      statusList?: string[];
      /** @description List of marker id. Will be filled only in lazyRelations mode is false */
      markerList?: string[];
      /** @description List of tag id. Will be filled only in lazyRelations mode is false */
      tagList?: string[];
      forwardLinkMap?: {
        [key: string]: components["schemas"]["TwinClassLinkV1"];
      };
      backwardLinkMap?: {
        [key: string]: components["schemas"]["TwinClassLinkV1"];
      };
      /** @description Map of statuses. Will be filled only if lazyRelations mode is true */
      statusMap?: {
        [key: string]: components["schemas"]["TwinStatusV1"];
      };
      /** @description Map of markers. Will be filled only if lazyRelations mode is true */
      markerMap?: {
        [key: string]: components["schemas"]["DataListOptionV1"];
      };
      /** @description Map of tags. Will be filled only if lazyRelations mode is true */
      tagMap?: {
        [key: string]: components["schemas"]["DataListOptionV1"];
      };
      headClass?: components["schemas"]["TwinClassBaseV1"];
      extendsClass?: components["schemas"]["TwinClassBaseV1"];
    };
    /** @description Valid users */
    UserV1: {
      /**
       * Format: uuid
       * @description id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      id?: string;
      /**
       * @description fullName
       * @example John Doe
       */
      fullName?: string;
      /**
       * @description email
       * @example some@email.com
       */
      email?: string;
      /**
       * @description avatar url
       * @example http://twins.org/a/avatar/carkikrefmkawfwfwg.png
       */
      avatar?: string;
    };
    /** @description [optional] should be filled on change extends twins class id */
    BasicUpdateOperationDTOv1: {
      /**
       * Format: uuid
       * @description new id. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      newId?: string;
      /**
       * @description what should be done with old values, if no replacement was given
       * @enum {string}
       */
      onUnreplacedStrategy?: "delete" | "restrict";
      /** @description map [old_id -> new_id] */
      replaceMap?: {
        [key: string]: string;
      };
    };
    TwinClassUpdateRqV1: {
      /**
       * @description unique key within the domain
       * @example TOOL
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: int32
       * @description [optional] an id of head hunter featurer. The field has a sense only if headTwinClassId filled
       */
      headHunterFeaturerId?: number;
      /** @description [optional] head hunter featurer params */
      headHunterParams?: {
        [key: string]: string;
      };
      /**
       * @description [optional] if true, then not twin of given class can be created. Abstract classes must be extended
       * @example false
       */
      abstractClass?: boolean;
      /**
       * @description [optional] url for class UI logo
       * @example https://twins.org/img/twin_class_default.png
       */
      logo?: string;
      /**
       * @description [optional] if true then twins of current class can have own permission_schema and this schema will cover children twins
       * @example false
       */
      permissionSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class can have own twinflow_schema and this schema will cover children twins
       * @example false
       */
      twinflowSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class can have own twin_class_schema and this schema will cover children twins
       * @example false
       */
      twinClassSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class must have own alias key and this key will be used to generate alias for children twins
       * @example false
       */
      aliasSpace?: boolean;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to view twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      viewPermissionId?: string;
      markerDataListUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
      tagDataListUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
      extendsTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
      headTwinClassUpdate?: components["schemas"]["BasicUpdateOperationDTOv1"];
    };
    /** @description attachments */
    AttachmentViewV1: {
      /**
       * @description External storage link
       * @example https://test.filestorage.by/JFUjEFWksfqwf
       */
      storageLink?: string;
      /**
       * @description External id
       * @example JD999weqw9f
       */
      externalId?: string;
      /**
       * @description Title
       * @example cert.pdf
       */
      title?: string;
      /**
       * @description Description
       * @example cert.pdf
       */
      description?: string;
      /**
       * Format: uuid
       * @description link to the field to which attachment was added (if any)
       */
      twinClassFieldId?: string;
      /**
       * Format: uuid
       * @description link to the comment to which attachment was added (if any)
       */
      commentId?: string;
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description author id
       */
      authorUserId?: string;
      authorUser?: components["schemas"]["UserV1"];
      /**
       * Format: uuid
       * @description twinflow transition id
       */
      twinflowTransitionId?: string;
      twinflowTransition?: components["schemas"]["TwinflowTransitionBaseV1"];
      comment?: components["schemas"]["CommentBaseDTOv2"];
      twinClassField?: components["schemas"]["TwinClassFieldV1"];
    };
    /** @description comment */
    CommentBaseDTOv2: {
      text?: string;
      /**
       * Format: uuid
       * @description id
       * @example be44e826-ce24-4881-a227-f3f72d915a20
       */
      id?: string;
      /**
       * Format: uuid
       * @description author id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      authorUserId?: string;
      authorUser?: components["schemas"]["UserV1"];
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description changed at
       */
      changedAt?: string;
    };
    /**
     * @description related datalist map
     * @example {datalist map}
     */
    DataListV1: {
      /**
       * Format: uuid
       * @description id
       * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
       */
      id?: string;
      /**
       * @description name
       * @example Country list
       */
      name?: string;
      /**
       * @description description
       * @example Supported country list
       */
      description?: string;
      /**
       * Format: date-time
       * @description updated at
       */
      updatedAt?: string;
      /** @description List of option ids */
      optionIdList?: string[];
      /** @description List options */
      options?: {
        [key: string]: components["schemas"]["DataListOptionV1"];
      };
    };
    /** @description results - related objects, if lazeRelation is false */
    RelatedObjectsV1: {
      /**
       * @description related statuses map
       * @example {twin map}
       */
      twinMap?: {
        [key: string]: components["schemas"]["TwinV2"];
      };
      /**
       * @description related statuses map
       * @example {twin status map}
       */
      statusMap?: {
        [key: string]: components["schemas"]["TwinStatusV1"];
      };
      /**
       * @description related users map
       * @example {user map}
       */
      userMap?: {
        [key: string]: components["schemas"]["UserV1"];
      };
      /**
       * @description related twinClass map
       * @example {twin class map}
       */
      twinClassMap?: {
        [key: string]: components["schemas"]["TwinClassV1"];
      };
      /**
       * @description related transitionsMap map
       * @example {twin transition map}
       */
      transitionsMap?: {
        [key: string]: components["schemas"]["TwinflowTransitionBaseV1"];
      };
      /**
       * @description related datalist map
       * @example {datalist map}
       */
      dataListsMap?: {
        [key: string]: components["schemas"]["DataListV1"];
      };
      /**
       * @description related datalistOption map
       * @example {datalistOption map}
       */
      dataListsOptionMap?: {
        [key: string]: components["schemas"]["DataListOptionV1"];
      };
      /**
       * @description related space role map
       * @example {space role map}
       */
      spaceRoleMap?: {
        [key: string]: components["schemas"]["SpaceRoleV1"];
      };
    };
    /**
     * @description related space role map
     * @example {space role map}
     */
    SpaceRoleV1: {
      /**
       * Format: uuid
       * @description space role user id
       * @example 275bf3c4-951a-4d26-bb82-5e18361d301c
       */
      id?: string;
      /**
       * @description key
       * @example Member
       */
      key?: string;
      /**
       * @description description
       * @example Member i18n description
       */
      description?: string;
      /**
       * @description name
       * @example Member i18n name
       */
      name?: string;
    };
    TwinClassRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
    };
    /** @description links */
    TwinLinkListV1: {
      /** @description forward links from current twin to other twins */
      forwardLinks?: {
        [key: string]: components["schemas"]["TwinLinkViewV1"];
      };
      /** @description links */
      backwardLinks?: {
        [key: string]: components["schemas"]["TwinLinkViewV1"];
      };
    };
    /** @description links */
    TwinLinkViewV1: {
      /**
       * Format: uuid
       * @description Link id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      linkId?: string;
      /**
       * Format: uuid
       * @description Destination twin id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      dstTwinId?: string;
      /**
       * Format: uuid
       * @description id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description createdByUser
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      createdByUserId?: string;
      createdByUser?: components["schemas"]["UserV1"];
      link?: components["schemas"]["TwinClassLinkV1"];
      dstTwin?: components["schemas"]["TwinBaseV2"];
    };
    /** @description Transition list. Will be filled only if lazyRelations mode is true */
    TwinTransitionViewV1: {
      /**
       * Format: uuid
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstTwinStatusId?: string;
      dstTwinStatus?: components["schemas"]["TwinStatusV1"];
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description alias
       * @example start
       */
      alias?: string;
      allowComment?: boolean;
      allowAttachments?: boolean;
      allowLinks?: boolean;
    };
    /**
     * @description related statuses map
     * @example {twin map}
     */
    TwinV2: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * @description externalId
       * @example 934599502DFFAE
       */
      externalId?: string;
      /**
       * Format: uuid
       * @description headTwinId
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /**
       * Format: uuid
       * @description statusId
       */
      statusId?: string;
      /**
       * Format: uuid
       * @description class
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description current assigner
       */
      assignerUserId?: string;
      /**
       * Format: uuid
       * @description author
       */
      authorUserId?: string;
      status?: components["schemas"]["TwinStatusV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
      assignerUser?: components["schemas"]["UserV1"];
      authorUser?: components["schemas"]["UserV1"];
      headTwin?: components["schemas"]["TwinBaseV2"];
      /** @description aliases */
      aliases?: components["schemas"]["TwinAliasV1"][];
      /** @description attachments */
      attachments?: components["schemas"]["AttachmentViewV1"][];
      links?: components["schemas"]["TwinLinkListV1"];
      /** @description TransitionId list. Will be filled only in lazyRelations mode is false */
      transitionsIdList?: string[];
      /** @description Transition list. Will be filled only if lazyRelations mode is true */
      transitions?: components["schemas"]["TwinTransitionViewV1"][];
      /** @description MarkerId list. Will be filled only in lazyRelations mode is false */
      markerIdList?: string[];
      /** @description Marker list. Will be filled only if lazyRelations mode is true */
      markers?: components["schemas"]["DataListOptionV1"][];
      /** @description TagId list. Will be filled only in lazyRelations mode is false */
      tagIdList?: string[];
      /** @description Tag list. Will be filled only if lazyRelations mode is true */
      tags?: components["schemas"]["DataListOptionV1"][];
      /** @description Suitable actions list */
      actions?: ("EDIT" | "DELETE" | "MOVE" | "COMMENT" | "WATCH" | "TIME_TRACK" | "ATTACHMENT_ADD" | "ATTACHMENT_DELETE")[];
      /** @description fields */
      fields?: {
        [key: string]: string;
      };
    };
    /** @description twinflow transition */
    TwinflowTransitionBaseV1: {
      /**
       * Format: uuid
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstTwinStatusId?: string;
      dstTwinStatus?: components["schemas"]["TwinStatusV1"];
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description alias
       * @example start
       */
      alias?: string;
      allowComment?: boolean;
      allowAttachments?: boolean;
      allowLinks?: boolean;
    };
    /** @description Attachments for adding */
    AttachmentAddV1: {
      /**
       * @description External storage link
       * @example https://test.filestorage.by/JFUjEFWksfqwf
       */
      storageLink?: string;
      /**
       * @description External id
       * @example JD999weqw9f
       */
      externalId?: string;
      /**
       * @description Title
       * @example cert.pdf
       */
      title?: string;
      /**
       * @description Description
       * @example cert.pdf
       */
      description?: string;
      /**
       * Format: uuid
       * @description link to the field to which attachment was added (if any)
       */
      twinClassFieldId?: string;
      /**
       * Format: uuid
       * @description link to the comment to which attachment was added (if any)
       */
      commentId?: string;
    };
    /** @description Attachments add/update/delete operations */
    AttachmentCudV1: {
      /** @description Attachments for adding */
      create?: components["schemas"]["AttachmentAddV1"][];
      /** @description Attachments for updating */
      update?: components["schemas"]["AttachmentUpdateV1"][];
      /** @description Attachments id list for deleting */
      delete?: string[];
    };
    /** @description Attachments for updating */
    AttachmentUpdateV1: {
      /**
       * @description External storage link
       * @example https://test.filestorage.by/JFUjEFWksfqwf
       */
      storageLink?: string;
      /**
       * @description External id
       * @example JD999weqw9f
       */
      externalId?: string;
      /**
       * @description Title
       * @example cert.pdf
       */
      title?: string;
      /**
       * @description Description
       * @example cert.pdf
       */
      description?: string;
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
    };
    /** @description TwinLinks for adding */
    TwinLinkAddV1: {
      /**
       * Format: uuid
       * @description Link id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      linkId?: string;
      /**
       * Format: uuid
       * @description Destination twin id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      dstTwinId?: string;
    };
    /** @description TwinLinks for updating */
    TwinLinkUpdateV1: {
      /**
       * Format: uuid
       * @description id
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @description Destination twin id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      dstTwinId?: string;
    };
    /** @description TwinTags for updating */
    TwinTagManageV1: {
      /**
       * @description add already existing tags by their ids
       * @example cf8b1aec-c07c-4131-b834-8024462cfc93
       */
      existingTags?: string[];
      /** @description add new tags by name (in current locale). If tag with given name is already exist, it will be used */
      newTags?: string[];
      /**
       * @description delete already existing tags by their ids
       * @example cf8b1aec-c07c-4131-b834-8024462cfc93
       */
      deleteTags?: string[];
    };
    TwinUpdateRqV1: {
      /**
       * Format: uuid
       * @description Head twin id, if selected class had to be linked to some head twin
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * Format: uuid
       * @description assigner user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      assignerUserId?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /** @description fields */
      fields?: {
        [key: string]: string;
      };
      attachments?: components["schemas"]["AttachmentCudV1"];
      /** @description TwinLinks for adding */
      twinLinksAdd?: components["schemas"]["TwinLinkAddV1"][];
      /** @description TwinLinks id list for deleting */
      twinLinksDelete?: string[];
      /** @description TwinLinks for updating */
      twinLinksUpdate?: components["schemas"]["TwinLinkUpdateV1"][];
      tagsUpdate?: components["schemas"]["TwinTagManageV1"];
      comment?: string;
    };
    TwinRsV2: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twin?: components["schemas"]["TwinV2"];
    };
    /** @description twin */
    TwinBaseV1: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * @description externalId
       * @example 934599502DFFAE
       */
      externalId?: string;
      /**
       * Format: uuid
       * @description headTwinId
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /**
       * Format: uuid
       * @description statusId
       */
      statusId?: string;
      /**
       * Format: uuid
       * @description class
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description current assigner
       */
      assignerUserId?: string;
      /**
       * Format: uuid
       * @description author
       */
      authorUserId?: string;
    };
    TwinTouchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      twinTouch?: components["schemas"]["TwinTouchV1"];
    };
    /** @description twin touch */
    TwinTouchV1: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * Format: uuid
       * @description twinId
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      twinId?: string;
      /**
       * @description touchId
       * @example WATCHED
       * @enum {string}
       */
      touchId?: "WATCHED" | "STARRED" | "REVIEWED";
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      twin?: components["schemas"]["TwinBaseV1"];
    };
    CommentUpdateRqV1: {
      text?: string;
      attachments?: components["schemas"]["AttachmentCudV1"];
    };
    CommentViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      comment?: components["schemas"]["CommentViewV1"];
    };
    /** @description comment data */
    CommentViewV1: {
      text?: string;
      /**
       * Format: uuid
       * @description id
       * @example be44e826-ce24-4881-a227-f3f72d915a20
       */
      id?: string;
      /**
       * Format: uuid
       * @description author id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      authorUserId?: string;
      authorUser?: components["schemas"]["UserV1"];
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description changed at
       */
      changedAt?: string;
      /** @description attachments */
      attachments?: components["schemas"]["AttachmentViewV1"][];
    };
    BusinessAccountUpdateRqV1: {
      /**
       * @description name
       * @example BuildmeUp Const.
       */
      name?: string;
    };
    DataListOptionMapRqV1: {
      /**
       * @description data list option id set
       * @example [
       *   "133b1c94-a8c0-4795-8076-10548ed772b3",
       *   "7de977d4-df6d-4250-9cb2-088363d139a1"
       * ]
       */
      dataListOptionIdSet?: string[];
    };
    DataListOptionMapRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description map { data list option id / data list option } */
      dataListOptionMap?: {
        [key: string]: components["schemas"]["DataListOptionV1"];
      };
    };
    DataListSearchRqV1: {
      /** @description data list id list */
      dataListIdList?: string[];
    };
    DataListSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description results - data lists list */
      dataListList?: components["schemas"]["DataListV1"][];
    };
    UserGroupMemberManageRqV1: {
      userGroupEnterList?: string[];
      userGroupExitList?: string[];
    };
    UserGroupListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description user group list */
      userGroupList?: components["schemas"]["UserGroupV1"][];
    };
    /** @description user group list */
    UserGroupV1: {
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /** @description type */
      type?: string;
      /**
       * Format: uuid
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
      /**
       * @description name
       * @example Manager
       */
      name?: string;
      /** @description description */
      description?: string;
    };
    UserAddRqV1: {
      /**
       * Format: uuid
       * @description businessAccountId
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
      /**
       * Format: uuid
       * @description domainId
       * @example f67ad556-dd27-4871-9a00-16fb0e8a4102
       */
      domainId?: string;
      user?: components["schemas"]["UserV1"];
    };
    TransitionCreateRqV1: {
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: uuid
       * @description [optional] src status id. if null - from any status transition
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      srcStatusId?: string;
      /**
       * Format: uuid
       * @description dst status is required
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstStatusId?: string;
      /**
       * @description [optional] name
       * @example To Do
       */
      name?: string;
      /**
       * @description [optional] uniq alias inside twinflow
       * @example start
       */
      alias?: string;
      /**
       * Format: uuid
       * @description [optional] some permission required to run transition
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      /**
       * Format: uuid
       * @description Inbuilt TwinFactory Id
       */
      inbuiltTwinFactoryId?: string;
      /**
       * Format: uuid
       * @description Drafting TwinFactory Id
       */
      draftingTwinFactoryId?: string;
    };
    /** @description permission details */
    PermissionV1: {
      /**
       * Format: uuid
       * @description id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      id?: string;
      /** @description key */
      key?: string;
      /**
       * @description name
       * @example Manager
       */
      name?: string;
      /** @description description */
      description?: string;
    };
    TransitionCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      transition?: components["schemas"]["TwinflowTransitionBaseV2"];
    };
    /** @description result - twinflow transition */
    TwinflowTransitionBaseV2: {
      /**
       * Format: uuid
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstTwinStatusId?: string;
      dstTwinStatus?: components["schemas"]["TwinStatusV1"];
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description alias
       * @example start
       */
      alias?: string;
      allowComment?: boolean;
      allowAttachments?: boolean;
      allowLinks?: boolean;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      srcTwinStatusId?: string;
      srcTwinStatus?: components["schemas"]["TwinStatusV1"];
      /**
       * Format: uuid
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      permission?: components["schemas"]["PermissionV1"];
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      createdByUser?: components["schemas"]["UserV1"];
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
    };
    TwinflowListRqV1: {
      /** @description twin class id list */
      twinClassIdList?: string[];
      /** @description twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description name i18n keyword list(AND) */
      nameI18nLikeList?: string[];
      /** @description name i18n keyword exclude list(OR) */
      nameI18nNotLikeList?: string[];
      /** @description description i18n keyword list(AND) */
      descriptionI18nLikeList?: string[];
      /** @description description i18n exclude keyword list(OR) */
      descriptionI18nNotLikeList?: string[];
      /** @description initial status id list */
      initialStatusIdList?: string[];
      /** @description initial status id exclude list */
      initialStatusIdExcludeList?: string[];
    };
    /** @description pagination data */
    PaginationV1: {
      /**
       * Format: int32
       * @description record number from which data sampling begins
       * @example 25
       */
      offset?: number;
      /**
       * Format: int32
       * @description number of records in the query result
       * @example 10
       */
      limit?: number;
      /**
       * Format: int64
       * @description total results count
       * @example 100
       */
      total?: number;
    };
    /** @description triggers */
    TriggerV1: {
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /**
       * Format: int32
       * @description trigger featurer id
       */
      triggerFeaturerId?: number;
      /** @description featurer params */
      triggerParams?: {
        [key: string]: string;
      };
      /** @description active */
      active?: boolean;
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
    };
    /** @description twinflow details */
    TwinflowBaseV3: {
      /**
       * Format: uuid
       * @example 34618b09-e8dc-4712-a433-2e18915ee70d
       */
      id?: string;
      /**
       * Format: uuid
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      twinClassId?: string;
      /**
       * @description name
       * @example Project
       */
      name?: string;
      /**
       * @description description
       * @example Projects business objects
       */
      description?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
      /**
       * Format: uuid
       * @description initialStatusId
       */
      initialStatusId?: string;
      twinClass?: components["schemas"]["TwinClassBaseV1"];
      initialStatus?: components["schemas"]["TwinStatusV1"];
      createdByUser?: components["schemas"]["UserV1"];
      /** @description transitions map */
      transitions?: {
        [key: string]: components["schemas"]["TwinflowTransitionBaseV3"];
      };
    };
    TwinflowListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - twinflow list */
      twinflowList?: components["schemas"]["TwinflowBaseV3"][];
    };
    /** @description transition details */
    TwinflowTransitionBaseV3: {
      /**
       * Format: uuid
       * @example f6606fa2-c047-4ba9-a92c-84051df681ab
       */
      id?: string;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstTwinStatusId?: string;
      dstTwinStatus?: components["schemas"]["TwinStatusV1"];
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /**
       * @description alias
       * @example start
       */
      alias?: string;
      allowComment?: boolean;
      allowAttachments?: boolean;
      allowLinks?: boolean;
      /**
       * Format: uuid
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      srcTwinStatusId?: string;
      srcTwinStatus?: components["schemas"]["TwinStatusV1"];
      /**
       * Format: uuid
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      permission?: components["schemas"]["PermissionV1"];
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      createdByUser?: components["schemas"]["UserV1"];
      /**
       * Format: uuid
       * @description createdByUserId
       */
      createdByUserId?: string;
      /** @description validators */
      validators?: components["schemas"]["ValidatorV1"][];
      /** @description triggers */
      triggers?: components["schemas"]["TriggerV1"][];
    };
    /** @description validators */
    ValidatorV1: {
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /**
       * Format: int32
       * @description validator featurer id
       */
      validatorFeaturerId?: number;
      /** @description featurer params */
      validatorParams?: {
        [key: string]: string;
      };
      /** @description invert */
      invert?: boolean;
      /** @description active */
      active?: boolean;
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
    };
    TwinflowCreateRqV1: {
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: uuid
       * @description initial status id
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      initialStatusId?: string;
    };
    TwinClassCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
    };
    TwinStatusCreateRqV1: {
      /**
       * @description [optional] key within the domain
       * @example toDo
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * @description [optional] url for status UI logo
       * @example https://twins.org/img/twin_status_default.png
       */
      logo?: string;
      /**
       * @description [optional] color hex
       * @example #ff00ff
       */
      color?: string;
    };
    TwinStatusCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      twinStatus?: components["schemas"]["TwinStatusV1"];
    };
    TwinClassFieldCreateRqV1: {
      /**
       * @description unique key within the class
       * @example serialNumber
       */
      key?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to view this field
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to edit this field
       */
      editPermissionId?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * @description Required field
       * @example true
       */
      required?: boolean;
      /**
       * Format: int32
       * @description Field typer featurer ID
       * @example 1
       */
      fieldTyperFeaturerId?: number;
      /**
       * @description Field typer parameters
       * @example {}
       */
      fieldTyperParams?: {
        [key: string]: string;
      };
    };
    TwinClassDuplicateRqV1: {
      /**
       * @description new class key
       * @example PROJECT
       */
      newKey?: string;
    };
    TwinClassCreateRqV1: {
      /**
       * @description unique key within the domain
       * @example TOOL
       */
      key?: string;
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: int32
       * @description [optional] an id of head hunter featurer. The field has a sense only if headTwinClassId filled
       */
      headHunterFeaturerId?: number;
      /** @description [optional] head hunter featurer params */
      headHunterParams?: {
        [key: string]: string;
      };
      /**
       * @description [optional] if true, then not twin of given class can be created. Abstract classes must be extended
       * @example false
       */
      abstractClass?: boolean;
      /**
       * @description [optional] url for class UI logo
       * @example https://twins.org/img/twin_class_default.png
       */
      logo?: string;
      /**
       * @description [optional] if true then twins of current class can have own permission_schema and this schema will cover children twins
       * @example false
       */
      permissionSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class can have own twinflow_schema and this schema will cover children twins
       * @example false
       */
      twinflowSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class can have own twin_class_schema and this schema will cover children twins
       * @example false
       */
      twinClassSchemaSpace?: boolean;
      /**
       * @description [optional] if true then twins of current class must have own alias key and this key will be used to generate alias for children twins
       * @example false
       */
      aliasSpace?: boolean;
      /**
       * Format: uuid
       * @description [optional] this field helps to set extra permission, needed by users to view twins of given class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      viewPermissionId?: string;
      /**
       * Format: uuid
       * @description [optional] link to extends class. All fields and links will be valid for current class. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      extendsTwinClassId?: string;
      /**
       * Format: uuid
       * @description [optional] link to head (parent) class. It should be used in case, when twins of some class can not exist without some parent twin. Example: Task and Sub-task. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      headTwinClassId?: string;
      /**
       * Format: uuid
       * @description [optional] id of linked marker list. Markers in some cases similar to secondary statuses. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      markerDataListId?: string;
      /**
       * Format: uuid
       * @description [optional] id of linked tags cloud. Tags differ from markers in that new tags can be added to the cloud by the users themselves. And the list of markers is configured only by the domain manager. Use ffffffff-ffff-ffff-ffff-ffffffffffff for nullify value
       */
      tagDataListId?: string;
    };
    TwinClassListRqV1: {
      /** @description twin class id list */
      twinClassIdList?: string[];
      /** @description twin class id exclude list */
      twinClassIdExcludeList?: string[];
      /** @description twin class key list */
      twinClassKeyLikeList?: string[];
      /** @description name i18n keyword list(AND) */
      nameI18nLikeList?: string[];
      /** @description name i18n keyword exclude list(OR) */
      nameI18nNotLikeList?: string[];
      /** @description description i18n keyword list(AND) */
      descriptionI18nLikeList?: string[];
      /** @description description i18n exclude keyword list(OR) */
      descriptionI18nNotLikeList?: string[];
      /** @description head twin class id list */
      headTwinClassIdList?: string[];
      /** @description head twin class id exclude list */
      headTwinClassIdExcludeList?: string[];
      /** @description extends twin class id list */
      extendsTwinClassIdList?: string[];
      /** @description extends twin class id exclude list */
      extendsTwinClassIdExcludeList?: string[];
      /** @description owner type list */
      ownerTypeList?: ("SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER")[];
      /** @description owner type exclude list */
      ownerTypeExcludeList?: ("SYSTEM" | "USER" | "BUSINESS_ACCOUNT" | "DOMAIN" | "DOMAIN_BUSINESS_ACCOUNT" | "DOMAIN_USER" | "DOMAIN_BUSINESS_ACCOUNT_USER")[];
      /**
       * @description twin class is abstract
       * @example ONLY
       * @enum {string}
       */
      abstractt?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description twin class has twinflow schema space
       * @example ONLY
       * @enum {string}
       */
      twinflowSchemaSpace?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description twin class has schema space
       * @example ONLY
       * @enum {string}
       */
      twinClassSchemaSpace?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description twin class has permission schema space
       * @example ONLY
       * @enum {string}
       */
      permissionSchemaSpace?: "ONLY" | "ONLY_NOT" | "ANY";
      /**
       * @description twin class has alias space
       * @example ONLY
       * @enum {string}
       */
      aliasSpace?: "ONLY" | "ONLY_NOT" | "ANY";
    };
    TwinClassListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - twin class list */
      twinClassList?: components["schemas"]["TwinClassV1"][];
    };
    PermissionCheckOverviewRqV1: {
      /**
       * Format: uuid
       * @description userId for whom we want to check permission (will be different from ApiUser)
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      userId?: string;
      /**
       * Format: uuid
       * @description if null, then use view_permission_id from twin or from twin_class
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
    };
    /** @description field data */
    TwinFieldV1: {
      value?: components["schemas"]["TwinFieldValueDTO"];
      twinClassField?: components["schemas"]["TwinClassFieldV1"];
    };
    TwinFieldValueColorHexV1: {
      valueType: "colorHexV1";
    } & Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
      valueType?: string;
      /**
       * @description Color hex code
       * @example #575584
       */
      hex?: string;
    };
    /** @description On of values */
    TwinFieldValueDTO: {
      valueType: string;
    } & (components["schemas"]["TwinFieldValueTextV1"] | components["schemas"]["TwinFieldValueColorHexV1"] | components["schemas"]["TwinFieldValueDateV1"] | components["schemas"]["TwinFieldValueDataListOptionsV1"]);
    TwinFieldValueDataListOptionsV1: {
      valueType: "listOptionsV1";
    } & Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
      valueType?: string;
      /** @description Selected option */
      selectedOptions?: components["schemas"]["DataListOptionV1"][];
    };
    TwinFieldValueDateV1: {
      valueType: "dateV1";
    } & Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
      valueType?: string;
      /** @description Date */
      date?: string;
    };
    TwinFieldValueTextV1: {
      valueType: "textV1";
    } & Omit<components["schemas"]["TwinFieldValueDTO"], "valueType"> & {
      valueType?: string;
      /**
       * @description Some simple text
       * @example Hello world
       */
      text?: string;
    };
    TwinSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - transfers list */
      twinList?: components["schemas"]["TwinV1"][];
    };
    /** @description twin */
    TwinV1: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * @description externalId
       * @example 934599502DFFAE
       */
      externalId?: string;
      /**
       * Format: uuid
       * @description headTwinId
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /**
       * Format: uuid
       * @description statusId
       */
      statusId?: string;
      /**
       * Format: uuid
       * @description class
       */
      twinClassId?: string;
      /**
       * Format: uuid
       * @description current assigner
       */
      assignerUserId?: string;
      /**
       * Format: uuid
       * @description author
       */
      authorUserId?: string;
      status?: components["schemas"]["TwinStatusV1"];
      twinClass?: components["schemas"]["TwinClassV1"];
      assignerUser?: components["schemas"]["UserV1"];
      authorUser?: components["schemas"]["UserV1"];
      headTwin?: components["schemas"]["TwinBaseV2"];
      /** @description aliases */
      aliases?: components["schemas"]["TwinAliasV1"][];
      /** @description attachments */
      attachments?: components["schemas"]["AttachmentViewV1"][];
      links?: components["schemas"]["TwinLinkListV1"];
      /** @description TransitionId list. Will be filled only in lazyRelations mode is false */
      transitionsIdList?: string[];
      /** @description Transition list. Will be filled only if lazyRelations mode is true */
      transitions?: components["schemas"]["TwinTransitionViewV1"][];
      /** @description MarkerId list. Will be filled only in lazyRelations mode is false */
      markerIdList?: string[];
      /** @description Marker list. Will be filled only if lazyRelations mode is true */
      markers?: components["schemas"]["DataListOptionV1"][];
      /** @description TagId list. Will be filled only in lazyRelations mode is false */
      tagIdList?: string[];
      /** @description Tag list. Will be filled only if lazyRelations mode is true */
      tags?: components["schemas"]["DataListOptionV1"][];
      /** @description Suitable actions list */
      actions?: ("EDIT" | "DELETE" | "MOVE" | "COMMENT" | "WATCH" | "TIME_TRACK" | "ATTACHMENT_ADD" | "ATTACHMENT_DELETE")[];
      /** @description fields */
      fields?: components["schemas"]["TwinFieldV1"][];
    };
    TwinLinkAddRqV1: {
      /** @description Links list */
      links?: components["schemas"]["TwinLinkAddV1"][];
    };
    TwinLinkAddRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description id */
      twinLinkIdList?: string[];
    };
    TwinFieldListUpdateRqV1: {
      /** @description fields */
      fields?: {
        [key: string]: string;
      };
    };
    TwinFieldRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /**
       * Format: uuid
       * @description twinId
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      twinId?: string;
      field?: components["schemas"]["TwinFieldV1"];
    };
    TwinFieldUpdateRqV1: {
      value?: components["schemas"]["TwinFieldValueColorHexV1"] | components["schemas"]["TwinFieldValueDataListOptionsV1"] | components["schemas"]["TwinFieldValueDateV1"] | components["schemas"]["TwinFieldValueTextV1"];
    };
    AttachmentAddRqV1: {
      /** @description Attachments list */
      attachments?: components["schemas"]["AttachmentAddV1"][];
    };
    AttachmentAddRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description id */
      attachmentIdList?: string[];
    };
    TwinCreateRqV2: {
      /**
       * Format: uuid
       * @description Class Id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      classId?: string;
      /**
       * Format: uuid
       * @description Head twin id, if selected class had to be linked to some head twin
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * Format: uuid
       * @description assigner user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      assignerUserId?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /** @description fields */
      fields?: {
        [key: string]: string;
      };
      /** @description Attachments */
      attachments?: components["schemas"]["AttachmentAddV1"][];
      /** @description Links list */
      links?: components["schemas"]["TwinLinkAddV1"][];
      tags?: components["schemas"]["TwinTagAddV1"];
    };
    /** @description Tags list */
    TwinTagAddV1: {
      /**
       * @description add already existing tags by their ids
       * @example cf8b1aec-c07c-4131-b834-8024462cfc93
       */
      existingTags?: string[];
      /** @description add new tags by name (in current locale). If tag with given name is already exist, it will be used */
      newTags?: string[];
    };
    TwinCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /**
       * Format: uuid
       * @description new twin id
       */
      twinId?: string;
      /** @description twin alias list */
      twinAliasList?: string[];
    };
    TwinCreateRqV1: {
      /**
       * Format: uuid
       * @description Class Id
       * @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      classId?: string;
      /**
       * Format: uuid
       * @description Head twin id, if selected class had to be linked to some head twin
       * @example 5d956a15-6858-40ba-b0aa-b123c54e250d
       */
      headTwinId?: string;
      /**
       * @description name
       * @example Oak
       */
      name?: string;
      /**
       * Format: uuid
       * @description assigner user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      assignerUserId?: string;
      /**
       * @description description
       * @example The biggest tree
       */
      description?: string;
      /** @description fields */
      fields?: {
        [key: string]: components["schemas"]["TwinFieldValueColorHexV1"] | components["schemas"]["TwinFieldValueDataListOptionsV1"] | components["schemas"]["TwinFieldValueDateV1"] | components["schemas"]["TwinFieldValueTextV1"];
      };
      /** @description Attachments */
      attachments?: components["schemas"]["AttachmentAddV1"][];
      /** @description Links list */
      links?: components["schemas"]["TwinLinkAddV1"][];
    };
    TwinSearchByAliasRqV1: {
      /** @description Search named params values */
      params?: {
        [key: string]: string;
      };
      narrow?: components["schemas"]["TwinSearchWithHeadV"];
    };
    /** @description Exclude dst twins with given links */
    TwinSearchByLinkV1: {
      /**
       * Format: uuid
       * @description Twin-link class id
       */
      linkId?: string;
      /** @description Twin dest ids for in(ex)clude from search */
      dstTwinIdList?: string[];
    };
    /** @description Head twin sub-search */
    TwinSearchV1: {
      /** @description Twin class id list */
      twinClassIdList?: string[];
      /** @description Twin class exclude list */
      twinClassIdExcludeList?: string[];
      /** @description Twin name like list */
      twinNameLikeList?: string[];
      /** @description Head twin id list */
      headTwinIdList?: string[];
      /** @description Twin id list */
      twinIdList?: string[];
      /** @description Twin id exclude list */
      twinIdExcludeList?: string[];
      /** @description Status id list */
      statusIdList?: string[];
      /** @description Assigner id list */
      assignerUserIdList?: string[];
      /** @description Assigner id exclude list */
      assignerUserIdExcludeList?: string[];
      /** @description Reporter id list */
      createdByUserIdList?: string[];
      /** @description Reporter id exclude list */
      createdByUserIdExcludeList?: string[];
      /** @description Include dst twins with given links */
      linksList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Exclude dst twins with given links */
      noLinksList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Hierarchy ids filter */
      hierarchyTreeContainsIdList?: string[];
      /** @description Twin status exclude list */
      statusIdExcludeList?: string[];
      /** @description Twin tag list(data list options ids) */
      tagDataListOptionIdList?: string[];
      /** @description Twin tag exclude list(data list options ids) */
      tagDataListOptionIdExcludeList?: string[];
      /** @description Twin marker list(data list options ids) */
      markerDataListOptionIdList?: string[];
      /** @description Twin marker exclude list(data list options ids) */
      markerDataListOptionIdExcludeList?: string[];
      /** @description Twin extends by twin class list ids */
      extendsTwinClassIdList?: string[];
      /** @description Head twin class list ids */
      headTwinClassIdList?: string[];
      /** @description Twin touch list ids */
      touchList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      /** @description Twin touch exclude list ids */
      touchExcludeList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
    };
    /** @description search narrowing */
    TwinSearchWithHeadV: {
      /** @description Twin class id list */
      twinClassIdList?: string[];
      /** @description Twin class exclude list */
      twinClassIdExcludeList?: string[];
      /** @description Twin name like list */
      twinNameLikeList?: string[];
      /** @description Head twin id list */
      headTwinIdList?: string[];
      /** @description Twin id list */
      twinIdList?: string[];
      /** @description Twin id exclude list */
      twinIdExcludeList?: string[];
      /** @description Status id list */
      statusIdList?: string[];
      /** @description Assigner id list */
      assignerUserIdList?: string[];
      /** @description Assigner id exclude list */
      assignerUserIdExcludeList?: string[];
      /** @description Reporter id list */
      createdByUserIdList?: string[];
      /** @description Reporter id exclude list */
      createdByUserIdExcludeList?: string[];
      /** @description Include dst twins with given links */
      linksList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Exclude dst twins with given links */
      noLinksList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Hierarchy ids filter */
      hierarchyTreeContainsIdList?: string[];
      /** @description Twin status exclude list */
      statusIdExcludeList?: string[];
      /** @description Twin tag list(data list options ids) */
      tagDataListOptionIdList?: string[];
      /** @description Twin tag exclude list(data list options ids) */
      tagDataListOptionIdExcludeList?: string[];
      /** @description Twin marker list(data list options ids) */
      markerDataListOptionIdList?: string[];
      /** @description Twin marker exclude list(data list options ids) */
      markerDataListOptionIdExcludeList?: string[];
      /** @description Twin extends by twin class list ids */
      extendsTwinClassIdList?: string[];
      /** @description Head twin class list ids */
      headTwinClassIdList?: string[];
      /** @description Twin touch list ids */
      touchList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      /** @description Twin touch exclude list ids */
      touchExcludeList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      headSearch?: components["schemas"]["TwinSearchV1"];
    };
    TwinSearchRsV2: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description results - transfers list */
      twinList?: components["schemas"]["TwinV2"][];
    };
    TwinSearchByAliasBatchRqV1: {
      /** @description Search alias ref alias request body(TwinSearchByAliasRqV1) */
      searchMap?: {
        [key: string]: components["schemas"]["TwinSearchByAliasRqV1"];
      };
    };
    TwinSearchBatchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description Map { frontendId / count } */
      response?: {
        [key: string]: number;
      };
    };
    TwinSearchRqV1: {
      /** @description Twin class id list */
      twinClassIdList?: string[];
      /** @description Twin class exclude list */
      twinClassIdExcludeList?: string[];
      /** @description Twin name like list */
      twinNameLikeList?: string[];
      /** @description Head twin id list */
      headTwinIdList?: string[];
      /** @description Twin id list */
      twinIdList?: string[];
      /** @description Twin id exclude list */
      twinIdExcludeList?: string[];
      /** @description Status id list */
      statusIdList?: string[];
      /** @description Assigner id list */
      assignerUserIdList?: string[];
      /** @description Assigner id exclude list */
      assignerUserIdExcludeList?: string[];
      /** @description Reporter id list */
      createdByUserIdList?: string[];
      /** @description Reporter id exclude list */
      createdByUserIdExcludeList?: string[];
      /** @description Include dst twins with given links */
      linksList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Exclude dst twins with given links */
      noLinksList?: components["schemas"]["TwinSearchByLinkV1"][];
      /** @description Hierarchy ids filter */
      hierarchyTreeContainsIdList?: string[];
      /** @description Twin status exclude list */
      statusIdExcludeList?: string[];
      /** @description Twin tag list(data list options ids) */
      tagDataListOptionIdList?: string[];
      /** @description Twin tag exclude list(data list options ids) */
      tagDataListOptionIdExcludeList?: string[];
      /** @description Twin marker list(data list options ids) */
      markerDataListOptionIdList?: string[];
      /** @description Twin marker exclude list(data list options ids) */
      markerDataListOptionIdExcludeList?: string[];
      /** @description Twin extends by twin class list ids */
      extendsTwinClassIdList?: string[];
      /** @description Head twin class list ids */
      headTwinClassIdList?: string[];
      /** @description Twin touch list ids */
      touchList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      /** @description Twin touch exclude list ids */
      touchExcludeList?: ("WATCHED" | "STARRED" | "REVIEWED")[];
      headSearch?: components["schemas"]["TwinSearchV1"];
    };
    TwinSearchBatchRqV1: {
      /**
       * @description Map of { frontendId / TwinSearchRqV1 }
       * @example {
       *   "id1": {
       *     "twinClassIdList": [
       *       "ab750e98-70dd-404e-8164-4e0daa187164"
       *     ]
       *   },
       *   "id2": {
       *     "twinClassIdList": [
       *       "ab750e98-70dd-404e-8164-4e0daa187164"
       *     ]
       *   }
       * }
       */
      searchMap?: {
        [key: string]: components["schemas"]["TwinSearchRqV1"];
      };
    };
    /** @description list of basic twin fields */
    TwinBasicFieldsV1: {
      /**
       * Format: uuid
       * @description assignee user id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      assigneeUserId?: string;
      /**
       * Format: uuid
       * @description created by user_id
       * @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673
       */
      createdByUserId?: string;
      name?: string;
      description?: string;
    };
    /** @description TwinLinks for create/update/delete */
    TwinLinkCudV1: {
      /** @description TwinLinks for adding */
      create?: components["schemas"]["TwinLinkAddV1"][];
      /** @description TwinLinks for updating */
      update?: components["schemas"]["TwinLinkUpdateV1"][];
      /** @description TwinLinks id list for deleting */
      delete?: string[];
    };
    /** @description some extra data to perform transition */
    TwinTransitionContextV1: {
      /** @description fields */
      fields?: {
        [key: string]: string;
      };
      attachments?: components["schemas"]["AttachmentCudV1"];
      twinLinks?: components["schemas"]["TwinLinkCudV1"];
      /** @description list of twins, that must be created during transition */
      newTwins?: components["schemas"]["TwinCreateRqV2"][];
      basics?: components["schemas"]["TwinBasicFieldsV1"];
    };
    TwinTransitionPerformRqV1: {
      /**
       * Format: uuid
       * @description Target twin id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      twinId?: string;
      comment?: string;
      context?: components["schemas"]["TwinTransitionContextV1"];
    };
    TwinTransitionPerformRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      /** @description list of twins from input */
      transitionedTwinList?: components["schemas"]["TwinV2"][];
      /** @description list of twins processed by transition (some new can be created or updated). Key is twinClassId */
      processedTwinList?: {
        [key: string]: components["schemas"]["TwinV2"][];
      };
    };
    TwinTransitionPerformBatchRqV1: {
      twinIdList?: string[];
      batchComment?: string;
      batchContext?: components["schemas"]["TwinTransitionContextV1"];
    };
    TransitionUpdateRqV1: {
      nameI18n?: components["schemas"]["I18nV1"];
      descriptionI18n?: components["schemas"]["I18nV1"];
      /**
       * Format: uuid
       * @description [optional] src status id. if null - from any status transition
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      srcStatusId?: string;
      /**
       * Format: uuid
       * @description dst status is required
       * @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5
       */
      dstStatusId?: string;
      /**
       * @description [optional] name
       * @example To Do
       */
      name?: string;
      /**
       * @description [optional] uniq alias inside twinflow
       * @example start
       */
      alias?: string;
      /**
       * Format: uuid
       * @description [optional] some permission required to run transition
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      permissionId?: string;
      /**
       * Format: uuid
       * @description Inbuilt TwinFactory Id
       */
      inbuiltTwinFactoryId?: string;
      /**
       * Format: uuid
       * @description Drafting TwinFactory Id
       */
      draftingTwinFactoryId?: string;
      validators?: components["schemas"]["ValidatorCudV1"];
      triggers?: components["schemas"]["TriggerCudV1"];
    };
    /** @description triggers create list */
    TriggerCreateV1: {
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /**
       * Format: int32
       * @description trigger featurer id
       */
      triggerFeaturerId?: number;
      /** @description featurer params */
      triggerParams?: {
        [key: string]: string;
      };
      /** @description active */
      active?: boolean;
    };
    /** @description triggers cud operations */
    TriggerCudV1: {
      /** @description triggers create list */
      create?: components["schemas"]["TriggerCreateV1"][];
      /** @description triggers update list */
      update?: components["schemas"]["TriggerUpdateV1"][];
      /** @description triggers ids list to deletes */
      delete?: string[];
    };
    /** @description triggers update list */
    TriggerUpdateV1: {
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /**
       * Format: int32
       * @description trigger featurer id
       */
      triggerFeaturerId?: number;
      /** @description featurer params */
      triggerParams?: {
        [key: string]: string;
      };
      /** @description active */
      active?: boolean;
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
    };
    /** @description validators create list */
    ValidatorCreateV1: {
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /**
       * Format: int32
       * @description validator featurer id
       */
      validatorFeaturerId?: number;
      /** @description featurer params */
      validatorParams?: {
        [key: string]: string;
      };
      /** @description invert */
      invert?: boolean;
      /** @description active */
      active?: boolean;
    };
    /** @description validators cud operations */
    ValidatorCudV1: {
      /** @description validators create list */
      create?: components["schemas"]["ValidatorCreateV1"][];
      /** @description validators update list */
      update?: components["schemas"]["ValidatorUpdateV1"][];
      /** @description validators ids list to deletes */
      delete?: string[];
    };
    /** @description validators update list */
    ValidatorUpdateV1: {
      /**
       * Format: int32
       * @description order
       */
      order?: number;
      /**
       * Format: int32
       * @description validator featurer id
       */
      validatorFeaturerId?: number;
      /** @description featurer params */
      validatorParams?: {
        [key: string]: string;
      };
      /** @description invert */
      invert?: boolean;
      /** @description active */
      active?: boolean;
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
    };
    TwinflowTransitionUpdateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      transition?: components["schemas"]["TwinflowTransitionBaseV2"];
    };
    UserRefSpaceRoleSearchV1: {
      /**
       * @description Filter by user name, case ignore
       * @example st Us
       */
      userNameLike?: string;
      /**
       * @description Filter by specific roles(uuids)
       * @example [
       *   "793e3120-e14a-4a22-ab09-060b9fedee35"
       * ]
       */
      spaceRolesIdList?: string[];
      /**
       * @description Filter users from specific group
       * @example [
       *   "e155e05b-f353-49ff-9869-da1e62aab179"
       * ]
       */
      userGroupIdList?: string[];
    };
    UserWithinSpaceRolesListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description space role list */
      usersRefSpaceRolesList?: components["schemas"]["UserWithinSpaceRolesRsV1"][];
    };
    /** @description space role list */
    UserWithinSpaceRolesRsV1: {
      /**
       * Format: uuid
       * @description user id
       */
      userId?: string;
      user?: components["schemas"]["UserV1"];
      /** @description space role list */
      spaceRoleList?: components["schemas"]["SpaceRoleV1"][];
      /** @description spaceRoleIds list. Will be filled only in lazyRelations mode is false */
      spaceRoleIdsList?: string[];
    };
    SpaceRoleUserRqV1: {
      spaceRoleUserEnterList?: string[];
      spaceRoleUserExitList?: string[];
    };
    UserListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description user list */
      userList?: components["schemas"]["UserV1"][];
    };
    FeaturerSearchRqV1: {
      /** @description ids list */
      idList?: number[];
      /** @description type ids list */
      typeIdList?: number[];
      /** @description names list */
      nameLikeList?: string[];
    };
    /** @description params list */
    FeaturerParamV1: {
      /**
       * @description key
       * @example listUUID
       */
      key?: string;
      /**
       * @description name
       * @example listUUID
       */
      name?: string;
      /** @description description */
      description?: string;
      /** @description type */
      type?: string;
    };
    FeaturerSearchRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description featurer list */
      featurerList?: components["schemas"]["FeaturerV1"][];
    };
    /** @description featurer list */
    FeaturerV1: {
      /**
       * Format: int32
       * @description id
       * @example 1000
       */
      id?: number;
      /**
       * Format: int32
       * @description featurer type id
       * @example 12
       */
      featurerTypeId?: number;
      /**
       * @description name
       * @example InjectorImpl
       */
      name?: string;
      /** @description description */
      description?: string;
      /** @description deprecated */
      deprecated?: boolean;
      /** @description params list */
      params?: components["schemas"]["FeaturerParamV1"][];
    };
    DomainUserAddV1: {
      /**
       * Format: uuid
       * @description id
       * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
       */
      userId?: string;
    };
    DomainBusinessAccountUpdateV1: {
      /**
       * Format: uuid
       * @description permissionSchemaId
       * @example af143656-9899-4e1f-8683-48795cdefeac
       */
      permissionSchemaId?: string;
      /**
       * Format: uuid
       * @description twinClassSchemaId
       * @example 8b9ea6ad-2b9b-4a4a-8ea9-1b17da4d603b
       */
      twinClassSchemaId?: string;
      /**
       * Format: uuid
       * @description twinFlowSchemaId
       * @example 2c618b09-e8dc-4712-a433-2e18915ee70d
       */
      twinFlowSchemaId?: string;
    };
    DomainBusinessAccountAddV1: {
      /**
       * Format: uuid
       * @description id
       * @example 9a3f6075-f175-41cd-a804-934201ec969c
       */
      businessAccountId?: string;
    };
    DomainAddRqV1: {
      /**
       * @description will be used for url generation and for twins aliases
       * @example alcosi
       */
      key?: string;
      /**
       * @description domain description
       * @example some domain
       */
      description?: string;
      /**
       * @description type [basic/b2b]
       * @example basic
       * @enum {string}
       */
      type?: "basic" | "b2b";
      /**
       * @description default locale for domain [en/de/by]
       * @example en
       */
      defaultLocale?: string;
    };
    /** @description domain list */
    DomainViewRsv1: {
      /**
       * Format: uuid
       * @description domain id
       */
      id?: string;
      /**
       * @description key
       * @example alcosi
       */
      key?: string;
      /**
       * @description domain description
       * @example alcosi
       */
      description?: string;
      /**
       * @description type [basic/b2b]
       * @enum {string}
       */
      type?: "basic" | "b2b";
      /**
       * Format: uuid
       * @description permission schema id
       */
      permissionSchemaId?: string;
      /**
       * Format: uuid
       * @description twinflow schema id
       */
      twinflowSchemaId?: string;
      /**
       * Format: uuid
       * @description twinclass schema id
       */
      twinClassSchemaId?: string;
      /**
       * Format: uuid
       * @description business account template twin id
       */
      businessAccountTemplateTwinId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /** @description default locale */
      defaultLocale?: string;
    };
    CommentCreateRqV1: {
      text?: string;
      attachments?: components["schemas"]["AttachmentAddV1"][];
    };
    CommentCreateRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /**
       * Format: uuid
       * @description New comment id
       */
      commentId?: string;
      /** @description attachment list id */
      attachmentListId?: string[];
    };
    BusinessAccountUserAddRqV1: {
      /**
       * Format: uuid
       * @description id
       * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
       */
      userId?: string;
    };
    /** @description locales in domain */
    LocaleV1: {
      /** @description id */
      id?: string;
      /** @description name */
      name?: string;
      /** @description nativeName */
      nativeName?: string;
      /** @description icon */
      icon?: string;
    };
    LocaleViewV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description locales in domain */
      localeList?: components["schemas"]["LocaleV1"][];
    };
    DataListOptionRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /**
       * Format: uuid
       * @description id
       * @example e844a4e5-1c09-474e-816f-05cdb1f093ed
       */
      dataListId?: string;
      option?: components["schemas"]["DataListOptionV1"];
    };
    DataListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      dataList?: components["schemas"]["DataListV1"];
    };
    /** @description permission groups list */
    PermissionGroupWithPermissionsV1: {
      /**
       * Format: uuid
       * @description id
       * @example 7efd9df0-cae7-455f-a721-eaec455105a4
       */
      id?: string;
      /** @description key */
      key?: string;
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /** Format: uuid */
      twinClassId?: string;
      /** @description permissions */
      permissions?: components["schemas"]["PermissionV1"][];
    };
    PermissionGroupedListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description permission groups list */
      permissionGroups?: components["schemas"]["PermissionGroupWithPermissionsV1"][];
    };
    /** @description group */
    PermissionGroupV1: {
      /**
       * Format: uuid
       * @description id
       * @example 7efd9df0-cae7-455f-a721-eaec455105a4
       */
      id?: string;
      /** @description key */
      key?: string;
      /** @description name */
      name?: string;
      /** @description description */
      description?: string;
      /** Format: uuid */
      twinClassId?: string;
    };
    PermissionListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description permission list */
      permissionList?: components["schemas"]["PermissionWithGroupV1"][];
    };
    /** @description permission list */
    PermissionWithGroupV1: {
      /**
       * Format: uuid
       * @description id
       * @example abdeef68-7d6d-4385-9906-e3b701d2c503
       */
      id?: string;
      /** @description key */
      key?: string;
      /**
       * @description name
       * @example Manager
       */
      name?: string;
      /** @description description */
      description?: string;
      group?: components["schemas"]["PermissionGroupV1"];
    };
    LocaleRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description locale */
      locale?: string;
    };
    TwinflowViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twinflow?: components["schemas"]["TwinflowBaseV3"];
    };
    WidgetListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description results - valid widget list */
      widgetList?: components["schemas"]["WidgetV1"][];
    };
    /** @description widget */
    WidgetV1: {
      /**
       * Format: uuid
       * @description id
       * @example 4245e338-3c09-4390-8a03-435d1da4e311
       */
      id?: string;
      /**
       * @description key
       * @example details
       */
      key?: string;
      /**
       * @description name
       * @example Details
       */
      name?: string;
    };
    TwinClassLinkListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      forwardLinkMap?: {
        [key: string]: components["schemas"]["TwinClassLinkV1"];
      };
      backwardLinkMap?: {
        [key: string]: components["schemas"]["TwinClassLinkV1"];
      };
    };
    TwinClassFieldListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description results - twin class fields list */
      twinClassFieldList?: components["schemas"]["TwinClassFieldV1"][];
    };
    CardListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description results - card list */
      cardList?: components["schemas"]["CardV1"][];
    };
    /** @description results - card list */
    CardV1: {
      /**
       * Format: uuid
       * @description id
       * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
       */
      id?: string;
      /**
       * @description key
       * @example details
       */
      key?: string;
      /**
       * @description name
       * @example Details
       */
      name?: string;
      /**
       * @description logo
       * @example http://twins.org/t/card/main.png
       */
      logo?: string;
      /**
       * @description layout
       * @example OneColumn
       */
      layoutKey?: string;
      /** @description Class fields list */
      widgets?: components["schemas"]["CardWidgetV1"][];
    };
    /** @description Class fields list */
    CardWidgetV1: {
      /**
       * Format: uuid
       * @description id
       * @example c2a7f81f-d7da-43e8-a1d3-18d6f632878b
       */
      id?: string;
      /**
       * @description layoutPosition
       * @example FirstColumn
       */
      layoutPositionKey?: string;
      /**
       * Format: int32
       * @description in layout position order
       * @example 1
       */
      inPositionOrder?: number;
      /**
       * @description name
       * @example Details
       */
      name?: string;
      /**
       * @description color
       * @example red
       */
      color?: string;
      /**
       * Format: uuid
       * @description widgetId
       * @example 4245e338-3c09-4390-8a03-435d1da4e311
       */
      widgetId?: string;
      widget?: components["schemas"]["WidgetV1"];
    };
    TwinRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      twin?: components["schemas"]["TwinV1"];
    };
    HistoryListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description history list */
      historyList?: components["schemas"]["HistoryV1"][];
    };
    /** @description history list */
    HistoryV1: {
      /**
       * Format: uuid
       * @description id
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      id?: string;
      /**
       * Format: uuid
       * @description twinId
       * @example 1b2091e3-971a-41bc-b343-1f980227d02f
       */
      twinId?: string;
      /**
       * Format: uuid
       * @description changes batch id
       */
      batchId?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description history actor id
       */
      actorUserId?: string;
      /** @enum {string} */
      type?: "twinCreated" | "headChanged" | "statusChanged" | "nameChanged" | "descriptionChanged" | "createdByChanged" | "assigneeChanged" | "fieldCreated" | "fieldChanged" | "fieldDeleted" | "markerChanged" | "tagChanged" | "attachmentCreate" | "attachmentDelete" | "attachmentUpdate" | "linkCreated" | "linkUpdated" | "linkDeleted" | "twinDeleted" | "unknown";
      /** @description Filled only if type = fieldChanged */
      fieldName?: string;
      twin?: components["schemas"]["TwinBaseV2"];
      actorUser?: components["schemas"]["UserV1"];
      /** @description Detailed description for history item. Contains markdown */
      changeDescription?: string;
      pagination?: components["schemas"]["PaginationV1"];
    };
    TransitionViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      transition?: components["schemas"]["TwinflowTransitionBaseV3"];
    };
    CommandRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description Command for run script */
      command?: string;
    };
    AppInfoRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      /** @description Info attributes key/value */
      attributes?: {
        [key: string]: string;
      };
    };
    DomainListRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      pagination?: components["schemas"]["PaginationV1"];
      /** @description domain list */
      domainList?: components["schemas"]["DomainViewRsv1"][];
    };
    CommentListRsv1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      relatedObjects?: components["schemas"]["RelatedObjectsV1"];
      pagination?: components["schemas"]["PaginationV1"];
      /** @description comment data */
      comments?: components["schemas"]["CommentViewV1"][];
    };
    AttachmentViewRsV1: {
      /**
       * Format: int32
       * @description request processing status (see ErrorCode enum)
       * @example 0
       */
      status?: number;
      /**
       * @description User friendly, localized request processing status description
       * @example success
       */
      msg?: string;
      /**
       * @description request processing status description, technical
       * @example success
       */
      statusDetails?: string;
      attachment?: components["schemas"]["AttachmentViewV2"];
    };
    /** @description attachment details */
    AttachmentViewV2: {
      /**
       * @description External storage link
       * @example https://test.filestorage.by/JFUjEFWksfqwf
       */
      storageLink?: string;
      /**
       * @description External id
       * @example JD999weqw9f
       */
      externalId?: string;
      /**
       * @description Title
       * @example cert.pdf
       */
      title?: string;
      /**
       * @description Description
       * @example cert.pdf
       */
      description?: string;
      /**
       * Format: uuid
       * @description link to the field to which attachment was added (if any)
       */
      twinClassFieldId?: string;
      /**
       * Format: uuid
       * @description link to the comment to which attachment was added (if any)
       */
      commentId?: string;
      /**
       * Format: uuid
       * @description id
       */
      id?: string;
      /**
       * Format: date-time
       * @description created at
       */
      createdAt?: string;
      /**
       * Format: uuid
       * @description author id
       */
      authorUserId?: string;
      authorUser?: components["schemas"]["UserV1"];
      /**
       * Format: uuid
       * @description twinflow transition id
       */
      twinflowTransitionId?: string;
      twinflowTransition?: components["schemas"]["TwinflowTransitionBaseV1"];
      comment?: components["schemas"]["CommentBaseDTOv2"];
      twinClassField?: components["schemas"]["TwinClassFieldV1"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Update user */
  userUpdateV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateRqV1"];
      };
    };
    responses: {
      /** @description User was updated */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete user */
  userDeleteV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update user locale */
  userLocaleUpdateV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example en */
        localeName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twinflow details */
  twinflowViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflow2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
        twinflowId: string;
      };
    };
    responses: {
      /** @description Twinflow details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinflowViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update twinflow by id */
  twinflowUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
        twinflowId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinflowUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twinflow prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinflowBaseV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update twin status */
  twinStatusUpdateV1: {
    parameters: {
      query?: {
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example a1178c4a-b974-449b-b51b-9a2bc54c5ea5 */
        twinStatusId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinStatusUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin status data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinStatusUpdateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class field list */
  twinClassFieldViewV1: {
    parameters: {
      query?: {
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d */
        twinClassFieldId: string;
      };
    };
    responses: {
      /** @description Twin class field information */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update twin class field */
  twinClassFieldUpdateV1: {
    parameters: {
      query?: {
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d */
        twinClassFieldId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassFieldUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class by id */
  twinClassViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description Twin class prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update twin class by id */
  twinClassUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin class prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /**
   * Returns twin data by id
   * @deprecated
   */
  twinViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update twin */
  twinUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete twin by id */
  twinDeleteV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Unmark twin as touched for user */
  twinUntouchV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example WATCHED */
        touchId: "WATCHED" | "STARRED" | "REVIEWED";
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Mark twin as touched for user */
  twinTouchV1: {
    parameters: {
      query?: {
        showTouch2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTouchMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example WATCHED */
        touchId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTouchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns comment by comment id */
  twinCommentV1: {
    parameters: {
      query?: {
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
        commentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CommentViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update comment and it's attachments */
  twinCommentUpdateV1: {
    parameters: {
      query?: {
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
        commentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentUpdateRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CommentViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete comment with attachments */
  twinCommentDeleteV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
        commentId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update businessAccount */
  businessAccountUpdateV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessAccountUpdateRqV1"];
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete businessAccount */
  businessAccountDeleteV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns map option id ref list data option */
  dataListOptionsMapViewPublicV1: {
    parameters: {
      query?: {
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListOptionMapRqV1"];
      };
    };
    responses: {
      /** @description Map {option id/list data option} prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionMapRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns public details lists */
  dataListPublicSearchV1: {
    parameters: {
      query?: {
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListSearchRqV1"];
      };
    };
    responses: {
      /** @description Public list details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Assign or discharge some group to user */
  userGroupMemberManageV1: {
    parameters: {
      query?: {
        showUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserGroupMemberManageRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Smart endpoint for adding new user. It will also add user to domain and businessAccount if specified. If given businessAccount is not registered in domain, it will register it */
  userAddV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserAddRqV1"];
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new transition */
  transitionCreateV1: {
    parameters: {
      query?: {
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 34618b09-e8dc-4712-a433-2e18915ee70d */
        twinflowId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransitionCreateRqV1"];
      };
    };
    responses: {
      /** @description Transition data */
      200: {
        content: {
          "application/json": components["schemas"]["TransitionCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twinflow search result */
  twinflowSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflow2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinflowListRqV1"];
      };
    };
    responses: {
      /** @description Twinflow list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinflowListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twinflow */
  twinflowCreateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showTwinflow2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinflow2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowInitStatus2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinflowMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinflowCreateRqV1"];
      };
    };
    responses: {
      /** @description Twinflow data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twin status */
  twinStatusCreateV1: {
    parameters: {
      query?: {
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinStatusCreateRqV1"];
      };
    };
    responses: {
      /** @description Twin status data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinStatusCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twin class field */
  twinClassFieldCreateV1: {
    parameters: {
      query?: {
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassFieldCreateRqV1"];
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Duplicates twin class by id */
  twinClassDuplicateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassDuplicateRqV1"];
      };
    };
    responses: {
      /** @description Twin class copy result */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twin class */
  twinClassCreateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassCreateRqV1"];
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class search result */
  twinClassSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinClassListRqV1"];
      };
    };
    responses: {
      /** @description Twin class list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Permisson check overview by twinId & userId */
  permissonCheckOverviewV1: {
    parameters: {
      query?: {
        showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionSchemaMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRoleUser2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRoleUserGroup2SpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRoleUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRoleUserMode?: "HIDE" | "SHORT" | "DETAILED";
        showUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionCheckOverviewRqV1"];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add link to twin */
  twinLinkAddV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinLinkAddRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinLinkAddRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Updates twin fields data by keys */
  twinFieldListUpdateV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinFieldListUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Creates or updates twin field data by key. */
  twinFieldByKeySaveV2: {
    parameters: {
      query: {
        /** @example alcosi */
        fieldValue: string;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example brand */
        fieldKey: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin field data by key */
  twinFieldByKeyViewV1: {
    parameters: {
      query?: {
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example brand */
        fieldKey: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Creates or updates twin field data by key. */
  twinFieldByKeySaveV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
        /** @example brand */
        fieldKey: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinFieldUpdateRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinFieldRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add attachment to twin */
  attachmentAddV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttachmentAddRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentAddRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twin */
  twinCreateV2: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinCreateRqV2"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Create new twin */
  twinCreateV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinCreateRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Twins search by alias */
  twinSearchByAliasV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example tools */
        searchAlias: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchByAliasRqV1"];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Count twins by search aliases */
  twinSearchByAliasCountV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchByAliasBatchRqV1"];
      };
    };
    responses: {
      /** @description Map { alias / count } */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchBatchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Twins search by search_id */
  twinSearchByIdV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 8c580967-c050-47cf-ac27-4096c6dda2d1 */
        searchId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchByAliasRqV1"];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Twins basic search for several queries connected by OR operator */
  twinSearchV3: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchRqV1"][];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Twins basic search */
  twinSearchV2: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchRqV1"];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Twins basic search */
  twinSearchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchRqV1"];
      };
    };
    responses: {
      /** @description Twin list */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Count twins by frontendId */
  twinSearchCountV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinSearchBatchRqV1"];
      };
    };
    responses: {
      /** @description Map { frontendId / count } */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchBatchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Perform twin transition by alias. An alias can be useful for performing transitions for twin from different statuses. For incoming twin, the appropriate transition will be selected based on its current status. */
  twinTransitionByAliasPerformV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example start */
        transitionAlias: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Perform transition for batch of twins by alias. An alias can be useful for performing transitions for twins from different statuses. For each incoming twin, the appropriate transition will be selected based on its current status. */
  twinTransitionByAliasPerformBatchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example start */
        transitionAlias: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformBatchRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns transition details */
  transitionViewV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    responses: {
      /** @description Transition details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TransitionViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update transition by id */
  transitionUpdateV1: {
    parameters: {
      query?: {
        showTransition2PermissionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransition2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransitionUpdateRqV1"];
      };
    };
    responses: {
      /** @description Transition prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinflowTransitionUpdateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Perform twin transition by transition id. Transition will be performed only if current twin status is correct for given transition */
  twinTransitionPerformV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Perform transition for batch of twins by transition id. Transition will be performed only if current twin status is correct for given transition */
  twinTransitionPerformBatchV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTransitionResultMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f6606fa2-c047-4ba9-a92c-84051df681ab */
        transitionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwinTransitionPerformBatchRqV1"];
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinTransitionPerformRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Search users within their roles of specific space */
  spaceRoleWithinUsersMapV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showSpace2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        spaceId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRefSpaceRoleSearchV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithinSpaceRolesListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Adding/removing a user to the space by role */
  spaceRoleUserManageV1: {
    parameters: {
      query?: {
        showUserMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        spaceId: string;
        /** @example 793e3120-e14a-4a22-ab09-060b9fedee35 */
        roleId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpaceRoleUserRqV1"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Featurer search */
  featurerListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showFeaturerMode?: "HIDE" | "SHORT" | "DETAILED";
        showFeaturerParamMode?: "HIDE" | "SHOW";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeaturerSearchRqV1"];
      };
    };
    responses: {
      /** @description Featurer data result */
      200: {
        content: {
          "application/json": components["schemas"]["FeaturerSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add user to domainIf user is not exist it will be created. */
  domainUserAddV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        domainId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainUserAddV1"];
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Update settings for businessAccount in domain */
  domainBusinessAccountUpdateV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        domainId: string;
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainBusinessAccountUpdateV1"];
      };
    };
    responses: {
      /** @description BusinessAccount was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add businessAccount to domain. If business account is not exist it will be created. Domain must be already present. */
  domainBusinessAccountAddV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        domainId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainBusinessAccountAddV1"];
      };
    };
    responses: {
      /** @description BusinessAccount was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add new domain. */
  domainAddV1: {
    parameters: {
      header: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DomainAddRqV1"];
      };
    };
    responses: {
      /** @description Domain was added */
      200: {
        content: {
          "application/json": components["schemas"]["DomainViewRsv1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns map option id ref list data option */
  dataListOptionsMapViewV1: {
    parameters: {
      query?: {
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListOptionMapRqV1"];
      };
    };
    responses: {
      /** @description Map {option id/list data option} prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionMapRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns lists details */
  dataListSearchV1: {
    parameters: {
      query?: {
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataListSearchRqV1"];
      };
    };
    responses: {
      /** @description List details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListSearchRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns comment list by twin id */
  twinCommentListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showComment2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showComment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showCommentMode?: "HIDE" | "SHORT" | "DETAILED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CommentListRsv1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add comment and it's attachments by twin */
  twinCommentAddV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example be44e826-ce24-4881-a227-f3f72d915a20 */
        twinId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentCreateRqV1"];
      };
    };
    responses: {
      /** @description Twin comment */
      200: {
        content: {
          "application/json": components["schemas"]["CommentCreateRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Add user to business account. If business account is not exist it will be created. If user is not exist it will be created */
  businessAccountUserAddV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessAccountUserAddRqV1"];
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return list of locales */
  localeListPublicViewV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description Public list details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["LocaleViewV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns public list data */
  dataListOptionPublicViewV1: {
    parameters: {
      query?: {
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
      path: {
        /** @example 7de977d4-df6d-4250-9cb2-088363d139a1 */
        dataListOptionId: string;
      };
    };
    responses: {
      /** @description Public list details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns public data list */
  dataListPublicByKeyViewV1: {
    parameters: {
      query?: {
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
      path: {
        /** @example country */
        dataListKey: string;
      };
    };
    responses: {
      /** @description Public list details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns public data list */
  dataListPublicViewV1: {
    parameters: {
      query?: {
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example WEB */
        Channel: string;
        /** @example en */
        Locale: string;
      };
      path: {
        /** @example e844a4e5-1c09-474e-816f-05cdb1f093ed */
        dataListId: string;
      };
    };
    responses: {
      /** @description Public list details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns user group list for selected user */
  userGroupForUserListV1: {
    parameters: {
      query?: {
        showUserGroupMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns grouped permission list for selected user */
  userPermissionGroupedListV1: {
    parameters: {
      query?: {
        showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGroupedListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns permission list for selected user */
  userPermissionListV1: {
    parameters: {
      query?: {
        showPermissionGroupMode?: "HIDE" | "SHORT" | "DETAILED";
        showPermissionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** View user locale in domain */
  userLocaleViewV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LocaleRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class field options shared in head (free for select) */
  twinClassFieldDataListSharedInHeadV1: {
    parameters: {
      query?: {
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 2fe95272-afcb-40ee-a6a8-87c5da4d5b8d */
        twinClassFieldId: string;
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        headTwinId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class by key */
  twinClassViewByKeyV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example TOOL */
        twinClassKey: string;
      };
    };
    responses: {
      /** @description Twin class prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns widget list */
  twinClassWidgetListV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description Widget list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["WidgetListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Get valid heads of given class */
  twinClassValidHeadV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description Twin class data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinSearchRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class link list */
  twinClassLinkListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showLinkMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassLinkListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class field list */
  twinClassFieldListV1: {
    parameters: {
      query?: {
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description Twin class field list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassFieldListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns card list */
  twinClassCardListV1: {
    parameters: {
      query?: {
        showCard2WidgetMode?: "HIDE" | "SHORT" | "DETAILED";
        showCardMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 458c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        twinClassId: string;
      };
    };
    responses: {
      /** @description Twin card list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["CardListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin class list */
  twinClassListV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description Twin class list prepared */
      200: {
        content: {
          "application/json": components["schemas"]["TwinClassListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin data by alias */
  twinViewByAliasV2: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinAlias: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin data by alias */
  twinViewByAliasV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinField2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinAlias: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin data by id */
  twinViewV2: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2AttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showTwin2AttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2TwinLinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinActionMode?: "HIDE" | "SHOW";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinByLinkMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinFieldCollectionMode?: "NO_FIELDS" | "NOT_EMPTY_FIELDS" | "ALL_FIELDS" | "NOT_EMPTY_FIELDS_WITH_ATTACHMENTS" | "ALL_FIELDS_WITH_ATTACHMENTS";
        showTwinLink2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinLink2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["TwinRsV2"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns twin history by id */
  historyListV1: {
    parameters: {
      query?: {
        childDepth?: number;
        lazyRelation?: boolean;
        showHistory2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showHistory2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showLinkDst2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwin2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwin2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinAliasMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinByHeadMode?: "WHITE" | "GREEN" | "FOREST_GREEN" | "YELLOW" | "BLUE" | "BLACK" | "GRAY" | "ORANGE";
        showTwinClass2LinkMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2StatusMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClass2TwinClassFieldMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassExtends2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassFieldDescriptor2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2TwinMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassFieldDescriptor2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassHead2TwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassMarker2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        showTwinClassMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showTwinClassTag2DataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 1b2091e3-971a-41bc-b343-1f980227d02f */
        twinId: string;
      };
    };
    responses: {
      /** @description Twin data */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Make config file for log substitutions */
  makeConfigForSubstitutions: {
    parameters: {
      query?: {
        filename?: string;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description Run command */
      200: {
        content: {
          "application/json": components["schemas"]["CommandRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns application info: versions, etc... */
  "Application info": {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description Application info */
      200: {
        content: {
          "application/json": components["schemas"]["AppInfoRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return all users within roles of specific space */
  spaceRoleWithinAllUsersMapV1: {
    parameters: {
      query?: {
        lazyRelation?: boolean;
        showSpace2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showSpaceRoleMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        spaceId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithinSpaceRolesListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns user list by selected space and role */
  spaceRoleByUserListV1: {
    parameters: {
      query?: {
        showUserMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 5d956a15-6858-40ba-b0aa-b123c54e250d */
        spaceId: string;
        /** @example 793e3120-e14a-4a22-ab09-060b9fedee35 */
        roleId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Return a list of domains for current user */
  domainListV1: {
    parameters: {
      query?: {
        showDomainMode?: "HIDE" | "SHORT" | "DETAILED";
        offset?: number;
        limit?: number;
        sortAsc?: boolean;
      };
      header: {
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DomainListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns list data */
  dataListOptionViewV1: {
    parameters: {
      query?: {
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 7de977d4-df6d-4250-9cb2-088363d139a1 */
        dataListOptionId: string;
      };
    };
    responses: {
      /** @description List details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListOptionRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns list data */
  dataListByKeyViewV1: {
    parameters: {
      query?: {
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example country */
        dataListKey: string;
      };
    };
    responses: {
      /** @description List details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Returns list data */
  dataListViewV1: {
    parameters: {
      query?: {
        showDataListMode?: "HIDE" | "SHORT" | "DETAILED";
        showDataListOptionMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example e844a4e5-1c09-474e-816f-05cdb1f093ed */
        dataListId: string;
      };
    };
    responses: {
      /** @description List details prepared */
      200: {
        content: {
          "application/json": components["schemas"]["DataListRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** View attachment by id */
  attachmentViewV1: {
    parameters: {
      query?: {
        showAttachment2TransitionMode?: "HIDE" | "SHORT" | "DETAILED" | "MANAGED";
        showAttachment2UserMode?: "HIDE" | "SHORT" | "DETAILED";
        showAttachmentCollectionMode?: "DIRECT" | "FROM_TRANSITIONS" | "FROM_COMMENTS" | "FROM_FIELDS" | "ALL";
        showAttachmentMode?: "HIDE" | "SHORT" | "DETAILED";
        showStatusMode?: "HIDE" | "SHORT" | "DETAILED";
      };
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 553ef9bc-3b48-430d-90d3-bdee516c3d87 */
        attachmentId: string;
      };
    };
    responses: {
      /** @description Attachment data */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentViewRsV1"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete attachment by id */
  attachmentDeleteV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 553ef9bc-3b48-430d-90d3-bdee516c3d87 */
        attachmentId: string;
      };
    };
    responses: {
      /** @description Deletion result */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete user from domain */
  domainUserDeleteV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        domainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete businessAccount from domain */
  domainBusinessAccountDeleteV1: {
    parameters: {
      header: {
        /** @example f67ad556-dd27-4871-9a00-16fb0e8a4102 */
        DomainId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673,9a3f6075-f175-41cd-a804-934201ec969c */
        AuthToken: string;
        /** @example WEB */
        Channel: string;
      };
    };
    responses: {
      /** @description BusinessAccount was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Delete user from businessAccount */
  businessAccountUserDeleteV1: {
    parameters: {
      header: {
        /** @example WEB */
        Channel: string;
      };
      path: {
        /** @example 9a3f6075-f175-41cd-a804-934201ec969c */
        businessAccountId: string;
        /** @example 608c6d7d-99c8-4d87-89c6-2f72d0f5d673 */
        userId: string;
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Access is denied */
      401: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
}
